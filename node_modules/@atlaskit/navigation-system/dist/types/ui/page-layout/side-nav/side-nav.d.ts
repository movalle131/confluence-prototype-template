import type { CommonSlotProps } from '../types';
import { type VisibilityCallback } from './use-side-nav-visibility-callbacks';
type SideNavProps = CommonSlotProps & {
    /**
     * The content of the layout area.
     * Should include side nav layout areas as required: `SideNavHeader`, `SideNavContent`, `SideNavFooter`.
     * Within these, you can use side nav menu items.
     */
    children: React.ReactNode;
    /**
     * The accessible name of the slot, announced by screen readers.
     */
    label?: string;
    /**
     * Whether the side nav should be collapsed by default __on desktop screens__.
     *
     * It is always collapsed by default for mobile screens.
     *
     * This value is used when the side nav is first mounted, but you should continuously update your
     * persisted state using the `onCollapse` and `onExpand` callbacks, to ensure it is up to date
     * when the app is reloaded.
     *
     * __Note:__ If using this prop, ensure that it is also provided to the `SideNavToggleButton`.
     * This is to ensure the state is in sync before post-SSR hydration.
     */
    defaultCollapsed?: boolean;
    /**
     * The default width of the side nav layout area.
     * It should be between the resize bounds - the minimum is 240px and the maximum is 50% of the viewport width.
     *
     * It is only used when the side nav is first mounted, but you should continuously update your
     * persisted state using the `onResizeEnd` callback of `PanelSplitter`, to ensure it is up to date
     * when the app is reloaded.
     */
    defaultWidth?: number;
    /**
     * Called when the side nav is expanded.
     */
    onExpand?: VisibilityCallback;
    /**
     * Called when the side nav is collapsed.
     */
    onCollapse?: VisibilityCallback;
};
/**
 * The side navigation layout area. It will show on the left (inline start) of the screen.
 *
 * Use the side nav area components (`SideNavHeader`, `SideNavContent`, `SideNavFooter`) to position
 * content within areas of the side nav.
 *
 * You can optionally render a `PanelSplitter` as a child to make the side navigation slot resizable.
 */
export declare function SideNav({ children, defaultCollapsed, defaultWidth, testId, label, // Default value is defined in `SideNavInternal`
skipLinkLabel, // Default value is defined in `SideNavInternal`
onExpand, onCollapse, id, }: SideNavProps): JSX.Element;
export {};
