type onExpansionToggle = (isExpanded: boolean) => void;
/**
 * Whether all ancestor menu items of the current menu item are expanded. Used to know if the current menu item is
 * shown within the menu item tree.
 */
export declare const AreAllAncestorsExpandedContext: import("react").Context<boolean | null>;
/**
 * A context for storing the isExpanded value of the ExpandableMenuItem.
 */
export declare const IsExpandedContext: import("react").Context<boolean | null>;
/**
 * A context for storing a function that sets isExpanded value of the ExpandableMenuItem.
 */
export declare const SetIsExpandedContext: import("react").Context<((value: boolean) => void) | null>;
/**
 * A context for storing a function that triggers when isExpanded value of the ExpandableMenuItem is changed.
 */
export declare const OnExpansionToggleContext: import("react").Context<onExpansionToggle | null>;
/**
 * A context for storing the level value of the ExpandableMenuItem.
 */
export declare const LevelContext: import("react").Context<number>;
export declare const useIsExpanded: () => boolean;
export declare const useSetIsExpanded: () => ((value: boolean) => void);
export declare const useOnExpansionToggle: () => onExpansionToggle | null;
export declare const useLevel: () => number;
/**
 * Whether all ancestor menu items of the current menu item are expanded. Used to know if the current menu item is
 * shown within the menu item tree.
 *
 * It works by combining (using &&) all the expansion states of the current menu item's ancestors.
 *
 * Using `true` as the fallback for cases when the menu item does not have ancestors.
 */
export declare const useAreAllAncestorsExpanded: () => boolean;
export {};
