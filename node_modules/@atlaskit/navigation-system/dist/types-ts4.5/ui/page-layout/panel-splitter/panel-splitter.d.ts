/**
 * @jsxRuntime classic
 * @jsx jsx
 */
import { type ReactNode } from 'react';
import type { ResizeBounds, ResizeEndCallback, ResizeStartCallback } from './types';
type PanelSplitterProps = {
    /**
     * The accessible label for the panel splitter. It is visually hidden, but is required for accessibility.
     */
    label: React.ReactNode;
    /**
     * Called when the user begins resizing the panel.
     * Intended for analytics.
     */
    onResizeStart?: ResizeStartCallback;
    /**
     * Called when the user finishes resizing the panel.
     */
    onResizeEnd?: ResizeEndCallback;
    /**
     * A unique string that appears as data attribute `data-testid` in the rendered code, serving as a hook for automated tests.
     */
    testId?: string;
};
type PanelSplitterDragData = {
    panelId: string | symbol | undefined;
    initialWidth: number;
    resizingWidth: string;
    resizeBounds: ResizeBounds;
    direction: 'ltr' | 'rtl';
};
export declare function isPanelSplitterDragData(data: Record<string | symbol, unknown>): data is PanelSplitterDragData;
/**
 * _PanelSplitter_
 *
 * A component that allows the user to resize a layout area.
 * It can be used within layout areas like `SideNav`, `Panel`, and `Aside`. The layout area component should
 * provide the context for it using `<PanelSplitterProvider>`.
 *
 * Example usage in products:
 * ```tsx
 * <SideNav>
 *   {/* other side nav content *}
 *   <PanelSplitter label="Resize Side Nav" />
 * </SideNav>
 * ```
 */
export declare const PanelSplitter: ({ label, onResizeStart, onResizeEnd, testId, }: PanelSplitterProps) => ReactNode;
export {};
