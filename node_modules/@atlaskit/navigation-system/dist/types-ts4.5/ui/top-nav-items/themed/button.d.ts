/**
 * @jsxRuntime classic
 * @jsx jsx
 */
import React from 'react';
import type { IconButtonProps } from '@atlaskit/button/new';
import { type AnchorProps, type PressableProps } from '@atlaskit/primitives/compiled';
type ButtonAppearance = 'default' | 'primary' | 'subtle';
interface CommonProps {
    /**
     * The button style variation.
     */
    appearance?: ButtonAppearance;
    /**
     * Whether the button is disabled.
     */
    isDisabled?: boolean;
    /**
     * Indicates that the button is selected.
     */
    isSelected?: boolean;
}
/**
 * Props from primitives that we explicitly ignore and remove from spread props,
 * because they apply styles.
 *
 * `css` / `className` are not here because primitives don't support them.
 *
 * See `packages/design-system/primitives/src/components/anchor.tsx` and `packages/design-system/primitives/src/components/pressable.tsx`
 * for where these are defined. These shouldn't change very often as the direction is `xcss` over individual props.
 */
type IgnoredPrimitiveProps = 'style' | 'xcss' | 'backgroundColor' | 'padding' | 'paddingBlock' | 'paddingBlockStart' | 'paddingBlockEnd' | 'paddingInline' | 'paddingInlineStart' | 'paddingInlineEnd';
/**
 * Props present in underlying primitives but we want to override,
 * so we don't want to inherit their definitions
 */
type OverridenPrimitiveProps = 'aria-label' | 'children' | IgnoredPrimitiveProps;
/**
 * Props that are common between link buttons.
 */
interface LinkVariantCommonProps<RouterLinkConfig extends Record<string, any> = never> extends CommonProps, Omit<AnchorProps<RouterLinkConfig>, OverridenPrimitiveProps> {
}
/**
 * Props shared by `Button` and `IconButton`
 */
interface ActionVariantCommonProps extends CommonProps, Omit<PressableProps, OverridenPrimitiveProps> {
}
export declare const themedButtonBackground = "--ds-top-bar-button-background";
export declare const themedButtonBackgroundHovered = "--ds-top-bar-button-background-hovered";
export declare const themedButtonBackgroundPressed = "--ds-top-bar-button-background-pressed";
export declare const themedButtonBorder = "--ds-top-bar-button-border";
export declare const themedButtonPrimaryText = "--ds-top-bar-button-primary-text";
export declare const themedButtonPrimaryBackground = "--ds-top-bar-button-primary-background";
export declare const themedButtonPrimaryBackgroundHovered = "--ds-top-bar-button-primary-background-hovered";
export declare const themedButtonPrimaryBackgroundPressed = "--ds-top-bar-button-primary-background-pressed";
export declare const themedButtonSelectedText = "--ds-top-bar-button-selected-text";
export declare const themedButtonSelectedBackground = "--ds-top-bar-button-selected-background";
export declare const themedButtonSelectedBackgroundHovered = "--ds-top-bar-button-selected-background-hovered";
export declare const themedButtonSelectedBackgroundPressed = "--ds-top-bar-button-selected-background-pressed";
export declare const themedButtonSelectedBorder = "--ds-top-bar-button-selected-border";
export declare const themedButtonDisabledText = "--ds-top-bar-button-disabled-text";
export declare const themedButtonDisabledBackground = "--ds-top-bar-button-disabled-background";
/**
 * Props shared by `Button` and `LinkButton`
 */
interface TextButtonCommonProps {
    /**
     * Places an icon within the button, before the button's text.
     */
    iconBefore?: IconButtonProps['icon'];
    /**
     * Text content to be rendered in the button.
     */
    children: React.ReactNode;
}
export interface ThemedButtonProps extends ActionVariantCommonProps, TextButtonCommonProps {
}
/**
 * __Themed button__
 *
 * A themed button for the top bar.
 */
export declare const ThemedButton: React.ForwardRefExoticComponent<Omit<ThemedButtonProps, "ref"> & React.RefAttributes<HTMLButtonElement>>;
export interface ThemedLinkButtonProps<RouterLinkConfig extends Record<string, any> = never> extends LinkVariantCommonProps<RouterLinkConfig>, TextButtonCommonProps {
}
/**
 * __Themed link button__
 *
 * A themed link button for the top bar.
 */
export declare const ThemedLinkButton: <RouterLinkConfig extends Record<string, any> = never>(props: ThemedLinkButtonProps<RouterLinkConfig> & React.RefAttributes<HTMLAnchorElement>) => React.ReactElement | null;
/**
 * Props shared by `ThemedIconButtonProps` and `ThemedLinkIconButton`
 */
interface IconButtonCommonProps {
    children?: never;
    'aria-label'?: never;
    /**
     * Provide an accessible label, often used by screen readers.
     */
    label: React.ReactNode;
    /**
     * Places an icon within the button.
     */
    icon: IconButtonProps['icon'];
    /**
     * Props passed down to the Tooltip component.
     */
    tooltip?: IconButtonProps['tooltip'];
}
export interface ThemedIconButtonProps extends ActionVariantCommonProps, IconButtonCommonProps {
}
/**
 * __Themed icon button__
 *
 * A themed icon button for the top bar.
 */
export declare const ThemedIconButton: React.ForwardRefExoticComponent<Omit<ThemedIconButtonProps, "ref"> & React.RefAttributes<HTMLButtonElement>>;
export interface ThemedLinkIconButtonProps<RouterLinkConfig extends Record<string, any> = never> extends LinkVariantCommonProps<RouterLinkConfig>, IconButtonCommonProps {
    href: string | RouterLinkConfig;
}
/**
 * __Themed link icon button__
 *
 * A themed link icon button for the top bar.
 */
export declare const ThemedLinkIconButton: <RouterLinkConfig extends Record<string, any> = never>(props: ThemedLinkIconButtonProps<RouterLinkConfig> & React.RefAttributes<HTMLAnchorElement>) => React.ReactElement | null;
export {};
