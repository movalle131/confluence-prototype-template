import React from 'react';
import type { UIAnalyticsEvent } from '@atlaskit/analytics-next';
import type { AnchorProps } from '@atlaskit/primitives/anchor';
interface LogInProps extends Pick<AnchorProps, 'href'> {
    /**
     * Provide an accessible label, often used by screen readers.
     */
    label: React.ReactNode;
    /**
     * Handler called on click. You can use the second argument to fire Atlaskit analytics events on custom channels.
     * They could then be routed to GASv3 analytics. See the pressable or anchor primitive code examples for
     * information on [firing Atlaskit analytics events](https://atlassian.design/components/primitives/pressable/examples#atlaskit-analytics)
     * or [routing these to GASv3 analytics](https://atlassian.design/components/primitives/pressable/examples#gasv3-analytics).
     */
    onClick?: (e: React.MouseEvent<HTMLAnchorElement>, analyticsEvent: UIAnalyticsEvent) => void;
    /**
     * Called when the mouse enters the element container.
     * Allows preloading popup components
     */
    onMouseEnter?: React.MouseEventHandler<HTMLAnchorElement>;
    /**
     * A unique string that appears as data attribute `data-testid` in the rendered code, serving as a hook for automated tests.
     */
    testId?: string;
    /**
     * An optional name used to identify events for [React UFO (Unified Frontend Observability) press interactions](https://developer.atlassian.com/platform/ufo/react-ufo/react-ufo/getting-started/#quick-start--press-interactions). For more information, see [React UFO integration into Design System components](https://go.atlassian.com/react-ufo-dst-integration).
     */
    interactionName?: string;
}
/**
 * __Log in__
 *
 * The Log in button for the top navigation.
 */
export declare const LogIn: React.ForwardRefExoticComponent<LogInProps & React.RefAttributes<HTMLAnchorElement>>;
export {};
