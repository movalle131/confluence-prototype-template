/**
 * @jsxFrag
 * @jsxRuntime classic
 * @jsx jsx
 */
import { type ReactNode } from 'react';
import { type Instruction } from '@atlaskit/pragmatic-drag-and-drop-hitbox/list-item';
import { draggable, dropTargetForElements } from '@atlaskit/pragmatic-drag-and-drop/element/adapter';
import { attachInstruction } from './hitbox';
type TInternalState = {
    type: 'idle';
} | {
    type: 'preview';
    container: HTMLElement;
    ui: {
        elemBefore?: ReactNode;
        content: ReactNode;
    };
} | {
    type: 'dragging';
} | {
    type: 'is-over';
    instruction: Instruction | null;
};
export type TMenuItemDragAndDropState = Exclude<TInternalState, {
    type: 'preview';
}> | {
    type: 'preview';
};
type TPDNDDraggableArgs = Required<Parameters<typeof draggable>[0]>;
type TPDNDDropTargetArgs = Required<Parameters<typeof dropTargetForElements>[0]>;
type TDraggableArgs = {
    getDragPreviewPieces: (args: Parameters<TPDNDDraggableArgs['getInitialData']>[0]) => {
        elemBefore?: ReactNode;
        content: ReactNode;
    };
    getInitialData: (args: Parameters<TPDNDDraggableArgs['getInitialData']>[0]) => Record<string | symbol, unknown>;
    canDrag?: TPDNDDraggableArgs['canDrag'];
};
type TDropTargetArgs = {
    getOperations: (args: Parameters<TPDNDDropTargetArgs['getData']>[0]) => Parameters<typeof attachInstruction>[1]['operations'];
    getData: TPDNDDropTargetArgs['getData'];
    canDrop: TPDNDDropTargetArgs['canDrop'];
};
/**
 * A convenience helper for setting up drag and drop for menu items
 *
 * - Don't include the `draggable` property if you don't want the menu item to be a draggable
 * - Don't include the `dropTarget` property if you don't want the menu item to be a drop target
 */
export declare function useMenuItemDragAndDrop({ draggable: draggableArgs, dropTarget: dropTargetArgs, }: {
    draggable?: TDraggableArgs;
    dropTarget?: TDropTargetArgs;
}): {
    state: TMenuItemDragAndDropState;
    draggableButtonRef: import("react").MutableRefObject<HTMLButtonElement | null>;
    dropTargetRef: import("react").MutableRefObject<HTMLDivElement | null>;
    draggableAnchorRef: import("react").MutableRefObject<HTMLAnchorElement | null>;
    dragPreview: import("react").ReactElement<any, string | import("react").JSXElementConstructor<any>> | import("react").ReactPortal | null;
    dropIndicator: false | JSX.Element | null;
};
export {};
