/* skip-links-container.tsx generated by @compiled/babel-plugin v0.36.1 */
// eslint-disable-next-line @atlaskit/design-system/no-emotion-primitives -- to be migrated to @atlaskit/primitives/compiled â€“ go/akcss
import "./skip-links-container.compiled.css";
import * as React from 'react';
import { ax, ix } from "@compiled/react/runtime";
import { Text } from '@atlaskit/primitives';
import { useSortedSkipLinks } from '../../context/skip-links/skip-links-data-context';
import { SkipLink } from './skip-link';
var styles = {
  root: "_zulp1b66 _2rkoglpi _1rjcutpp _18zrutpp _1e0c1txw _2lx21bp4 _kqsw1n9t _1e02v47k _152tv47k _bfhk1bhr _16qs1cd0 _1pby1mrw _tzy4idpf _lcxvglyw _1digjh3g _1mygkb7n _18eu1wug",
  skipLinkList: "_zulp1b66 _1e0c1txw _2lx21bp4 _1x8w11lx _2mzuglyw _1pfhze3t _bozgze3t"
};

/**
 * Keydown handler to hide the skip links when escape is pressed.
 *
 * TODO: consider removing this, it doesn't make a lot of sense.
 * The skip links look like a popup but in reality they aren't.
 * Even though we hide them if you press TAB it will reopen the list and move to the next one...
 */
var closeOnEscape = function closeOnEscape(event) {
  if (event.key !== 'Escape') {
    return;
  }
  var activeElement = document.activeElement;
  if (activeElement instanceof HTMLElement) {
    activeElement.blur();
  }
};
var isOnlyWhitespaceRegex = /^\s*$/;

/**
 * A container element for the skip links
 * The default label will be used when the `skipLinksLabel` attribute is not
 * provided or the attribute is an empty string. If a string comprised only of
 * spaces is provided, the skip link heading element will be removed, but the
 * default label will still be used in `title` attribute of the skip links
 * themselves.
 */
export var SkipLinksContainer = function SkipLinksContainer(_ref) {
  var label = _ref.label,
    testId = _ref.testId;
  var sortedSkipLinks = useSortedSkipLinks();
  if (sortedSkipLinks.length === 0) {
    return null;
  }
  var isEmptyLabel = isOnlyWhitespaceRegex.test(label);
  return /*#__PURE__*/React.createElement("div", {
    onKeyDown: closeOnEscape,
    "data-testid": testId ? "".concat(testId, "--skip-links-container") : undefined,
    className: ax([styles.root])
  }, !isEmptyLabel && /*#__PURE__*/React.createElement(Text, {
    weight: "bold",
    testId: testId ? "".concat(testId, "--skip-links-container--label") : undefined
  }, label), /*#__PURE__*/React.createElement("ol", {
    className: ax([styles.skipLinkList])
  }, sortedSkipLinks.map(function (_ref2) {
    var id = _ref2.id,
      label = _ref2.label,
      onBeforeNavigate = _ref2.onBeforeNavigate;
    return /*#__PURE__*/React.createElement(SkipLink, {
      key: id,
      id: id,
      onBeforeNavigate: onBeforeNavigate
    }, label);
  })));
};