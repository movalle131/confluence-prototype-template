import React from 'react';
import { gridRootId } from './root';

/**
 * This is not ideal and shouldn't be used by anything outside of `<Banner>` and `<TopNav>`.
 *
 * This makes the other page layout elements aware that the banner and top bar have been mounted, provides them
 * with their heights. This is needed to power the stick points of page layout elements like SideNav and Panel.
 *
 * We should clean this up once we have a better solution, such as moving the size props for banner and top bar into `Root`.
 */
export var HoistCssVarToLocalGrid = function HoistCssVarToLocalGrid(_ref) {
  var variableName = _ref.variableName,
    value = _ref.value;
  return /*#__PURE__*/React.createElement("style", null, "#".concat(gridRootId, " { ").concat(variableName, ": ").concat(value, "px }"));
};
var getCssStringValue = function getCssStringValue(value) {
  return typeof value === 'number' ? "".concat(value, "px") : value;
};

/**
 * Hoists CSS variables to the document root. This is support the legacy edge case of monolith pages being injected as a
 * sibling to the page layout, as opposed to within the `Main` slot.
 */
export var DangerouslyHoistCssVarToDocumentRoot = function DangerouslyHoistCssVarToDocumentRoot(_ref2) {
  var variableName = _ref2.variableName,
    value = _ref2.value,
    mediaQuery = _ref2.mediaQuery,
    responsiveValue = _ref2.responsiveValue;
  /**
   * Note don't put multiple variables in multiple lines. eg
   * <style>
   *   {css1}
   *   {css2}
   * </style>
   *
   * React will insert an empty HTML comment in between the text in SSR.
   * This is not a valid tag and will break the page.
   * <style>foo<!-- -->bar</style>
   */
  var style = ":root { ".concat(variableName, ": ").concat(getCssStringValue(value), " }");
  if (mediaQuery && responsiveValue) {
    style += " ".concat(mediaQuery, " { :root { ").concat(variableName, ": ").concat(getCssStringValue(responsiveValue), " } }");
  }
  return (
    /*#__PURE__*/
    // Using a global style is required for SSR, as we can't use React hooks
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-global-styles
    React.createElement("style", null, style)
  );
};