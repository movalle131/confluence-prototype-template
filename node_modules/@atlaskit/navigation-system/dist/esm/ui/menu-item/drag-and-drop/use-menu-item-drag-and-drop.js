/* use-menu-item-drag-and-drop.tsx generated by @compiled/babel-plugin v0.36.1 */
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import * as React from 'react';
import { ax, ix } from "@compiled/react/runtime";
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
import { useCallback, useEffect, useMemo, useRef, useState } from 'react';
import { createPortal } from 'react-dom';
import invariant from 'tiny-invariant';
import { draggable, dropTargetForElements } from '@atlaskit/pragmatic-drag-and-drop/element/adapter';
import { pointerOutsideOfPreview } from '@atlaskit/pragmatic-drag-and-drop/element/pointer-outside-of-preview';
import { setCustomNativeDragPreview } from '@atlaskit/pragmatic-drag-and-drop/element/set-custom-native-drag-preview';
import { DragPreview } from './drag-preview';
import { DropIndicator } from './drop-indicator';
import { attachInstruction, extractInstruction } from './hitbox';
var idle = {
  type: 'idle'
};
/**
 * A convenience helper for setting up drag and drop for menu items
 *
 * - Don't include the `draggable` property if you don't want the menu item to be a draggable
 * - Don't include the `dropTarget` property if you don't want the menu item to be a drop target
 */
export function useMenuItemDragAndDrop(_ref) {
  var draggableArgs = _ref.draggable,
    dropTargetArgs = _ref.dropTarget;
  var draggableAnchorRef = useRef(null);
  var draggableButtonRef = useRef(null);
  var dropTargetRef = useRef(null);
  var _useState = useState(idle),
    _useState2 = _slicedToArray(_useState, 2),
    internalState = _useState2[0],
    setInternalState = _useState2[1];
  var getDraggableElement = useCallback(function () {
    var _ref2, _draggableAnchorRef$c;
    return (_ref2 = (_draggableAnchorRef$c = draggableAnchorRef.current) !== null && _draggableAnchorRef$c !== void 0 ? _draggableAnchorRef$c : draggableButtonRef.current) !== null && _ref2 !== void 0 ? _ref2 : null;
  }, []);

  // Set up draggable
  useEffect(function () {
    // Don't set up a draggable if there are no draggable args
    if (!draggableArgs) {
      return;
    }
    var element = getDraggableElement();
    invariant(element, "draggableAnchorRef or draggableButtonRef not set");
    return draggable({
      element: element,
      getInitialData: draggableArgs.getInitialData,
      canDrag: draggableArgs.canDrag,
      onGenerateDragPreview: function onGenerateDragPreview(_ref3) {
        var nativeSetDragImage = _ref3.nativeSetDragImage,
          source = _ref3.source,
          location = _ref3.location;
        setCustomNativeDragPreview({
          nativeSetDragImage: nativeSetDragImage,
          getOffset: pointerOutsideOfPreview({
            x: "var(--ds-space-200, 16px)",
            y: "var(--ds-space-100, 8px)"
          }),
          render: function render(_ref4) {
            var container = _ref4.container;
            var args = {
              dragHandle: source.dragHandle,
              element: source.element,
              input: location.current.input
            };
            setInternalState({
              type: 'preview',
              container: container,
              ui: draggableArgs.getDragPreviewPieces(args)
            });
          }
        });
      },
      onDragStart: function onDragStart() {
        setInternalState({
          type: 'dragging'
        });
      },
      onDrop: function onDrop() {
        setInternalState(idle);
      }
    });
  }, [draggableArgs, getDraggableElement]);

  // Set up drop target
  useEffect(function () {
    if (!dropTargetArgs) {
      return;
    }

    // Don't need to provide a draggable element to have a drop target.
    // Using this element in our `canDrop` check
    var draggableElement = getDraggableElement();
    var dropTarget = dropTargetRef.current;
    invariant(dropTarget, "dropTargetRef was not set");
    return dropTargetForElements({
      element: dropTarget,
      // cannot drop on self
      canDrop: function canDrop(args) {
        // cannot drop on self
        if (args.source.element === draggableElement) {
          return false;
        }
        if (dropTargetArgs.canDrop) {
          return dropTargetArgs.canDrop(args);
        }
        return true;
      },
      // menu items are always sticky, and the GroupDropIndicator should clear stickiness
      getIsSticky: function getIsSticky() {
        return true;
      },
      getData: function getData(args) {
        var _dropTargetArgs$getDa, _dropTargetArgs$getDa2;
        var data = (_dropTargetArgs$getDa = (_dropTargetArgs$getDa2 = dropTargetArgs.getData) === null || _dropTargetArgs$getDa2 === void 0 ? void 0 : _dropTargetArgs$getDa2.call(dropTargetArgs, args)) !== null && _dropTargetArgs$getDa !== void 0 ? _dropTargetArgs$getDa : {};
        var operations = dropTargetArgs.getOperations(args);
        return attachInstruction(data, {
          input: args.input,
          element: args.element,
          operations: operations
        });
      },
      onDragStart: function onDragStart(_ref5) {
        var self = _ref5.self;
        var instruction = extractInstruction(self.data);
        setInternalState({
          type: 'is-over',
          instruction: instruction
        });
      },
      onDrag: function onDrag(_ref6) {
        var self = _ref6.self;
        var instruction = extractInstruction(self.data);
        setInternalState(function (current) {
          var _current$instruction, _current$instruction2;
          if (current.type === 'is-over' && (instruction === null || instruction === void 0 ? void 0 : instruction.operation) === ((_current$instruction = current.instruction) === null || _current$instruction === void 0 ? void 0 : _current$instruction.operation) && (instruction === null || instruction === void 0 ? void 0 : instruction.blocked) === ((_current$instruction2 = current.instruction) === null || _current$instruction2 === void 0 ? void 0 : _current$instruction2.blocked)) {
            return current;
          }
          return {
            type: 'is-over',
            instruction: instruction
          };
        });
      },
      onDragLeave: function onDragLeave() {
        setInternalState(idle);
      },
      onDrop: function onDrop() {
        setInternalState(idle);
      },
      onDragEnter: function onDragEnter(_ref7) {
        var self = _ref7.self;
        var instruction = extractInstruction(self.data);
        setInternalState({
          type: 'is-over',
          instruction: instruction
        });
      }
    });
  }, [dropTargetArgs, getDraggableElement]);
  var dragPreview = function () {
    if (internalState.type !== 'preview') {
      return null;
    }
    return /*#__PURE__*/createPortal( /*#__PURE__*/React.createElement(DragPreview, {
      elemBefore: internalState.ui.elemBefore
    }, internalState.ui.content), internalState.container);
  }();
  var dropIndicator = internalState.type === 'is-over' && internalState.instruction && /*#__PURE__*/React.createElement(DropIndicator, {
    instruction: internalState.instruction
  });
  var state = useMemo(function () {
    if (internalState.type === 'preview') {
      return {
        type: 'preview'
      };
    }
    // returning a new object to avoid modification of our `internalState` object
    return _objectSpread({}, internalState);
  }, [internalState]);
  return {
    state: state,
    draggableButtonRef: draggableButtonRef,
    dropTargetRef: dropTargetRef,
    draggableAnchorRef: draggableAnchorRef,
    dragPreview: dragPreview,
    dropIndicator: dropIndicator
  };
}