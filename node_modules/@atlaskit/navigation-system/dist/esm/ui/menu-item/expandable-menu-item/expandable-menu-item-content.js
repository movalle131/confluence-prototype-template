/* expandable-menu-item-content.tsx generated by @compiled/babel-plugin v0.36.1 */
import "./expandable-menu-item-content.compiled.css";
import * as React from 'react';
import { ax, ix } from "@compiled/react/runtime";
import { forwardRef, useRef } from 'react';
import { cx } from '@compiled/react';
import { List } from '../../../components/list';
import { expandableMenuItemIndentation } from '../constants';
import { AreAllAncestorsExpandedContext, LevelContext, useAreAllAncestorsExpanded, useIsExpanded, useLevel } from './expandable-menu-item-context';
var styles = {
  content: "_bozg1crf",
  collapsedContent: "_1e0cglyw"
};
/**
 * __ExpandableMenuItemContent__
 *
 * The expandable and collapsable section of the expandable menu item. It should contain the nested menu items.
 */
export var ExpandableMenuItemContent = /*#__PURE__*/forwardRef(function (_ref, forwardedRef) {
  var children = _ref.children;
  var isExpanded = useIsExpanded();
  var level = useLevel();
  var hasExpanded = useRef(false);
  var areAllAncestorsExpanded = useAreAllAncestorsExpanded();
  if (!isExpanded && !hasExpanded.current) {
    return null;
  }
  hasExpanded.current = true;
  return /*#__PURE__*/React.createElement(LevelContext.Provider, {
    value: level + 1
  }, /*#__PURE__*/React.createElement(AreAllAncestorsExpandedContext.Provider, {
    value:
    /**
     * By combining the current ancestor and with the current menu item's state, all nested menu items will know if their
     * ancestor menu items are all expanded.
     */
    areAllAncestorsExpanded && isExpanded
  }, /*#__PURE__*/React.createElement(List, {
    ref: forwardedRef,
    xcss: cx(styles.content, !isExpanded && styles.collapsedContent)
  }, children)));
});