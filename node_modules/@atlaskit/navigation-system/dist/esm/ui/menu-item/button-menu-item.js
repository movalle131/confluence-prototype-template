import React, { forwardRef } from 'react';
import { MenuItemBase } from './menu-item';
import { MenuListItem } from './menu-list-item';

/**
 * We intentionally do not support the `isSelected` prop (which other menu item components
 * support) because `ButtonMenuItem`s do not correspond to a "page", so can't be navigated
 *  to and become in a selected state.
 */

/**
 * __ButtonMenuItem__
 *
 * A menu item button. It should be used within a `ul`, as it renders a list item.
 */
export var ButtonMenuItem = /*#__PURE__*/forwardRef(function (_ref, forwardedRef) {
  var testId = _ref.testId,
    actions = _ref.actions,
    children = _ref.children,
    description = _ref.description,
    elemAfter = _ref.elemAfter,
    isDisabled = _ref.isDisabled,
    elemBefore = _ref.elemBefore,
    actionsOnHover = _ref.actionsOnHover,
    onClick = _ref.onClick,
    interactionName = _ref.interactionName,
    isContentTooltipDisabled = _ref.isContentTooltipDisabled,
    visualContentRef = _ref.visualContentRef,
    listItemRef = _ref.listItemRef,
    isDragging = _ref.isDragging,
    hasDragIndicator = _ref.hasDragIndicator,
    dropIndicator = _ref.dropIndicator;
  return /*#__PURE__*/React.createElement(MenuListItem, {
    ref: listItemRef
  }, /*#__PURE__*/React.createElement(MenuItemBase, {
    testId: testId,
    description: description,
    elemAfter: elemAfter,
    elemBefore: elemBefore,
    isDisabled: isDisabled
    /**
     * Not passing `actions` and `actionsOnHover` to MenuItemBase when `isDisabled`,
     * so they aren't rendered in the disabled state.
     */,
    actions: isDisabled ? undefined : actions,
    actionsOnHover: isDisabled ? undefined : actionsOnHover,
    onClick: onClick,
    ref: forwardedRef,
    visualContentRef: visualContentRef,
    interactionName: interactionName,
    isContentTooltipDisabled: isContentTooltipDisabled,
    isDragging: isDragging,
    hasDragIndicator: hasDragIndicator,
    dropIndicator: dropIndicator
  }, children));
});