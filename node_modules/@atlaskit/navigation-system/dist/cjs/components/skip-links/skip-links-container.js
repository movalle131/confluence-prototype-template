/* skip-links-container.tsx generated by @compiled/babel-plugin v0.36.1 */
// eslint-disable-next-line @atlaskit/design-system/no-emotion-primitives -- to be migrated to @atlaskit/primitives/compiled â€“ go/akcss
"use strict";

var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SkipLinksContainer = void 0;
require("./skip-links-container.compiled.css");
var React = _interopRequireWildcard(require("react"));
var _runtime = require("@compiled/react/runtime");
var _primitives = require("@atlaskit/primitives");
var _skipLinksDataContext = require("../../context/skip-links/skip-links-data-context");
var _skipLink = require("./skip-link");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != _typeof(e) && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
var styles = {
  root: "_zulp1b66 _2rkoglpi _1rjcutpp _18zrutpp _1e0c1txw _2lx21bp4 _kqsw1n9t _1e02v47k _152tv47k _bfhk1bhr _16qs1cd0 _1pby1mrw _tzy4idpf _lcxvglyw _1digjh3g _1mygkb7n _18eu1wug",
  skipLinkList: "_zulp1b66 _1e0c1txw _2lx21bp4 _1x8w11lx _2mzuglyw _1pfhze3t _bozgze3t"
};

/**
 * Keydown handler to hide the skip links when escape is pressed.
 *
 * TODO: consider removing this, it doesn't make a lot of sense.
 * The skip links look like a popup but in reality they aren't.
 * Even though we hide them if you press TAB it will reopen the list and move to the next one...
 */
var closeOnEscape = function closeOnEscape(event) {
  if (event.key !== 'Escape') {
    return;
  }
  var activeElement = document.activeElement;
  if (activeElement instanceof HTMLElement) {
    activeElement.blur();
  }
};
var isOnlyWhitespaceRegex = /^\s*$/;

/**
 * A container element for the skip links
 * The default label will be used when the `skipLinksLabel` attribute is not
 * provided or the attribute is an empty string. If a string comprised only of
 * spaces is provided, the skip link heading element will be removed, but the
 * default label will still be used in `title` attribute of the skip links
 * themselves.
 */
var SkipLinksContainer = exports.SkipLinksContainer = function SkipLinksContainer(_ref) {
  var label = _ref.label,
    testId = _ref.testId;
  var sortedSkipLinks = (0, _skipLinksDataContext.useSortedSkipLinks)();
  if (sortedSkipLinks.length === 0) {
    return null;
  }
  var isEmptyLabel = isOnlyWhitespaceRegex.test(label);
  return /*#__PURE__*/React.createElement("div", {
    onKeyDown: closeOnEscape,
    "data-testid": testId ? "".concat(testId, "--skip-links-container") : undefined,
    className: (0, _runtime.ax)([styles.root])
  }, !isEmptyLabel && /*#__PURE__*/React.createElement(_primitives.Text, {
    weight: "bold",
    testId: testId ? "".concat(testId, "--skip-links-container--label") : undefined
  }, label), /*#__PURE__*/React.createElement("ol", {
    className: (0, _runtime.ax)([styles.skipLinkList])
  }, sortedSkipLinks.map(function (_ref2) {
    var id = _ref2.id,
      label = _ref2.label,
      onBeforeNavigate = _ref2.onBeforeNavigate;
    return /*#__PURE__*/React.createElement(_skipLink.SkipLink, {
      key: id,
      id: id,
      onBeforeNavigate: onBeforeNavigate
    }, label);
  })));
};