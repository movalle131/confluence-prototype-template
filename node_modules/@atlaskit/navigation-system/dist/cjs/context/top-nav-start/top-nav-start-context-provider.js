"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TopNavStartProvider = void 0;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = _interopRequireWildcard(require("react"));
var _topNavStartContext = require("./top-nav-start-context");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != _typeof(e) && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
/**
 * Provider for the TopNavStart container element contexts.
 *
 * We are using a [ref callback](https://react.dev/reference/react-dom/components/common#ref-callback) along with a state
 * for storing the element once it has mounted, so that the side nav can bind event listeners to the element
 * once it is mounted.
 *
 * Otherwise, the side nav can be mounted before the element (e.g. if the element is lazy loaded), which would prevent the
 * event listeners from being set up.
 *
 * State is required as opposed to just a ref so that the effects in the side nav can react to the element actually being mounted,
 * as ref values cannot be added as effect dependencies.
 */
var TopNavStartProvider = exports.TopNavStartProvider = function TopNavStartProvider(_ref) {
  var children = _ref.children;
  var _useState = (0, _react.useState)(null),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    element = _useState2[0],
    setElement = _useState2[1];
  return /*#__PURE__*/_react.default.createElement(_topNavStartContext.TopNavStartElement.Provider, {
    value: element
  }, /*#__PURE__*/_react.default.createElement(_topNavStartContext.TopNavStartAttachRef.Provider, {
    value: setElement
  }, children));
};