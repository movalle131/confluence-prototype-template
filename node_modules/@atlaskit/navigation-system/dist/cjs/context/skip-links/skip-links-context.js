"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useSkipLinkInternal = exports.useSkipLink = exports.SkipLinksContext = void 0;
var _react = require("react");
var _noop = _interopRequireDefault(require("@atlaskit/ds-lib/noop"));
/**
 * Provides a way to register and unregister skip links
 */
var SkipLinksContext = exports.SkipLinksContext = /*#__PURE__*/(0, _react.createContext)({
  registerSkipLink: _noop.default,
  unregisterSkipLink: _noop.default
});
var useSkipLinks = function useSkipLinks() {
  return (0, _react.useContext)(SkipLinksContext);
};

/**
 * Internal-only hook for registering skip links.
 *
 * `useSkipLink` is the public API wrapper of this.
 *
 * This private version exists for us to support `onBeforeNavigate` for the side nav use case,
 * where we might need to expand it before moving focus, without having to support `onBeforeNavigate` publicly.
 */
var useSkipLinkInternal = exports.useSkipLinkInternal = function useSkipLinkInternal(_ref) {
  var id = _ref.id,
    label = _ref.label,
    listIndex = _ref.listIndex,
    onBeforeNavigate = _ref.onBeforeNavigate,
    isHidden = _ref.isHidden;
  var _useSkipLinks = useSkipLinks(),
    registerSkipLink = _useSkipLinks.registerSkipLink,
    unregisterSkipLink = _useSkipLinks.unregisterSkipLink;
  (0, _react.useEffect)(function () {
    if (isHidden) {
      /**
       * Skip links are hidden for slots with 0 height or width.
       * They should not be registered.
       */
      return;
    }
    registerSkipLink({
      id: id,
      label: label,
      listIndex: listIndex,
      onBeforeNavigate: onBeforeNavigate,
      isHidden: isHidden
    });
    return function () {
      unregisterSkipLink(id);
    };
  }, [id, isHidden, label, listIndex, onBeforeNavigate, registerSkipLink, unregisterSkipLink]);
};

/**
 * Call `useSkipLink` to register a skip link for important elements on the page.
 */
var useSkipLink = exports.useSkipLink = function useSkipLink(id, label, listIndex) {
  useSkipLinkInternal({
    id: id,
    label: label,
    listIndex: listIndex
  });
};