/* logo-renderer.tsx generated by @compiled/babel-plugin v0.36.1 */
"use strict";

var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.LogoRenderer = LogoRenderer;
exports.themedLogoText = exports.themedLogoIcon = void 0;
var _runtime = require("@compiled/react/runtime");
var _react = _interopRequireWildcard(require("react"));
var _platformFeatureFlags = require("@atlaskit/platform-feature-flags");
var _hasCustomThemeContext = require("../themed/has-custom-theme-context");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != _typeof(e) && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
var themedLogoIcon = exports.themedLogoIcon = '--ds-top-bar-logo-icon';
var themedLogoText = exports.themedLogoText = '--ds-top-bar-logo-text';
function LogoRenderer(_ref) {
  var logoOrIcon = _ref.logoOrIcon,
    shouldUseNewLogoDesign = _ref.shouldUseNewLogoDesign;
  return (0, _platformFeatureFlags.fg)('jiv-20710-fix-nav-rerender') ? /*#__PURE__*/_react.default.createElement(LogoRendererMemo, {
    logoOrIcon: logoOrIcon,
    shouldUseNewLogoDesign: shouldUseNewLogoDesign
  }) : /*#__PURE__*/_react.default.createElement(LogoRendererNoMemo, {
    logoOrIcon: logoOrIcon,
    shouldUseNewLogoDesign: shouldUseNewLogoDesign
  });
}
var LogoRendererMemo = /*#__PURE__*/(0, _react.memo)(LogoRendererNoMemo);
function LogoRendererNoMemo(_ref2) {
  var LogoOrIcon = _ref2.logoOrIcon,
    shouldUseNewLogoDesign = _ref2.shouldUseNewLogoDesign;
  var hasCustomTheme = (0, _hasCustomThemeContext.useHasCustomTheme)();
  if (hasCustomTheme) {
    return /*#__PURE__*/_react.default.createElement(LogoOrIcon, {
      label: "",
      size: "small",
      shouldUseNewLogoDesign: shouldUseNewLogoDesign,
      iconColor: "var(".concat(themedLogoIcon, ")"),
      textColor: "var(".concat(themedLogoText, ")")
    });
  }
  return /*#__PURE__*/_react.default.createElement(LogoOrIcon, {
    size: "small",
    shouldUseNewLogoDesign: shouldUseNewLogoDesign,
    label: "",
    appearance: "brand"
  });
}