"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useSetIsExpanded = exports.useOnExpansionToggle = exports.useLevel = exports.useIsExpanded = exports.useAreAllAncestorsExpanded = exports.SetIsExpandedContext = exports.OnExpansionToggleContext = exports.LevelContext = exports.IsExpandedContext = exports.AreAllAncestorsExpandedContext = void 0;
var _react = require("react");
var _tinyInvariant = _interopRequireDefault(require("tiny-invariant"));
var _expandableMenuItemLevelContext = require("./expandable-menu-item-level-context");
/**
 * Whether all ancestor menu items of the current menu item are expanded. Used to know if the current menu item is
 * shown within the menu item tree.
 */
var AreAllAncestorsExpandedContext = exports.AreAllAncestorsExpandedContext = /*#__PURE__*/(0, _react.createContext)(null);

/**
 * A context for storing the isExpanded value of the ExpandableMenuItem.
 */
var IsExpandedContext = exports.IsExpandedContext = /*#__PURE__*/(0, _react.createContext)(null);

/**
 * A context for storing a function that sets isExpanded value of the ExpandableMenuItem.
 */
var SetIsExpandedContext = exports.SetIsExpandedContext = /*#__PURE__*/(0, _react.createContext)(null);

/**
 * A context for storing a function that triggers when isExpanded value of the ExpandableMenuItem is changed.
 */
var OnExpansionToggleContext = exports.OnExpansionToggleContext = /*#__PURE__*/(0, _react.createContext)(null);

/**
 * A context for storing the level value of the ExpandableMenuItem.
 */
var LevelContext = exports.LevelContext = _expandableMenuItemLevelContext.ExpandableMenuItemLevelContext;
var useIsExpanded = exports.useIsExpanded = function useIsExpanded() {
  var context = (0, _react.useContext)(IsExpandedContext);
  (0, _tinyInvariant.default)(context !== null, 'useIsExpanded must be used within an ExpandableMenuItem');
  return context;
};
var useSetIsExpanded = exports.useSetIsExpanded = function useSetIsExpanded() {
  var context = (0, _react.useContext)(SetIsExpandedContext);
  (0, _tinyInvariant.default)(context !== null, 'useSetIsExpanded must be used within an ExpandableMenuItem');
  return context;
};
var useOnExpansionToggle = exports.useOnExpansionToggle = function useOnExpansionToggle() {
  return (0, _react.useContext)(OnExpansionToggleContext);
};
var useLevel = exports.useLevel = function useLevel() {
  return (0, _react.useContext)(LevelContext);
};

/**
 * Whether all ancestor menu items of the current menu item are expanded. Used to know if the current menu item is
 * shown within the menu item tree.
 *
 * It works by combining (using &&) all the expansion states of the current menu item's ancestors.
 *
 * Using `true` as the fallback for cases when the menu item does not have ancestors.
 */
var useAreAllAncestorsExpanded = exports.useAreAllAncestorsExpanded = function useAreAllAncestorsExpanded() {
  var _useContext;
  return (_useContext = (0, _react.useContext)(AreAllAncestorsExpandedContext)) !== null && _useContext !== void 0 ? _useContext : true;
};