/* expandable-menu-item.tsx generated by @compiled/babel-plugin v0.36.1 */
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ExpandableMenuItem = void 0;
require("./expandable-menu-item.compiled.css");
var _react = _interopRequireWildcard(require("react"));
var React = _react;
var _runtime = require("@compiled/react/runtime");
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _useControlled3 = _interopRequireDefault(require("@atlaskit/ds-lib/use-controlled"));
var _menuListItem = require("../menu-list-item");
var _expandableMenuItemContext = require("./expandable-menu-item-context");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != _typeof(e) && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
var relativeStyles = {
  root: "_kqswh2mm"
};

/**
 * __ExpandableMenuItem__
 *
 * A composable component for nested menu items that can be revealed and hidden by interacting witih the parent menu item.
 *
 * Follows the [disclosure pattern](https://www.w3.org/WAI/ARIA/apg/patterns/disclosure/).
 *
 * Should be used with `ExpandableMenuItemTrigger` as the parent menu item, and children menu items should be wrapped in a `ExpandableMenuItemContent`.
 *
 * Usage example:
 * ```jsx
 * <ExpandableMenuItem>
 *   <ExpandableMenuItemTrigger>Parent menu item</ExpandableMenuItemTrigger>
 *   <ExpandableMenuItemContent>
 *     <ButtonMenuItem>Item 1</ButtonMenuItem>
 *     <ButtonMenuItem>Item 2</ButtonMenuItem>
 *   </ExpandableMenuItemContent>
 * </ExpandableMenuItem>
 * ```
 */
var ExpandableMenuItem = exports.ExpandableMenuItem = /*#__PURE__*/(0, _react.forwardRef)(function (_ref, forwardedRef) {
  var isExpandedControlled = _ref.isExpanded,
    _ref$isDefaultExpande = _ref.isDefaultExpanded,
    isDefaultExpanded = _ref$isDefaultExpande === void 0 ? false : _ref$isDefaultExpande,
    onExpansionToggle = _ref.onExpansionToggle,
    children = _ref.children,
    dropIndicator = _ref.dropIndicator;
  var _useControlled = (0, _useControlled3.default)(isExpandedControlled, function () {
      return isDefaultExpanded;
    }),
    _useControlled2 = (0, _slicedToArray2.default)(_useControlled, 2),
    isExpanded = _useControlled2[0],
    setIsExpanded = _useControlled2[1];
  return /*#__PURE__*/React.createElement(_expandableMenuItemContext.IsExpandedContext.Provider, {
    value: isExpanded
  }, /*#__PURE__*/React.createElement(_expandableMenuItemContext.SetIsExpandedContext.Provider, {
    value: setIsExpanded
  }, /*#__PURE__*/React.createElement(_expandableMenuItemContext.OnExpansionToggleContext.Provider, {
    value: onExpansionToggle !== null && onExpansionToggle !== void 0 ? onExpansionToggle : null
  }, /*#__PURE__*/React.createElement(_menuListItem.MenuListItem, {
    ref: forwardedRef
  }, /*#__PURE__*/React.createElement("div", {
    className: (0, _runtime.ax)([dropIndicator && relativeStyles.root])
  }, children, dropIndicator)))));
});