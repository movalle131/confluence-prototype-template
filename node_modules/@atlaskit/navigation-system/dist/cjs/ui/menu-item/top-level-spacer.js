/* top-level-spacer.tsx generated by @compiled/babel-plugin v0.36.1 */
"use strict";

var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TopLevelSpacer = TopLevelSpacer;
require("./top-level-spacer.compiled.css");
var _react = _interopRequireWildcard(require("react"));
var React = _react;
var _runtime = require("@compiled/react/runtime");
var _expandableMenuItemContext = require("./expandable-menu-item/expandable-menu-item-context");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != _typeof(e) && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
var styles = {
  root: "_4t3iutpp"
};

/**
 * Use this component to create visual separation between the:
 *
 * - global app shortcut section
 * - 'more' button menu item
 * - starred spaces (in Confluence)
 *
 * Only use this component in the top level of the menu,
 * and exercise caution when using it in new situations.
 *
 * This component exists to fulfil product design requirements but has not yet
 * been consolidated into the wider navigation system.
 *
 * It may not exist in the future when global apps are no longer in the side navigation.
 */
function TopLevelSpacer() {
  var level = (0, _expandableMenuItemContext.useLevel)();
  (0, _react.useEffect)(function () {
    if (process.env.NODE_ENV !== 'production') {
      if (level !== 0) {
        throw new Error('TopLevelSpacer should only be used in the top level of the menu. Please speak with DST if you have a novel use case.');
      }
    }
  }, [level]);
  return /*#__PURE__*/React.createElement("div", {
    className: (0, _runtime.ax)([styles.root])
  });
}