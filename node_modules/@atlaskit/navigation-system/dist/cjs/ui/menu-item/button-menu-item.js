"use strict";

var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ButtonMenuItem = void 0;
var _react = _interopRequireWildcard(require("react"));
var _menuItem = require("./menu-item");
var _menuListItem = require("./menu-list-item");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != _typeof(e) && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
/**
 * We intentionally do not support the `isSelected` prop (which other menu item components
 * support) because `ButtonMenuItem`s do not correspond to a "page", so can't be navigated
 *  to and become in a selected state.
 */

/**
 * __ButtonMenuItem__
 *
 * A menu item button. It should be used within a `ul`, as it renders a list item.
 */
var ButtonMenuItem = exports.ButtonMenuItem = /*#__PURE__*/(0, _react.forwardRef)(function (_ref, forwardedRef) {
  var testId = _ref.testId,
    actions = _ref.actions,
    children = _ref.children,
    description = _ref.description,
    elemAfter = _ref.elemAfter,
    isDisabled = _ref.isDisabled,
    elemBefore = _ref.elemBefore,
    actionsOnHover = _ref.actionsOnHover,
    onClick = _ref.onClick,
    interactionName = _ref.interactionName,
    isContentTooltipDisabled = _ref.isContentTooltipDisabled,
    visualContentRef = _ref.visualContentRef,
    listItemRef = _ref.listItemRef,
    isDragging = _ref.isDragging,
    hasDragIndicator = _ref.hasDragIndicator,
    dropIndicator = _ref.dropIndicator;
  return /*#__PURE__*/_react.default.createElement(_menuListItem.MenuListItem, {
    ref: listItemRef
  }, /*#__PURE__*/_react.default.createElement(_menuItem.MenuItemBase, {
    testId: testId,
    description: description,
    elemAfter: elemAfter,
    elemBefore: elemBefore,
    isDisabled: isDisabled
    /**
     * Not passing `actions` and `actionsOnHover` to MenuItemBase when `isDisabled`,
     * so they aren't rendered in the disabled state.
     */,
    actions: isDisabled ? undefined : actions,
    actionsOnHover: isDisabled ? undefined : actionsOnHover,
    onClick: onClick,
    ref: forwardedRef,
    visualContentRef: visualContentRef,
    interactionName: interactionName,
    isContentTooltipDisabled: isContentTooltipDisabled,
    isDragging: isDragging,
    hasDragIndicator: hasDragIndicator,
    dropIndicator: dropIndicator
  }, children));
});