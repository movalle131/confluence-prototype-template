/* link-menu-item.tsx generated by @compiled/babel-plugin v0.36.1 */
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.LinkMenuItem = void 0;
require("./link-menu-item.compiled.css");
var _react = _interopRequireWildcard(require("react"));
var React = _react;
var _runtime = require("@compiled/react/runtime");
var _mergeRefs = _interopRequireDefault(require("@atlaskit/ds-lib/merge-refs"));
var _forwardRefWithGeneric = require("../../components/forward-ref-with-generic");
var _listItem = require("../../components/list-item");
var _menuItem = require("./menu-item");
var _useScrollMenuItemIntoView = require("./use-scroll-menu-item-into-view");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != _typeof(e) && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
var listItemStyles = {
  root: "_10m98stt"
};
var LinkMenuItemNoRef = function LinkMenuItemNoRef(_ref, forwardedRef) {
  var testId = _ref.testId,
    actions = _ref.actions,
    children = _ref.children,
    description = _ref.description,
    elemAfter = _ref.elemAfter,
    elemBefore = _ref.elemBefore,
    href = _ref.href,
    target = _ref.target,
    actionsOnHover = _ref.actionsOnHover,
    isSelected = _ref.isSelected,
    onClick = _ref.onClick,
    interactionName = _ref.interactionName,
    isContentTooltipDisabled = _ref.isContentTooltipDisabled,
    visualContentRef = _ref.visualContentRef,
    listItemRef = _ref.listItemRef,
    isDragging = _ref.isDragging,
    hasDragIndicator = _ref.hasDragIndicator,
    dropIndicator = _ref.dropIndicator;
  var itemRef = (0, _react.useRef)(null);
  (0, _useScrollMenuItemIntoView.useScrollMenuItemIntoView)({
    elementRef: itemRef,
    isSelected: isSelected !== null && isSelected !== void 0 ? isSelected : false
  });
  var ref = (0, _react.useMemo)(function () {
    return (0, _mergeRefs.default)([itemRef, listItemRef !== null && listItemRef !== void 0 ? listItemRef : null]);
  }, [itemRef, listItemRef]);
  return /*#__PURE__*/React.createElement(_listItem.ListItem, {
    ref: ref,
    xcss: listItemStyles.root
  }, /*#__PURE__*/React.createElement(_menuItem.MenuItemBase, {
    testId: testId,
    description: description,
    actions: actions,
    elemAfter: elemAfter
    // TODO Always use "open in new window" icon when `openInNewWindow` prop is true
    ,
    elemBefore: elemBefore,
    href: href,
    target: target,
    actionsOnHover: actionsOnHover,
    isSelected: isSelected,
    onClick: onClick,
    ref: forwardedRef,
    visualContentRef: visualContentRef,
    interactionName: interactionName,
    isContentTooltipDisabled: isContentTooltipDisabled,
    isDragging: isDragging,
    hasDragIndicator: hasDragIndicator,
    dropIndicator: dropIndicator
  }, children));
};

/**
 * LinkMenuItem
 *
 * A menu item link. It should be used within a `ul`.
 */
var LinkMenuItem = exports.LinkMenuItem = (0, _forwardRefWithGeneric.forwardRefWithGeneric)(LinkMenuItemNoRef);