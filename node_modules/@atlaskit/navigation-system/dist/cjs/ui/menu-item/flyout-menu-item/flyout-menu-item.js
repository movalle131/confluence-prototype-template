"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FlyoutMenuItem = void 0;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = _interopRequireWildcard(require("react"));
var _useControlled3 = _interopRequireDefault(require("@atlaskit/ds-lib/use-controlled"));
var _usePreviousValue = _interopRequireDefault(require("@atlaskit/ds-lib/use-previous-value"));
var _experimental = require("@atlaskit/popup/experimental");
var _menuListItem = require("../menu-list-item");
var _flyoutMenuItemContext = require("./flyout-menu-item-context");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != _typeof(e) && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
/**
 * __FlyoutMenuItem__
 *
 * Displays content in a flyout menu, triggered by a button.
 *
 * The top-level component that contains the trigger and content of a flyout menu.
 *
 * Usage example:
 * ```tsx
 * <FlyoutMenuItem>
 *   <FlyoutMenuItemTrigger>Trigger</FlyoutMenuItemTrigger>
 *   <FlyoutMenuItemContent>
 *     <MenuList>
 *       <ButtonMenuItem>Item 1</ButtonMenuItem>
 *       <ButtonMenuItem>Item 2</ButtonMenuItem>
 *     </MenuList>
 *   </FlyoutMenuItemContent>
 * </FlyoutMenuItem>
 * ```
 */
var FlyoutMenuItem = exports.FlyoutMenuItem = /*#__PURE__*/(0, _react.forwardRef)(function (_ref, forwardedRef) {
  var children = _ref.children,
    id = _ref.id,
    isOpenControlled = _ref.isOpen,
    _ref$isDefaultOpen = _ref.isDefaultOpen,
    isDefaultOpen = _ref$isDefaultOpen === void 0 ? false : _ref$isDefaultOpen,
    onOpenChange = _ref.onOpenChange;
  var _useControlled = (0, _useControlled3.default)(isOpenControlled, function () {
      return isDefaultOpen;
    }),
    _useControlled2 = (0, _slicedToArray2.default)(_useControlled, 2),
    isOpen = _useControlled2[0],
    setIsOpen = _useControlled2[1];
  var previousIsOpen = (0, _usePreviousValue.default)(isOpen);
  (0, _react.useEffect)(function () {
    if (previousIsOpen === undefined || previousIsOpen === isOpen) {
      /**
       * The previous value is `undefined` on initialization, so if it is `undefined` then the value hasn't changed.
       *
       * The previous value can be equal to the current one if the component re-renders due to something else changing.
       *
       * In both cases the value hasn't changed and we don't want to notify consumers.
       */
      return;
    }
    onOpenChange === null || onOpenChange === void 0 || onOpenChange(isOpen);
  }, [isOpen, onOpenChange, previousIsOpen]);
  return /*#__PURE__*/_react.default.createElement(_flyoutMenuItemContext.IsOpenContext.Provider, {
    value: isOpen
  }, /*#__PURE__*/_react.default.createElement(_flyoutMenuItemContext.SetIsOpenContext.Provider, {
    value: setIsOpen
  }, /*#__PURE__*/_react.default.createElement(_menuListItem.MenuListItem, {
    ref: forwardedRef
  }, /*#__PURE__*/_react.default.createElement(_experimental.Popup, {
    id: id,
    isOpen: isOpen
  }, children))));
});