/* use-menu-item-drag-and-drop.tsx generated by @compiled/babel-plugin v0.36.1 */
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useMenuItemDragAndDrop = useMenuItemDragAndDrop;
var _react = _interopRequireWildcard(require("react"));
var React = _react;
var _runtime = require("@compiled/react/runtime");
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _reactDom = require("react-dom");
var _tinyInvariant = _interopRequireDefault(require("tiny-invariant"));
var _adapter = require("@atlaskit/pragmatic-drag-and-drop/element/adapter");
var _pointerOutsideOfPreview = require("@atlaskit/pragmatic-drag-and-drop/element/pointer-outside-of-preview");
var _setCustomNativeDragPreview = require("@atlaskit/pragmatic-drag-and-drop/element/set-custom-native-drag-preview");
var _dragPreview = require("./drag-preview");
var _dropIndicator = require("./drop-indicator");
var _hitbox = require("./hitbox");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != _typeof(e) && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var idle = {
  type: 'idle'
};
/**
 * A convenience helper for setting up drag and drop for menu items
 *
 * - Don't include the `draggable` property if you don't want the menu item to be a draggable
 * - Don't include the `dropTarget` property if you don't want the menu item to be a drop target
 */
function useMenuItemDragAndDrop(_ref) {
  var draggableArgs = _ref.draggable,
    dropTargetArgs = _ref.dropTarget;
  var draggableAnchorRef = (0, _react.useRef)(null);
  var draggableButtonRef = (0, _react.useRef)(null);
  var dropTargetRef = (0, _react.useRef)(null);
  var _useState = (0, _react.useState)(idle),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    internalState = _useState2[0],
    setInternalState = _useState2[1];
  var getDraggableElement = (0, _react.useCallback)(function () {
    var _ref2, _draggableAnchorRef$c;
    return (_ref2 = (_draggableAnchorRef$c = draggableAnchorRef.current) !== null && _draggableAnchorRef$c !== void 0 ? _draggableAnchorRef$c : draggableButtonRef.current) !== null && _ref2 !== void 0 ? _ref2 : null;
  }, []);

  // Set up draggable
  (0, _react.useEffect)(function () {
    // Don't set up a draggable if there are no draggable args
    if (!draggableArgs) {
      return;
    }
    var element = getDraggableElement();
    (0, _tinyInvariant.default)(element, "draggableAnchorRef or draggableButtonRef not set");
    return (0, _adapter.draggable)({
      element: element,
      getInitialData: draggableArgs.getInitialData,
      canDrag: draggableArgs.canDrag,
      onGenerateDragPreview: function onGenerateDragPreview(_ref3) {
        var nativeSetDragImage = _ref3.nativeSetDragImage,
          source = _ref3.source,
          location = _ref3.location;
        (0, _setCustomNativeDragPreview.setCustomNativeDragPreview)({
          nativeSetDragImage: nativeSetDragImage,
          getOffset: (0, _pointerOutsideOfPreview.pointerOutsideOfPreview)({
            x: "var(--ds-space-200, 16px)",
            y: "var(--ds-space-100, 8px)"
          }),
          render: function render(_ref4) {
            var container = _ref4.container;
            var args = {
              dragHandle: source.dragHandle,
              element: source.element,
              input: location.current.input
            };
            setInternalState({
              type: 'preview',
              container: container,
              ui: draggableArgs.getDragPreviewPieces(args)
            });
          }
        });
      },
      onDragStart: function onDragStart() {
        setInternalState({
          type: 'dragging'
        });
      },
      onDrop: function onDrop() {
        setInternalState(idle);
      }
    });
  }, [draggableArgs, getDraggableElement]);

  // Set up drop target
  (0, _react.useEffect)(function () {
    if (!dropTargetArgs) {
      return;
    }

    // Don't need to provide a draggable element to have a drop target.
    // Using this element in our `canDrop` check
    var draggableElement = getDraggableElement();
    var dropTarget = dropTargetRef.current;
    (0, _tinyInvariant.default)(dropTarget, "dropTargetRef was not set");
    return (0, _adapter.dropTargetForElements)({
      element: dropTarget,
      // cannot drop on self
      canDrop: function canDrop(args) {
        // cannot drop on self
        if (args.source.element === draggableElement) {
          return false;
        }
        if (dropTargetArgs.canDrop) {
          return dropTargetArgs.canDrop(args);
        }
        return true;
      },
      // menu items are always sticky, and the GroupDropIndicator should clear stickiness
      getIsSticky: function getIsSticky() {
        return true;
      },
      getData: function getData(args) {
        var _dropTargetArgs$getDa, _dropTargetArgs$getDa2;
        var data = (_dropTargetArgs$getDa = (_dropTargetArgs$getDa2 = dropTargetArgs.getData) === null || _dropTargetArgs$getDa2 === void 0 ? void 0 : _dropTargetArgs$getDa2.call(dropTargetArgs, args)) !== null && _dropTargetArgs$getDa !== void 0 ? _dropTargetArgs$getDa : {};
        var operations = dropTargetArgs.getOperations(args);
        return (0, _hitbox.attachInstruction)(data, {
          input: args.input,
          element: args.element,
          operations: operations
        });
      },
      onDragStart: function onDragStart(_ref5) {
        var self = _ref5.self;
        var instruction = (0, _hitbox.extractInstruction)(self.data);
        setInternalState({
          type: 'is-over',
          instruction: instruction
        });
      },
      onDrag: function onDrag(_ref6) {
        var self = _ref6.self;
        var instruction = (0, _hitbox.extractInstruction)(self.data);
        setInternalState(function (current) {
          var _current$instruction, _current$instruction2;
          if (current.type === 'is-over' && (instruction === null || instruction === void 0 ? void 0 : instruction.operation) === ((_current$instruction = current.instruction) === null || _current$instruction === void 0 ? void 0 : _current$instruction.operation) && (instruction === null || instruction === void 0 ? void 0 : instruction.blocked) === ((_current$instruction2 = current.instruction) === null || _current$instruction2 === void 0 ? void 0 : _current$instruction2.blocked)) {
            return current;
          }
          return {
            type: 'is-over',
            instruction: instruction
          };
        });
      },
      onDragLeave: function onDragLeave() {
        setInternalState(idle);
      },
      onDrop: function onDrop() {
        setInternalState(idle);
      },
      onDragEnter: function onDragEnter(_ref7) {
        var self = _ref7.self;
        var instruction = (0, _hitbox.extractInstruction)(self.data);
        setInternalState({
          type: 'is-over',
          instruction: instruction
        });
      }
    });
  }, [dropTargetArgs, getDraggableElement]);
  var dragPreview = function () {
    if (internalState.type !== 'preview') {
      return null;
    }
    return /*#__PURE__*/(0, _reactDom.createPortal)( /*#__PURE__*/React.createElement(_dragPreview.DragPreview, {
      elemBefore: internalState.ui.elemBefore
    }, internalState.ui.content), internalState.container);
  }();
  var dropIndicator = internalState.type === 'is-over' && internalState.instruction && /*#__PURE__*/React.createElement(_dropIndicator.DropIndicator, {
    instruction: internalState.instruction
  });
  var state = (0, _react.useMemo)(function () {
    if (internalState.type === 'preview') {
      return {
        type: 'preview'
      };
    }
    // returning a new object to avoid modification of our `internalState` object
    return _objectSpread({}, internalState);
  }, [internalState]);
  return {
    state: state,
    draggableButtonRef: draggableButtonRef,
    dropTargetRef: dropTargetRef,
    draggableAnchorRef: draggableAnchorRef,
    dragPreview: dragPreview,
    dropIndicator: dropIndicator
  };
}