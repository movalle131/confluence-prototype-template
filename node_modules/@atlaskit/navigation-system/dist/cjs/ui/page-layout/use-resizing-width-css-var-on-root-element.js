"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useResizingWidthCssVarOnRootElement = useResizingWidthCssVarOnRootElement;
var _react = require("react");
var _combine = require("@atlaskit/pragmatic-drag-and-drop/combine");
var _adapter = require("@atlaskit/pragmatic-drag-and-drop/element/adapter");
var _panelSplitter = require("./panel-splitter/panel-splitter");
/**
 * Monitors resizing on the panel splitter with the provided `panelId`
 * and writes the resizing width to the `cssVar` on the root element (`<html>`).
 */
function useResizingWidthCssVarOnRootElement(_ref) {
  var _ref$isEnabled = _ref.isEnabled,
    isEnabled = _ref$isEnabled === void 0 ? true : _ref$isEnabled,
    cssVar = _ref.cssVar,
    panelId = _ref.panelId;
  (0, _react.useEffect)(function () {
    if (!isEnabled) {
      return;
    }
    return (0, _combine.combine)((0, _adapter.monitorForElements)({
      canMonitor: function canMonitor(_ref2) {
        var source = _ref2.source;
        return source.data.panelId === panelId;
      },
      onDrag: function onDrag(_ref3) {
        var source = _ref3.source;
        if (!(0, _panelSplitter.isPanelSplitterDragData)(source.data)) {
          return;
        }

        /**
         * Copies the resizing width value to the `<html>` element.
         *
         * Required to reflect the live width of the side navigation.
         *
         * Used by:
         *   - Legacy `--leftSidebarWidth` variable
         *   - Panel slot max-width constraint
         *
         * When the legacy `--leftSidebarWidth` variable is no longer needed,
         * we could consider writing to the `Panel` element instead.
         */
        document.documentElement.style.setProperty(cssVar, source.data.resizingWidth);
      },
      onDrop: function onDrop() {
        document.documentElement.style.removeProperty(cssVar);
      }
    }));
  }, [cssVar, isEnabled, panelId]);
  (0, _react.useEffect)(function () {
    if (!isEnabled) {
      return;
    }

    /**
     * Ensures that the resizing CSS var on the `<html>` element is cleaned up properly
     * if the component unmounts during a drag.
     */
    return function cleanupGlobalResizingCssVar() {
      document.documentElement.style.removeProperty(cssVar);
    };
  }, [cssVar, isEnabled]);
}