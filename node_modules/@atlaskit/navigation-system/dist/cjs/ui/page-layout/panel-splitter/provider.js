"use strict";

var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PanelSplitterProvider = void 0;
var _react = _interopRequireWildcard(require("react"));
var _context = require("./context");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != _typeof(e) && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
/**
 * Provides the context required for the panel splitter to work within a page layout slot.
 *
 * Should be used in the layout area components, e.g. SideNav, Aside etc, as opposed to products.
 */
var PanelSplitterProvider = exports.PanelSplitterProvider = function PanelSplitterProvider(_ref) {
  var panelId = _ref.panelId,
    panelWidth = _ref.panelWidth,
    onCompleteResize = _ref.onCompleteResize,
    getResizeBounds = _ref.getResizeBounds,
    resizingCssVar = _ref.resizingCssVar,
    panelRef = _ref.panelRef,
    _ref$position = _ref.position,
    position = _ref$position === void 0 ? 'end' : _ref$position,
    _ref$isEnabled = _ref.isEnabled,
    isEnabled = _ref$isEnabled === void 0 ? true : _ref$isEnabled,
    children = _ref.children;
  var portalRef = (0, _react.useRef)(null);
  var context = (0, _react.useMemo)(function () {
    return {
      panelId: panelId,
      panelWidth: panelWidth,
      onCompleteResize: onCompleteResize,
      getResizeBounds: getResizeBounds,
      resizingCssVar: resizingCssVar,
      position: position,
      panelRef: panelRef,
      isEnabled: isEnabled,
      portalRef: portalRef
    };
  }, [panelId, panelWidth, onCompleteResize, getResizeBounds, resizingCssVar, position, portalRef, panelRef, isEnabled]);
  return /*#__PURE__*/_react.default.createElement(_react.Fragment, null, /*#__PURE__*/_react.default.createElement(_context.PanelSplitterContext.Provider, {
    value: context
  }, children), /*#__PURE__*/_react.default.createElement("div", {
    ref: portalRef
  }));
};