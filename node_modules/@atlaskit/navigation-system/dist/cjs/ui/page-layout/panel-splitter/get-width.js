"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getWidthFromDragLocation = exports.getPixelWidth = void 0;
var getWidthFromDragLocation = exports.getWidthFromDragLocation = function getWidthFromDragLocation(_ref) {
  var initialWidth = _ref.initialWidth,
    location = _ref.location,
    direction = _ref.direction,
    position = _ref.position;
  var diffX = location.current.input.clientX - location.initial.input.clientX;
  // Resize line is positioned at the inline-end (right) of the element.
  // If the direction is left-to-right, the width will increase when the mouse is moved to the right, and vice versa.
  if (position === 'end') {
    return direction === 'ltr' ? initialWidth + diffX : initialWidth - diffX;
  }

  // Resize line is positioned at the inline-start (left) of the element.
  // If the direction is left-to-right, the width will decrease when the mouse is moved to the right, and vice versa.
  return direction === 'ltr' ? initialWidth - diffX : initialWidth + diffX;
};

/**
 * Returns the computed width of an element in pixels.
 */
var getPixelWidth = exports.getPixelWidth = function getPixelWidth(element) {
  var _window$getComputedSt = window.getComputedStyle(element),
    width = _window$getComputedSt.width;
  return parseInt(width);
};