/* panel.tsx generated by @compiled/babel-plugin v0.36.1 */
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Panel = Panel;
require("./panel.compiled.css");
var _react = _interopRequireWildcard(require("react"));
var React = _react;
var _runtime = require("@compiled/react/runtime");
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _platformFeatureFlags = require("@atlaskit/platform-feature-flags");
var _responsive = require("@atlaskit/primitives/responsive");
var _skipLinksContext = require("../../context/skip-links/skip-links-context");
var _constants = require("./constants");
var _hoistSlotSizesContext = require("./hoist-slot-sizes-context");
var _hoistUtils = require("./hoist-utils");
var _idUtils = require("./id-utils");
var _provider = require("./panel-splitter/provider");
var _elementContext = require("./side-nav/element-context");
var _useResizingWidthCssVarOnRootElement = require("./use-resizing-width-css-var-on-root-element");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != _typeof(e) && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
var panelSplitterResizingVar = '--n_pnlRsz';

/**
 * We typically use the `defaultWidth` as the minimum resizing width,
 * but for large default widths we fallback to a standard value.
 *
 * This standard value of `400px` is to align with the Global Preview Panels.
 */
var fallbackResizeMinWidth = 400;
var styles = {
  root: "_nd5l1b6c _10fph9n0 _vchhusvi _1pbykb7n _4t3ieqxy _kqsw1if8 _152timx3 _bfhk1bhr _14b54rrg _4ap3vuon _1dhy1c6w _9sns1wug",
  border: "_191wglyw _16qs1cd0 _1w6ezgxb _scbpglyw",
  scrollContainer: "_1reo1wug _18m91wug _4t3i1osq",
  hidden: "_1e0cglyw",
  oldMobileWidth: "_1bsb1adv",
  newMobileWidth: "_1bsb1dxx"
};

/**
 * The Panel layout area is rendered to the right (inline end) of the Main area, or the Aside area if it is present.
 *
 * On small viewports (below 64rem, or 1024px), the Panel slot will become an overlay.
 *
 * You can optionally render a `PanelSplitter` as a child to make the panel area resizable.
 */
function Panel(_ref) {
  var children = _ref.children,
    _ref$defaultWidth = _ref.defaultWidth,
    defaultWidth = _ref$defaultWidth === void 0 ? 365 : _ref$defaultWidth,
    _ref$label = _ref.label,
    label = _ref$label === void 0 ? 'Panel' : _ref$label,
    _ref$skipLinkLabel = _ref.skipLinkLabel,
    skipLinkLabel = _ref$skipLinkLabel === void 0 ? label : _ref$skipLinkLabel,
    testId = _ref.testId,
    providedId = _ref.id,
    xcss = _ref.xcss,
    _ref$hasBorder = _ref.hasBorder,
    hasBorder = _ref$hasBorder === void 0 ? (0, _platformFeatureFlags.fg)('platform_design_system_nav4_panel_default_border') : _ref$hasBorder;
  var dangerouslyHoistSlotSizes = (0, _react.useContext)(_hoistSlotSizesContext.DangerouslyHoistSlotSizes);
  var id = (0, _idUtils.useLayoutId)({
    providedId: providedId
  });
  /**
   * Don't show the skip link if the slot has 0 width.
   *
   * Remove `isHidden` usage after https://jplat.atlassian.net/browse/BLU-3951
   */
  (0, _skipLinksContext.useSkipLinkInternal)({
    id: id,
    label: skipLinkLabel,
    isHidden: defaultWidth === 0
  });
  var ref = (0, _react.useRef)(null);
  var _useState = (0, _react.useState)(defaultWidth),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    width = _useState2[0],
    setWidth = _useState2[1];
  // Used to track the previous value of the `defaultWidth` prop, for logging dev warnings when it changes.
  var defaultWidthRef = (0, _react.useRef)(defaultWidth);

  /**
   * TODO: Remove this useEffect once the `width: 0` usage is removed from Jira.
   * It updates the width state based on changes to `defaultWidth`, as a temporary stopgap to support Jira's current usage.
   * https://jplat.atlassian.net/browse/BLU-3951
   */
  (0, _react.useEffect)(function () {
    if (defaultWidthRef.current === defaultWidth) {
      return;
    }
    defaultWidthRef.current = defaultWidth;
    setWidth(defaultWidth);
    if (process.env.NODE_ENV !== 'production') {
      // eslint-disable-next-line no-console
      console.warn('Page Layout warning\n\n', 'The value of the `defaultWidth` prop on the `Panel` layout slot component has changed. This should not be changed after the component has been mounted.\n\n', 'In the future, changes to the `defaultWidth` prop will not be respected. It is only supported as a stopgap to enable migration from Nav3 to Nav4.\n\n');
    }
  }, [defaultWidth]);
  var sideNavRef = (0, _elementContext.useSideNavRef)();

  /**
   * The minimum width that the panel can be resized to by the user.
   *
   * We only use the `defaultWidth` up to a point to avoid huge panels.
   */
  var minWidth = Math.min(defaultWidth, fallbackResizeMinWidth);

  /**
   * Returns the bounds for resizing, evaluated lazily when needed.
   *
   * Defined separately to the slot bounds because the resizing bounds need to be resolvable to a pixel value,
   * and the panel's slot bounds use a complex CSS expression.
   */
  var getResizeBounds = (0, _react.useCallback)(function () {
    var _sideNavRef$current$o, _sideNavRef$current;
    var sideNavWidth = (_sideNavRef$current$o = (_sideNavRef$current = sideNavRef.current) === null || _sideNavRef$current === void 0 ? void 0 : _sideNavRef$current.offsetWidth) !== null && _sideNavRef$current$o !== void 0 ? _sideNavRef$current$o : 0;
    /**
     * The panel should not resize larger than the page content, equivalent to the `Main` + `Aside` slots.
     *
     * This maximum width is equivalent to half the viewport width, after removing the sidebar width.
     */
    var maxWidth = Math.round((window.innerWidth - sideNavWidth) / 2);
    return {
      min: "".concat(minWidth, "px"),
      max: "".concat(maxWidth, "px")
    };
  }, [minWidth, sideNavRef]);
  var panelWidthSlotBounds = {
    min: "".concat(minWidth, "px"),
    // `sideNavLiveWidthVar` is not defined if the `SideNav` is not mounted, so we fallback to `0px`.
    max: "round(nearest, calc((100vw - var(".concat(_constants.sideNavLiveWidthVar, ", 0px)) / 2), 1px)")
  };
  var panelVariableWidth = "clamp(".concat(panelWidthSlotBounds.min, ", ").concat(width, "px, ").concat(panelWidthSlotBounds.max, ")");
  (0, _useResizingWidthCssVarOnRootElement.useResizingWidthCssVarOnRootElement)({
    isEnabled: dangerouslyHoistSlotSizes,
    cssVar: panelSplitterResizingVar,
    panelId: _constants.panelPanelSplitterId
  });
  return /*#__PURE__*/React.createElement("section", {
    id: id,
    "data-layout-slot": true,
    "aria-label": label,
    className: (0, _runtime.ax)([styles.root, defaultWidth === 0 && styles.hidden, hasBorder && styles.border, (0, _platformFeatureFlags.fg)('platform_design_system_nav4_panel_mobile_width_fix') ? styles.newMobileWidth : styles.oldMobileWidth, xcss]),
    style: (0, _defineProperty2.default)((0, _defineProperty2.default)({}, _constants.panelVar, panelVariableWidth), '--minWidth', (0, _platformFeatureFlags.fg)('platform_design_system_nav4_panel_mobile_width_fix') ? "".concat(minWidth, "px") : undefined),
    "data-testid": testId,
    ref: ref
  }, dangerouslyHoistSlotSizes &&
  /*#__PURE__*/
  // ------ START UNSAFE STYLES ------
  // These styles are only needed for the UNSAFE legacy use case for Jira + Confluence.
  // When they aren't needed anymore we can delete them wholesale.
  React.createElement(_hoistUtils.DangerouslyHoistCssVarToDocumentRoot, {
    variableName: _constants.UNSAFE_panelLayoutVar,
    value: "0px",
    mediaQuery: _responsive.media.above.lg,
    responsiveValue: "var(".concat(panelSplitterResizingVar, ", ").concat(panelVariableWidth, ")")
  })
  // ------ END UNSAFE STYLES ------
  , /*#__PURE__*/React.createElement(_provider.PanelSplitterProvider, {
    panelId: _constants.panelPanelSplitterId,
    panelRef: ref,
    panelWidth: width,
    onCompleteResize: setWidth,
    getResizeBounds: getResizeBounds,
    resizingCssVar: panelSplitterResizingVar,
    position: "start"
  }, /*#__PURE__*/React.createElement("div", {
    className: (0, _runtime.ax)([styles.scrollContainer])
  }, children)));
}