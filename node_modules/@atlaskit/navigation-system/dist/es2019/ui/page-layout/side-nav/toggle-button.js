/* toggle-button.tsx generated by @compiled/babel-plugin v0.36.1 */
import "./toggle-button.compiled.css";
import { ax, ix } from "@compiled/react/runtime";
import React, { useCallback, useContext, useEffect, useRef, useState } from 'react';
import { bind } from 'bind-event-listener';
import SidebarCollapseIcon from '@atlaskit/icon/core/sidebar-collapse';
import SidebarExpandIcon from '@atlaskit/icon/core/sidebar-expand';
import { fg } from '@atlaskit/platform-feature-flags';
import { IconButton } from '../../top-nav-items/themed/migration';
import { SideNavToggleButtonAttachRef } from './toggle-button-context';
import { useSideNavVisibility } from './use-side-nav-visibility';
import { useToggleSideNav } from './use-toggle-side-nav';
const toggleButtonTooltipOptions = {
  // We're disabling pointer events on the tooltip to prevent it from blocking mouse events, so that the side nav flyout stays open
  // when moving the mouse from the top bar to the side nav.
  ignoreTooltipPointerEvents: true
};

// For duplicate "mouseenter" issue when changing icons (see below)
const silentIconStyles = null;

/**
 * __SideNavToggleButton__
 *
 * Button for toggling the side nav. It should be used in the top bar.
 */
export const SideNavToggleButton = ({
  defaultCollapsed = false,
  expandLabel,
  collapseLabel,
  testId,
  interactionName,
  onClick
}) => {
  const {
    isExpandedOnDesktop: isSideNavExpandedOnDesktop,
    isExpandedOnMobile: isSideNavExpandedOnMobile
  } = useSideNavVisibility({
    defaultCollapsed
  });
  const [isSideNavExpanded, setIsSideNavExpanded] = useState(!defaultCollapsed);
  const ref = useContext(SideNavToggleButtonAttachRef);
  const elementRef = useRef(null);
  useEffect(() => {
    if (fg('platform_fix_component_state_update_for_suspense')) {
      ref(elementRef.current);
    }
  }, [elementRef, ref]);
  useEffect(() => {
    const {
      matches
    } = window.matchMedia('(min-width: 64rem)');
    setIsSideNavExpanded(matches ? isSideNavExpandedOnDesktop : isSideNavExpandedOnMobile);
  }, [isSideNavExpandedOnDesktop, isSideNavExpandedOnMobile]);
  useEffect(() => {
    // When screen size changes, ensure we use the correct visibility state
    const mediaQueryList = window.matchMedia('(min-width: 64rem)');
    return bind(mediaQueryList, {
      type: 'change',
      listener() {
        setIsSideNavExpanded(mediaQueryList.matches ? isSideNavExpandedOnDesktop : isSideNavExpandedOnMobile);
      }
    });
  }, [isSideNavExpandedOnDesktop, isSideNavExpandedOnMobile]);
  const toggleVisibility = useToggleSideNav();
  const handleClick = useCallback((event, analyticsEvent) => {
    onClick === null || onClick === void 0 ? void 0 : onClick(event, analyticsEvent, {
      isSideNavVisible: isSideNavExpanded
    });
    toggleVisibility();
  }, [onClick, toggleVisibility, isSideNavExpanded]);

  /**
   * ## Behaviour
   * It is intentional that collapse icon will be used while the flyout is open.
   * The icon is tied to the expanded / collapse state, and not the flyout state.
   *
   * ## Why a function?
   * Unfortunately, changing the icon inside an <IconButton> when the user is over
   * the button will cause the svg element to be replaced, which can trigger a
   * "mouseenter" event. This is problematic when the user is already over the button,
   * as it can result in a "mouseenter" event after the user manually entered the button.
   *
   * `icon` accepts a function for the `icon` prop (ie a render prop), so we don't need to
   * memoize it, or pull it out into a new function
   */
  const icon = props => /*#__PURE__*/React.createElement("span", {
    className: ax(["_1e0c1bgi _lcxvglyw"])
  }, isSideNavExpanded ? /*#__PURE__*/React.createElement(SidebarCollapseIcon, props) : /*#__PURE__*/React.createElement(SidebarExpandIcon, props));
  return /*#__PURE__*/React.createElement(IconButton, {
    appearance: "subtle",
    label: isSideNavExpanded ? collapseLabel : expandLabel,
    icon: icon,
    onClick: handleClick,
    testId: testId,
    isTooltipDisabled: false,
    interactionName: interactionName,
    ref: fg('platform_fix_component_state_update_for_suspense') ? elementRef : ref,
    tooltip: toggleButtonTooltipOptions
  });
};