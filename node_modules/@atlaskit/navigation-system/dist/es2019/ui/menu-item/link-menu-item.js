/* link-menu-item.tsx generated by @compiled/babel-plugin v0.36.1 */
import "./link-menu-item.compiled.css";
import * as React from 'react';
import { ax, ix } from "@compiled/react/runtime";
import { useMemo, useRef } from 'react';
import mergeRefs from '@atlaskit/ds-lib/merge-refs';
import { forwardRefWithGeneric } from '../../components/forward-ref-with-generic';
import { ListItem } from '../../components/list-item';
import { MenuItemBase } from './menu-item';
import { useScrollMenuItemIntoView } from './use-scroll-menu-item-into-view';
const listItemStyles = {
  root: "_10m98stt"
};
const LinkMenuItemNoRef = ({
  testId,
  actions,
  children,
  description,
  elemAfter,
  elemBefore,
  href,
  target,
  actionsOnHover,
  isSelected,
  onClick,
  interactionName,
  isContentTooltipDisabled,
  visualContentRef,
  listItemRef,
  isDragging,
  hasDragIndicator,
  dropIndicator
}, forwardedRef) => {
  const itemRef = useRef(null);
  useScrollMenuItemIntoView({
    elementRef: itemRef,
    isSelected: isSelected !== null && isSelected !== void 0 ? isSelected : false
  });
  const ref = useMemo(() => {
    return mergeRefs([itemRef, listItemRef !== null && listItemRef !== void 0 ? listItemRef : null]);
  }, [itemRef, listItemRef]);
  return /*#__PURE__*/React.createElement(ListItem, {
    ref: ref,
    xcss: listItemStyles.root
  }, /*#__PURE__*/React.createElement(MenuItemBase, {
    testId: testId,
    description: description,
    actions: actions,
    elemAfter: elemAfter
    // TODO Always use "open in new window" icon when `openInNewWindow` prop is true
    ,
    elemBefore: elemBefore,
    href: href,
    target: target,
    actionsOnHover: actionsOnHover,
    isSelected: isSelected,
    onClick: onClick,
    ref: forwardedRef,
    visualContentRef: visualContentRef,
    interactionName: interactionName,
    isContentTooltipDisabled: isContentTooltipDisabled,
    isDragging: isDragging,
    hasDragIndicator: hasDragIndicator,
    dropIndicator: dropIndicator
  }, children));
};

/**
 * LinkMenuItem
 *
 * A menu item link. It should be used within a `ul`.
 */
export const LinkMenuItem = forwardRefWithGeneric(LinkMenuItemNoRef);