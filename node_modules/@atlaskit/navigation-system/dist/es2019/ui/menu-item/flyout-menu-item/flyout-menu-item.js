import React, { forwardRef, useEffect } from 'react';
import useControlled from '@atlaskit/ds-lib/use-controlled';
import usePreviousValue from '@atlaskit/ds-lib/use-previous-value';
import { Popup } from '@atlaskit/popup/experimental';
import { MenuListItem } from '../menu-list-item';
import { IsOpenContext, SetIsOpenContext } from './flyout-menu-item-context';
/**
 * __FlyoutMenuItem__
 *
 * Displays content in a flyout menu, triggered by a button.
 *
 * The top-level component that contains the trigger and content of a flyout menu.
 *
 * Usage example:
 * ```tsx
 * <FlyoutMenuItem>
 *   <FlyoutMenuItemTrigger>Trigger</FlyoutMenuItemTrigger>
 *   <FlyoutMenuItemContent>
 *     <MenuList>
 *       <ButtonMenuItem>Item 1</ButtonMenuItem>
 *       <ButtonMenuItem>Item 2</ButtonMenuItem>
 *     </MenuList>
 *   </FlyoutMenuItemContent>
 * </FlyoutMenuItem>
 * ```
 */
export const FlyoutMenuItem = /*#__PURE__*/forwardRef(({
  children,
  id,
  isOpen: isOpenControlled,
  isDefaultOpen = false,
  onOpenChange
}, forwardedRef) => {
  const [isOpen, setIsOpen] = useControlled(isOpenControlled, () => isDefaultOpen);
  const previousIsOpen = usePreviousValue(isOpen);
  useEffect(() => {
    if (previousIsOpen === undefined || previousIsOpen === isOpen) {
      /**
       * The previous value is `undefined` on initialization, so if it is `undefined` then the value hasn't changed.
       *
       * The previous value can be equal to the current one if the component re-renders due to something else changing.
       *
       * In both cases the value hasn't changed and we don't want to notify consumers.
       */
      return;
    }
    onOpenChange === null || onOpenChange === void 0 ? void 0 : onOpenChange(isOpen);
  }, [isOpen, onOpenChange, previousIsOpen]);
  return /*#__PURE__*/React.createElement(IsOpenContext.Provider, {
    value: isOpen
  }, /*#__PURE__*/React.createElement(SetIsOpenContext.Provider, {
    value: setIsOpen
  }, /*#__PURE__*/React.createElement(MenuListItem, {
    ref: forwardedRef
  }, /*#__PURE__*/React.createElement(Popup, {
    id: id,
    isOpen: isOpen
  }, children))));
});