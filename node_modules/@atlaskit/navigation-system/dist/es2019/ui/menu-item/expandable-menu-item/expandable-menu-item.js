/* expandable-menu-item.tsx generated by @compiled/babel-plugin v0.36.1 */
import "./expandable-menu-item.compiled.css";
import * as React from 'react';
import { ax, ix } from "@compiled/react/runtime";
import { forwardRef } from 'react';
import useControlled from '@atlaskit/ds-lib/use-controlled';
import { MenuListItem } from '../menu-list-item';
import { IsExpandedContext, OnExpansionToggleContext, SetIsExpandedContext } from './expandable-menu-item-context';
const relativeStyles = {
  root: "_kqswh2mm"
};

/**
 * __ExpandableMenuItem__
 *
 * A composable component for nested menu items that can be revealed and hidden by interacting witih the parent menu item.
 *
 * Follows the [disclosure pattern](https://www.w3.org/WAI/ARIA/apg/patterns/disclosure/).
 *
 * Should be used with `ExpandableMenuItemTrigger` as the parent menu item, and children menu items should be wrapped in a `ExpandableMenuItemContent`.
 *
 * Usage example:
 * ```jsx
 * <ExpandableMenuItem>
 *   <ExpandableMenuItemTrigger>Parent menu item</ExpandableMenuItemTrigger>
 *   <ExpandableMenuItemContent>
 *     <ButtonMenuItem>Item 1</ButtonMenuItem>
 *     <ButtonMenuItem>Item 2</ButtonMenuItem>
 *   </ExpandableMenuItemContent>
 * </ExpandableMenuItem>
 * ```
 */
export const ExpandableMenuItem = /*#__PURE__*/forwardRef(({
  isExpanded: isExpandedControlled,
  isDefaultExpanded = false,
  onExpansionToggle,
  children,
  dropIndicator
}, forwardedRef) => {
  const [isExpanded, setIsExpanded] = useControlled(isExpandedControlled, () => isDefaultExpanded);
  return /*#__PURE__*/React.createElement(IsExpandedContext.Provider, {
    value: isExpanded
  }, /*#__PURE__*/React.createElement(SetIsExpandedContext.Provider, {
    value: setIsExpanded
  }, /*#__PURE__*/React.createElement(OnExpansionToggleContext.Provider, {
    value: onExpansionToggle !== null && onExpansionToggle !== void 0 ? onExpansionToggle : null
  }, /*#__PURE__*/React.createElement(MenuListItem, {
    ref: forwardedRef
  }, /*#__PURE__*/React.createElement("div", {
    className: ax([dropIndicator && relativeStyles.root])
  }, children, dropIndicator)))));
});