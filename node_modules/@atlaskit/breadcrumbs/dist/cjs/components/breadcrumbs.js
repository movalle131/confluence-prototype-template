/* breadcrumbs.tsx generated by @compiled/babel-plugin v0.36.1 */
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
require("./breadcrumbs.compiled.css");
var _runtime = require("@compiled/react/runtime");
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = _interopRequireWildcard(require("react"));
var _analyticsNext = require("@atlaskit/analytics-next");
var _mergeRefs = _interopRequireDefault(require("@atlaskit/ds-lib/merge-refs"));
var _noop = _interopRequireDefault(require("@atlaskit/ds-lib/noop"));
var _platformFeatureFlags = require("@atlaskit/platform-feature-flags");
var _colors = require("@atlaskit/theme/colors");
var _ellipsisItem = _interopRequireDefault(require("./ellipsis-item"));
var _useOnRevealed = require("./internal/use-on-revealed");
var _excluded = ["analyticsContext", "children", "createAnalyticsEvent", "defaultExpanded", "ellipsisLabel", "isExpanded", "itemsAfterCollapse", "itemsBeforeCollapse", "label", "maxItems", "onExpand", "testId"];
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != _typeof(e) && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var defaultMaxItems = 8;
var defaultBreadcrumbsLabel = 'Breadcrumbs';
var defaultEllipsisLabel = 'Show more breadcrumbs';
var toArray = _react.default.Children.toArray;
var analyticsAttributes = {
  componentName: 'breadcrumbs',
  packageName: "@atlaskit/breadcrumbs",
  packageVersion: "15.2.2"
};
var noop = _noop.default;
var interactiveElementSelector = 'a, button, [tabindex]:not([tabindex="-1"])';
var breadcrumbStyles = null;
var InnerBreadcrumbs = /*#__PURE__*/(0, _react.forwardRef)(function (props, ref) {
  var _props$defaultExpande = props.defaultExpanded,
    defaultExpanded = _props$defaultExpande === void 0 ? false : _props$defaultExpande,
    isExpanded = props.isExpanded,
    _props$maxItems = props.maxItems,
    maxItems = _props$maxItems === void 0 ? defaultMaxItems : _props$maxItems,
    _props$itemsBeforeCol = props.itemsBeforeCollapse,
    itemsBeforeCollapse = _props$itemsBeforeCol === void 0 ? 1 : _props$itemsBeforeCol,
    _props$itemsAfterColl = props.itemsAfterCollapse,
    itemsAfterCollapse = _props$itemsAfterColl === void 0 ? 1 : _props$itemsAfterColl,
    _props$children = props.children,
    children = _props$children === void 0 ? [] : _props$children,
    testId = props.testId,
    _props$onExpand = props.onExpand,
    providedExpanse = _props$onExpand === void 0 ? noop : _props$onExpand,
    analyticsContext = props.analyticsContext,
    _props$label = props.label,
    label = _props$label === void 0 ? defaultBreadcrumbsLabel : _props$label,
    _props$ellipsisLabel = props.ellipsisLabel,
    ellipsisLabel = _props$ellipsisLabel === void 0 ? defaultEllipsisLabel : _props$ellipsisLabel;
  var _useState = (0, _react.useState)(defaultExpanded),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    expanded = _useState2[0],
    setExpanse = _useState2[1];
  var _useState3 = (0, _react.useState)(false),
    _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
    isClickedBySpace = _useState4[0],
    setExpansionTrigger = _useState4[1];
  var wrapperRef = (0, _react.useRef)(null);
  var isControlled = typeof isExpanded !== 'undefined';
  var isExpansionHandled = providedExpanse !== noop;
  var shouldExpand = isControlled ? isExpanded : expanded;
  var focusFirstRevealed = function focusFirstRevealed() {
    if (wrapperRef.current) {
      var listItems = Array.from(wrapperRef.current.querySelectorAll('li'));
      var interactiveElements = listItems.map(function (li) {
        return li.querySelector(interactiveElementSelector);
      });
      var elementToFocus = interactiveElements[itemsBeforeCollapse];
      var firstInteractiveElement = interactiveElements[0];
      if (elementToFocus) {
        elementToFocus.focus && elementToFocus.focus();
      } else if (firstInteractiveElement) {
        firstInteractiveElement.focus && firstInteractiveElement.focus();
      } else {
        wrapperRef.current.focus();
      }
    }
    setExpansionTrigger(false);
  };
  var focusFirstRevealedMemoized = (0, _react.useCallback)(function () {
    if (wrapperRef.current) {
      var listItems = Array.from(wrapperRef.current.querySelectorAll('li'));
      var interactiveElements = listItems.map(function (li) {
        return li.querySelector(interactiveElementSelector);
      });
      var elementToFocus = interactiveElements[itemsBeforeCollapse];
      var firstInteractiveElement = interactiveElements[0];
      if (elementToFocus) {
        elementToFocus.focus && elementToFocus.focus();
      } else if (firstInteractiveElement) {
        firstInteractiveElement.focus && firstInteractiveElement.focus();
      } else {
        wrapperRef.current.focus();
      }
    }
    setExpansionTrigger(false);
  }, [setExpansionTrigger, itemsBeforeCollapse, wrapperRef]);
  (0, _useOnRevealed.useOnRevealed)((0, _platformFeatureFlags.fg)('jfp-magma-stability-platform-3') ? focusFirstRevealedMemoized : focusFirstRevealed, {
    isExpanded: shouldExpand,
    isDisabled: !isClickedBySpace
  });
  var handleExpansion = (0, _analyticsNext.usePlatformLeafEventHandler)(_objectSpread({
    fn: function fn(event, analyticsEvent) {
      if (!isControlled) {
        setExpanse(function (expanded) {
          return !expanded;
        });
      }
      if (isExpansionHandled && isControlled || !isControlled) {
        setExpansionTrigger(event.target === document.activeElement);
      }
      return providedExpanse(event, analyticsEvent);
    },
    action: 'expanded',
    analyticsData: analyticsContext
  }, analyticsAttributes));
  var childrenArray = toArray(children);
  var breadcrumbsArray = _react.default.Children.map(childrenArray, function (child, index) {
    //To avoid error if child is a string
    if (typeof child === 'string') {
      return child;
    }
    return childrenArray.length - 1 === index ?
    /*#__PURE__*/
    // eslint-disable-next-line @repo/internal/react/no-clone-element
    _react.default.cloneElement(child, {
      'aria-current': 'page'
    }) : child;
  });
  var renderItemsWithEllipsis = function renderItemsWithEllipsis() {
    var allItems = breadcrumbsArray;
    // This defends against someone passing weird data, to ensure that if all
    // items would be shown anyway, we just show all items without the EllipsisItem
    if (itemsBeforeCollapse + itemsAfterCollapse >= allItems.length) {
      return allItems;
    }
    var beforeItems = allItems.slice(0, itemsBeforeCollapse);
    var afterItems = allItems.slice(allItems.length - itemsAfterCollapse, allItems.length);
    return [].concat((0, _toConsumableArray2.default)(beforeItems), [/*#__PURE__*/_react.default.createElement(_ellipsisItem.default, {
      key: "ellipsis",
      testId: testId && "".concat(testId, "--breadcrumb-ellipsis"),
      onClick: handleExpansion,
      label: ellipsisLabel
    })], (0, _toConsumableArray2.default)(afterItems));
  };
  var shouldDisplayItems = shouldExpand || maxItems && breadcrumbsArray.length <= maxItems;
  var breadcrumbsItems = shouldDisplayItems ? breadcrumbsArray : renderItemsWithEllipsis();
  return /*#__PURE__*/_react.default.createElement("nav", {
    "aria-label": label,
    ref: (0, _mergeRefs.default)([ref, wrapperRef]),
    tabIndex: -1
  }, /*#__PURE__*/_react.default.createElement("ol", {
    "data-testid": testId,
    className: (0, _runtime.ax)(["_1e0c1txw _1n261g80 _syazpsu8 _6rthze3t _1pfhze3t _12l2ze3t _ahbqze3t _85i5ze3t _1q51ze3t _y4tize3t _bozgze3t"]),
    style: {
      "--_vrm7dk": (0, _runtime.ix)("var(--ds-text-subtlest, ".concat(_colors.N200, ")"))
    }
  }, breadcrumbsItems));
});
var Breadcrumbs = /*#__PURE__*/(0, _react.memo)( /*#__PURE__*/(0, _react.forwardRef)(function (_ref, ref) {
  var analyticsContext = _ref.analyticsContext,
    children = _ref.children,
    createAnalyticsEvent = _ref.createAnalyticsEvent,
    defaultExpanded = _ref.defaultExpanded,
    ellipsisLabel = _ref.ellipsisLabel,
    isExpanded = _ref.isExpanded,
    itemsAfterCollapse = _ref.itemsAfterCollapse,
    itemsBeforeCollapse = _ref.itemsBeforeCollapse,
    label = _ref.label,
    maxItems = _ref.maxItems,
    onExpand = _ref.onExpand,
    testId = _ref.testId,
    props = (0, _objectWithoutProperties2.default)(_ref, _excluded);
  return /*#__PURE__*/_react.default.createElement(InnerBreadcrumbs, (0, _extends2.default)({}, props, {
    analyticsContext: analyticsContext,
    children: children,
    createAnalyticsEvent: createAnalyticsEvent,
    defaultExpanded: defaultExpanded,
    ellipsisLabel: ellipsisLabel,
    isExpanded: isExpanded,
    itemsAfterCollapse: itemsAfterCollapse,
    itemsBeforeCollapse: itemsBeforeCollapse,
    label: label,
    maxItems: maxItems,
    onExpand: onExpand,
    ref: ref,
    testId: testId
  }));
}));

// eslint-disable-next-line @repo/internal/react/require-jsdoc
var _default = exports.default = Breadcrumbs;