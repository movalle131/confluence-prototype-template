/* breadcrumbs.tsx generated by @compiled/babel-plugin v0.36.1 */
import _extends from "@babel/runtime/helpers/extends";
import "./breadcrumbs.compiled.css";
import { ax, ix } from "@compiled/react/runtime";
import React, { forwardRef, memo, useCallback, useRef, useState } from 'react';
import { usePlatformLeafEventHandler } from '@atlaskit/analytics-next';
import mergeRefs from '@atlaskit/ds-lib/merge-refs';
import __noop from '@atlaskit/ds-lib/noop';
import { fg } from '@atlaskit/platform-feature-flags';
import { N200 } from '@atlaskit/theme/colors';
import EllipsisItem from './ellipsis-item';
import { useOnRevealed } from './internal/use-on-revealed';
const defaultMaxItems = 8;
const defaultBreadcrumbsLabel = 'Breadcrumbs';
const defaultEllipsisLabel = 'Show more breadcrumbs';
const {
  toArray
} = React.Children;
const analyticsAttributes = {
  componentName: 'breadcrumbs',
  packageName: "@atlaskit/breadcrumbs",
  packageVersion: "15.2.2"
};
const noop = __noop;
const interactiveElementSelector = 'a, button, [tabindex]:not([tabindex="-1"])';
const breadcrumbStyles = null;
const InnerBreadcrumbs = /*#__PURE__*/forwardRef((props, ref) => {
  const {
    defaultExpanded = false,
    isExpanded,
    maxItems = defaultMaxItems,
    itemsBeforeCollapse = 1,
    itemsAfterCollapse = 1,
    children = [],
    testId,
    onExpand: providedExpanse = noop,
    analyticsContext,
    label = defaultBreadcrumbsLabel,
    ellipsisLabel = defaultEllipsisLabel
  } = props;
  const [expanded, setExpanse] = useState(defaultExpanded);
  const [isClickedBySpace, setExpansionTrigger] = useState(false);
  const wrapperRef = useRef(null);
  const isControlled = typeof isExpanded !== 'undefined';
  const isExpansionHandled = providedExpanse !== noop;
  const shouldExpand = isControlled ? isExpanded : expanded;
  const focusFirstRevealed = () => {
    if (wrapperRef.current) {
      const listItems = Array.from(wrapperRef.current.querySelectorAll('li'));
      const interactiveElements = listItems.map(li => li.querySelector(interactiveElementSelector));
      const elementToFocus = interactiveElements[itemsBeforeCollapse];
      const firstInteractiveElement = interactiveElements[0];
      if (elementToFocus) {
        elementToFocus.focus && elementToFocus.focus();
      } else if (firstInteractiveElement) {
        firstInteractiveElement.focus && firstInteractiveElement.focus();
      } else {
        wrapperRef.current.focus();
      }
    }
    setExpansionTrigger(false);
  };
  const focusFirstRevealedMemoized = useCallback(() => {
    if (wrapperRef.current) {
      const listItems = Array.from(wrapperRef.current.querySelectorAll('li'));
      const interactiveElements = listItems.map(li => li.querySelector(interactiveElementSelector));
      const elementToFocus = interactiveElements[itemsBeforeCollapse];
      const firstInteractiveElement = interactiveElements[0];
      if (elementToFocus) {
        elementToFocus.focus && elementToFocus.focus();
      } else if (firstInteractiveElement) {
        firstInteractiveElement.focus && firstInteractiveElement.focus();
      } else {
        wrapperRef.current.focus();
      }
    }
    setExpansionTrigger(false);
  }, [setExpansionTrigger, itemsBeforeCollapse, wrapperRef]);
  useOnRevealed(fg('jfp-magma-stability-platform-3') ? focusFirstRevealedMemoized : focusFirstRevealed, {
    isExpanded: shouldExpand,
    isDisabled: !isClickedBySpace
  });
  const handleExpansion = usePlatformLeafEventHandler({
    fn: (event, analyticsEvent) => {
      if (!isControlled) {
        setExpanse(expanded => !expanded);
      }
      if (isExpansionHandled && isControlled || !isControlled) {
        setExpansionTrigger(event.target === document.activeElement);
      }
      return providedExpanse(event, analyticsEvent);
    },
    action: 'expanded',
    analyticsData: analyticsContext,
    ...analyticsAttributes
  });
  const childrenArray = toArray(children);
  const breadcrumbsArray = React.Children.map(childrenArray, (child, index) => {
    //To avoid error if child is a string
    if (typeof child === 'string') {
      return child;
    }
    return childrenArray.length - 1 === index ?
    /*#__PURE__*/
    // eslint-disable-next-line @repo/internal/react/no-clone-element
    React.cloneElement(child, {
      'aria-current': 'page'
    }) : child;
  });
  const renderItemsWithEllipsis = () => {
    const allItems = breadcrumbsArray;
    // This defends against someone passing weird data, to ensure that if all
    // items would be shown anyway, we just show all items without the EllipsisItem
    if (itemsBeforeCollapse + itemsAfterCollapse >= allItems.length) {
      return allItems;
    }
    const beforeItems = allItems.slice(0, itemsBeforeCollapse);
    const afterItems = allItems.slice(allItems.length - itemsAfterCollapse, allItems.length);
    return [...beforeItems, /*#__PURE__*/React.createElement(EllipsisItem, {
      key: "ellipsis",
      testId: testId && `${testId}--breadcrumb-ellipsis`,
      onClick: handleExpansion,
      label: ellipsisLabel
    }), ...afterItems];
  };
  const shouldDisplayItems = shouldExpand || maxItems && breadcrumbsArray.length <= maxItems;
  const breadcrumbsItems = shouldDisplayItems ? breadcrumbsArray : renderItemsWithEllipsis();
  return /*#__PURE__*/React.createElement("nav", {
    "aria-label": label,
    ref: mergeRefs([ref, wrapperRef]),
    tabIndex: -1
  }, /*#__PURE__*/React.createElement("ol", {
    "data-testid": testId,
    className: ax(["_1e0c1txw _1n261g80 _syaz1wmz _6rthze3t _1pfhze3t _12l2ze3t _ahbqze3t _85i5ze3t _1q51ze3t _y4tize3t _bozgze3t"])
  }, breadcrumbsItems));
});
const Breadcrumbs = /*#__PURE__*/memo( /*#__PURE__*/forwardRef(({
  analyticsContext,
  children,
  createAnalyticsEvent,
  defaultExpanded,
  ellipsisLabel,
  isExpanded,
  itemsAfterCollapse,
  itemsBeforeCollapse,
  label,
  maxItems,
  onExpand,
  testId,
  ...props
}, ref) => /*#__PURE__*/React.createElement(InnerBreadcrumbs, _extends({}, props, {
  analyticsContext: analyticsContext,
  children: children,
  createAnalyticsEvent: createAnalyticsEvent,
  defaultExpanded: defaultExpanded,
  ellipsisLabel: ellipsisLabel,
  isExpanded: isExpanded,
  itemsAfterCollapse: itemsAfterCollapse,
  itemsBeforeCollapse: itemsBeforeCollapse,
  label: label,
  maxItems: maxItems,
  onExpand: onExpand,
  ref: ref,
  testId: testId
}))));

// eslint-disable-next-line @repo/internal/react/require-jsdoc
export default Breadcrumbs;