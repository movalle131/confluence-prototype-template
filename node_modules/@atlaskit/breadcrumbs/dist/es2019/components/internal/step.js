/* step.tsx generated by @compiled/babel-plugin v0.36.1 */
import "./step.compiled.css";
import * as React from 'react';
import { ax, ix } from "@compiled/react/runtime";
import { forwardRef, Fragment } from 'react';
import { usePlatformLeafEventHandler } from '@atlaskit/analytics-next/usePlatformLeafEventHandler';
import { cx } from '@atlaskit/css';
import __noop from '@atlaskit/ds-lib/noop';
import { Anchor, Pressable } from '@atlaskit/primitives/compiled';
const analyticsAttributes = {
  componentName: 'breadcrumbsItem',
  packageName: "@atlaskit/breadcrumbs",
  packageVersion: "15.2.2"
};
const noop = __noop;
const styles = {
  root: "_11c82smr _19itglyw _zulp1b66 _2rkoglpi _4bfu1r31 _1hmsglyw _ajmmnqa1 _1rjcv77o _18zrze3t _bfhksm61 _syaz131l _1e0c116y _4cvr1h6o _1a3b1r31 _4fprglyw _5goinqa1 _f8pj131l _9oik1r31 _1bnx8stv _jf4cnqa1 _30l3131l _9h8h1fxt",
  withoutTruncation: "_1ul9idpf _1o9zkb7n",
  text: "_1reo15vq _18m915vq _1bto1l2s _o5721q9c"
};

/**
 * __Step__
 *
 * A button that represents a single step in a breadcrumbs component.
 */
const Step = /*#__PURE__*/forwardRef(({
  analyticsContext,
  href,
  iconAfter,
  iconBefore,
  onClick: onClickProvided = noop,
  target,
  testId,
  children,
  truncationWidth
}, ref) => {
  const handleClick = usePlatformLeafEventHandler({
    fn: onClickProvided,
    action: 'clicked',
    analyticsData: analyticsContext,
    ...analyticsAttributes
  });
  const content = /*#__PURE__*/React.createElement(Fragment, null, iconBefore, /*#__PURE__*/React.createElement("span", {
    ref: ref,
    className: ax([styles.text])
  }, children), iconAfter);
  if (href) {
    return /*#__PURE__*/React.createElement(Anchor, {
      href: href,
      onClick: handleClick,
      target: target,
      testId: testId,
      xcss: cx(styles.root, !truncationWidth && styles.withoutTruncation),
      style: {
        maxWidth: truncationWidth
      }
    }, content);
  }
  return /*#__PURE__*/React.createElement(Pressable, {
    onClick: handleClick,
    testId: testId,
    xcss: cx(styles.root, !truncationWidth && styles.withoutTruncation),
    style: {
      maxWidth: truncationWidth
    }
  }, content);
});
export default Step;