import _extends from "@babel/runtime/helpers/extends";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
var _excluded = ["analyticsContext", "component", "hasOverflow", "href", "iconAfter", "iconBefore", "onClick", "target", "testId"];
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
import React from 'react';
import { usePlatformLeafEventHandler } from '@atlaskit/analytics-next/usePlatformLeafEventHandler';
import Button from '@atlaskit/button/standard-button';
import __noop from '@atlaskit/ds-lib/noop';
var analyticsAttributes = {
  componentName: 'breadcrumbsItem',
  packageName: "@atlaskit/breadcrumbs",
  packageVersion: "15.2.2"
};
var noop = __noop;

/**
 * __Step__
 *
 * A button that represents a single step in a breadcrumbs component.
 */
var StepOld = /*#__PURE__*/React.forwardRef(function (_ref, ref) {
  var analyticsContext = _ref.analyticsContext,
    component = _ref.component,
    _ref$hasOverflow = _ref.hasOverflow,
    hasOverflow = _ref$hasOverflow === void 0 ? true : _ref$hasOverflow,
    _ref$href = _ref.href,
    href = _ref$href === void 0 ? '#' : _ref$href,
    iconAfter = _ref.iconAfter,
    iconBefore = _ref.iconBefore,
    _ref$onClick = _ref.onClick,
    onClickProvided = _ref$onClick === void 0 ? noop : _ref$onClick,
    target = _ref.target,
    testId = _ref.testId,
    props = _objectWithoutProperties(_ref, _excluded);
  var handleClicked = usePlatformLeafEventHandler(_objectSpread({
    fn: onClickProvided,
    action: 'clicked',
    analyticsData: analyticsContext
  }, analyticsAttributes));
  return /*#__PURE__*/React.createElement(Button, _extends({}, props, {
    appearance: "subtle-link",
    component: component,
    href: href,
    iconAfter: hasOverflow ? undefined : iconAfter,
    iconBefore: hasOverflow ? undefined : iconBefore,
    onClick: handleClicked,
    ref: ref,
    spacing: "none",
    target: target,
    testId: testId
  }));
});
export default StepOld;