/* breadcrumbs-item.tsx generated by @compiled/babel-plugin v0.36.1 */
import _extends from "@babel/runtime/helpers/extends";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
var _excluded = ["analyticsContext", "component", "href", "iconAfter", "iconBefore", "onClick", "onTooltipShown", "ref", "target", "testId", "text", "truncationWidth"];
import "./breadcrumbs-item.compiled.css";
import * as React from 'react';
import { ax, ix } from "@compiled/react/runtime";
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
import { memo, useRef } from 'react';
import { fg } from '@atlaskit/platform-feature-flags';
import Tooltip from '@atlaskit/tooltip';
import Step from './internal/step';
import StepOld from './internal/step-old';
import useOverflowable from './internal/use-overflowable';
var itemWrapperStyles = null;
var VAR_STEP_TRUNCATION_WIDTH = '--max-width';
var ICON_WIDTH_ESTIMATE = 24;
var staticItemStyles = null;
var staticItemWithTruncationStyles = null;
var staticItemWithoutTruncationStyles = null;
var BreadcrumbsItem = /*#__PURE__*/memo(function (_ref) {
  var analyticsContext = _ref.analyticsContext,
    component = _ref.component,
    href = _ref.href,
    iconAfter = _ref.iconAfter,
    iconBefore = _ref.iconBefore,
    onClick = _ref.onClick,
    onTooltipShown = _ref.onTooltipShown,
    ref = _ref.ref,
    target = _ref.target,
    testId = _ref.testId,
    text = _ref.text,
    truncationWidth = _ref.truncationWidth,
    rest = _objectWithoutProperties(_ref, _excluded);
  var stepTextRef = useRef(null);

  // If icons are provided we include their width in the truncation calculation to ensure we're as accurate as possible.
  // Note: this assumes icons are 24px wide which should be almost always.
  // Not really an issue if the icons are smaller, just that truncation occurs slightly earlier than you may want.
  var iconWidthAllowance = 0;
  if (iconBefore) {
    iconWidthAllowance += ICON_WIDTH_ESTIMATE;
  }
  if (iconAfter) {
    iconWidthAllowance += ICON_WIDTH_ESTIMATE;
  }
  var _useOverflowable = useOverflowable(truncationWidth, stepTextRef.current, iconWidthAllowance),
    _useOverflowable2 = _slicedToArray(_useOverflowable, 2),
    hasOverflow = _useOverflowable2[0],
    showTooltip = _useOverflowable2[1];

  // This should be a part of staticItemStyles but it requires the !important flag to prevent the padding from being overridden by the button styles
  // compiled treats `${token(xxx)} !important` differently when concat !important in es2019 and esm built files
  // the padding and font weight were not sourced correctly in the esm build
  var buttonOverrideStyles = {
    paddingBlock: "var(--ds-space-025, 2px)",
    fontWeight: "var(--ds-font-weight-regular, 400)"
  };

  // Note: cast to `any` is required to type verification - see https://github.com/frenic/csstype#what-should-i-do-when-i-get-type-errors
  var dynamicItemStyles = _defineProperty({}, VAR_STEP_TRUNCATION_WIDTH, typeof truncationWidth !== 'undefined' && "".concat(truncationWidth, "px"));
  var step = !component && fg('platform_dst_breadcrumbs_step_conversion') ? /*#__PURE__*/React.createElement(Step, {
    ref: stepTextRef,
    analyticsContext: analyticsContext,
    href: href,
    iconAfter: iconAfter,
    iconBefore: iconBefore,
    onClick: onClick,
    target: target,
    testId: testId,
    truncationWidth: truncationWidth
  }, text) : /*#__PURE__*/React.createElement(StepOld, _extends({}, rest, {
    analyticsContext: analyticsContext,
    component: component,
    hasOverflow: hasOverflow,
    href: href,
    iconAfter: iconAfter,
    iconBefore: iconBefore,
    onClick: onClick,
    ref: stepTextRef,
    target: target,
    testId: testId,
    className: ax(["_vwz41txs", truncationWidth ? "_p12f1pis" : "_1ul9grf3 _1o9zzg3v"]),
    style: _objectSpread(_objectSpread({}, truncationWidth ? _objectSpread(_objectSpread({}, dynamicItemStyles), buttonOverrideStyles) : buttonOverrideStyles), {}, {
      "--_1fteikb": ix("var(".concat(VAR_STEP_TRUNCATION_WIDTH, ") !important"))
    })
  }), text);
  return /*#__PURE__*/React.createElement("li", {
    className: ax(["_1e0c1txw _vchhusvi _p12f1osq _4t3i59ms _2lx2vrvc _ect41gqc _6rthze3t _1pfhze3t _12l2ze3t _ahbqze3t _85i5ze3t _1q51ze3t _y4tize3t _bozgze3t _5nddv77o _1j1pu2gc _1dsoftgi _toskidpf _15621n76 _191d1h6o"]),
    style: {
      "--_1fdrbou": ix("".concat(24 / 14, "em"))
    }
  }, showTooltip ? /*#__PURE__*/React.createElement(Tooltip, {
    content: text,
    position: "bottom",
    onShow: onTooltipShown
  }, step) : step);
});

// eslint-disable-next-line @repo/internal/react/require-jsdoc
export default BreadcrumbsItem;