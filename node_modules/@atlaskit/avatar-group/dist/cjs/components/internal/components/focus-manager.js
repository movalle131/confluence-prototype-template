"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.FocusManagerContext = void 0;
var _react = _interopRequireWildcard(require("react"));
var _bindEventListener = require("bind-event-listener");
var _noop = _interopRequireDefault(require("@atlaskit/ds-lib/noop"));
var _handleFocus = _interopRequireDefault(require("../utiles/handle-focus"));
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != _typeof(e) && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
/**
 *
 *
 * Context provider which maintains the list of focusable elements and a method to
 * register new menu items.
 * This list drives the keyboard navgation of the menu.
 *
 */
var FocusManagerContext = exports.FocusManagerContext = /*#__PURE__*/(0, _react.createContext)({
  menuItemRefs: [],
  registerRef: _noop.default
});

/**
 * Focus manager logic
 */
var FocusManager = function FocusManager(_ref) {
  var children = _ref.children;
  var menuItemRefs = (0, _react.useRef)([]);
  var registerRef = (0, _react.useCallback)(function (ref) {
    if (ref && !menuItemRefs.current.includes(ref)) {
      menuItemRefs.current.push(ref);
    }
  }, []);

  // set focus and intentionally rebinding listener and clean up listener on each render
  (0, _react.useEffect)(function () {
    (0, _bindEventListener.bind)(window, {
      type: 'keydown',
      listener: (0, _handleFocus.default)(menuItemRefs.current)
    });
    var unbind = function unbind() {
      (0, _bindEventListener.bind)(window, {
        type: 'keydown',
        listener: (0, _handleFocus.default)(menuItemRefs.current)
      });
    };
    return unbind;
  }, []);
  var contextValue = {
    menuItemRefs: menuItemRefs.current,
    registerRef: registerRef
  };
  return /*#__PURE__*/_react.default.createElement(FocusManagerContext.Provider, {
    value: contextValue
  }, children);
};
var _default = exports.default = FocusManager;