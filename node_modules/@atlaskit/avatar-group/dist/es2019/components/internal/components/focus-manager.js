import React, { createContext, useCallback, useEffect, useRef } from 'react';
import { bind } from 'bind-event-listener';
import __noop from '@atlaskit/ds-lib/noop';
import handleFocus from '../utiles/handle-focus';

/**
 *
 *
 * Context provider which maintains the list of focusable elements and a method to
 * register new menu items.
 * This list drives the keyboard navgation of the menu.
 *
 */
export const FocusManagerContext = /*#__PURE__*/createContext({
  menuItemRefs: [],
  registerRef: __noop
});

/**
 * Focus manager logic
 */
const FocusManager = ({
  children
}) => {
  const menuItemRefs = useRef([]);
  const registerRef = useCallback(ref => {
    if (ref && !menuItemRefs.current.includes(ref)) {
      menuItemRefs.current.push(ref);
    }
  }, []);

  // set focus and intentionally rebinding listener and clean up listener on each render
  useEffect(() => {
    bind(window, {
      type: 'keydown',
      listener: handleFocus(menuItemRefs.current)
    });
    const unbind = () => {
      bind(window, {
        type: 'keydown',
        listener: handleFocus(menuItemRefs.current)
      });
    };
    return unbind;
  }, []);
  const contextValue = {
    menuItemRefs: menuItemRefs.current,
    registerRef
  };
  return /*#__PURE__*/React.createElement(FocusManagerContext.Provider, {
    value: contextValue
  }, children);
};
export default FocusManager;