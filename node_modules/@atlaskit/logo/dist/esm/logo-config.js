import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
var _excluded = ["size", "shouldUseNewLogoDesign"],
  _excluded2 = ["size", "shouldUseNewLogoDesign"],
  _excluded3 = ["size"];
import React from 'react';
import { fg } from '@atlaskit/platform-feature-flags';
/**
 * Creates a feature flagged component that renders the legacy logo or the new logo
 * based on the platform-logo-rebrand feature flag.
 *
 * @param LegacyComponent - The legacy logo component.
 * @param NewComponent - The new logo component.
 * @returns A feature flagged component that renders the legacy logo or the new logo.
 */
export var createFeatureFlaggedComponent = function createFeatureFlaggedComponent(LegacyComponent, NewComponent) {
  // Note: textColor and iconColor aren't supported on all new logos
  // These props will be deprecated in the future
  return function (_ref) {
    var size = _ref.size,
      shouldUseNewLogoDesign = _ref.shouldUseNewLogoDesign,
      props = _objectWithoutProperties(_ref, _excluded);
    if (fg('platform-logo-rebrand') || shouldUseNewLogoDesign) {
      // Size defaults need to be set, as the temp library had different defaults
      return /*#__PURE__*/React.createElement(NewComponent, _extends({
        size: size || 'medium'
      }, props));
    }
    return /*#__PURE__*/React.createElement(LegacyComponent, _extends({
      size: size
    }, props));
  };
};

/**
 * Creates a feature flagged component that renders the legacy logo or the new logo
 * based on the platform-logo-rebrand-servco or platform-logo-rebrand feature flag.
 *
 * @param LegacyComponent - The legacy logo component.
 * @param NewComponent - The new logo component.
 * @returns A feature flagged component that renders the legacy logo or the new logo.
 */
export var createFeatureFlaggedServiceCollectionComponent = function createFeatureFlaggedServiceCollectionComponent(LegacyComponent, NewComponent) {
  // Note: textColor and iconColor aren't supported on all new logos
  // These props will be deprecated in the future
  return function (_ref2) {
    var size = _ref2.size,
      shouldUseNewLogoDesign = _ref2.shouldUseNewLogoDesign,
      props = _objectWithoutProperties(_ref2, _excluded2);
    if (fg('platform-logo-rebrand-servco') || fg('platform-logo-rebrand') || shouldUseNewLogoDesign) {
      // Size defaults need to be set, as the temp library had different defaults
      return /*#__PURE__*/React.createElement(NewComponent, _extends({
        size: size || 'medium'
      }, props));
    }
    return /*#__PURE__*/React.createElement(LegacyComponent, _extends({
      size: size
    }, props));
  };
};

/**
 * Creates a wrapper around the new logo or icon component to ensure it receives the correct default (medium) size prop.
 *
 * @param NewComponent - The new logo or icon component.
 */
export var tempSizeWrapper = function tempSizeWrapper(NewComponent) {
  return function (_ref3) {
    var size = _ref3.size,
      props = _objectWithoutProperties(_ref3, _excluded3);
    return /*#__PURE__*/React.createElement(NewComponent, _extends({
      size: size || 'medium'
    }, props));
  };
};
export var logoDocsSchema = [
// Program logos
{
  name: 'atlassian',
  type: 'legacy',
  category: 'program'
}, {
  name: 'atlassian-access',
  type: 'legacy',
  category: 'program'
}, {
  name: 'atlassian-marketplace',
  type: 'legacy',
  category: 'program'
},
// Home collection
{
  name: 'home',
  type: 'new',
  category: 'app'
}, {
  name: 'hub',
  type: 'new',
  category: 'app'
},
// Teamwork collection
{
  name: 'confluence',
  type: 'migration',
  category: 'app'
}, {
  name: 'jira',
  type: 'migration',
  category: 'app'
}, {
  name: 'loom',
  type: 'migration',
  category: 'app'
}, {
  name: 'loom-blurple',
  type: 'new',
  category: 'app',
  skipExample: true
}, {
  name: 'loom-attribution',
  type: 'migration',
  category: 'app'
}, {
  name: 'rovo',
  type: 'migration',
  category: 'app'
},
// Strategy collection
{
  name: 'align',
  type: 'new',
  category: 'app'
}, {
  name: 'focus',
  type: 'migration',
  category: 'app'
}, {
  name: 'talent',
  type: 'new',
  category: 'app'
},
// App collection
{
  name: 'jira-product-discovery',
  type: 'migration',
  category: 'app'
},
// Dev collection
{
  name: 'bitbucket',
  type: 'migration',
  category: 'app'
}, {
  name: 'compass',
  type: 'migration',
  category: 'app'
},
// Customer collection
{
  name: 'jira-service-management',
  type: 'migration',
  category: 'app'
}, {
  name: 'assets',
  type: 'new',
  category: 'app'
}, {
  name: 'customer-service-management',
  type: 'new',
  category: 'app'
}, {
  name: 'opsgenie',
  type: 'migration',
  category: 'app'
}, {
  name: 'statuspage',
  type: 'migration',
  category: 'app'
}, {
  name: 'trello',
  type: 'migration',
  category: 'app'
},
// Platform Collection
{
  name: 'admin',
  type: 'new',
  category: 'app'
}, {
  name: 'analytics',
  type: 'new',
  category: 'app'
}, {
  name: 'chat',
  type: 'new',
  category: 'app'
}, {
  name: 'goals',
  type: 'new',
  category: 'app'
}, {
  name: 'guard',
  type: 'migration',
  category: 'app'
}, {
  name: 'projects',
  type: 'new',
  category: 'app'
}, {
  name: 'search',
  type: 'new',
  category: 'app'
}, {
  name: 'studio',
  type: 'new',
  category: 'app'
}, {
  name: 'teams',
  type: 'new',
  category: 'app'
},
// Data Center
{
  name: 'jira-data-center',
  type: 'new',
  category: 'app'
}, {
  name: 'jira-service-management-data-center',
  type: 'new',
  category: 'app'
}, {
  name: 'confluence-data-center',
  type: 'new',
  category: 'app'
}, {
  name: 'bitbucket-data-center',
  type: 'new',
  category: 'app'
}, {
  name: 'bamboo',
  type: 'new',
  category: 'app'
}, {
  name: 'crowd',
  type: 'new',
  category: 'app'
},
// Deprecated
{
  name: 'atlassian-administration',
  type: 'legacy',
  category: 'app',
  skipExample: true,
  deprecated: true
}, {
  name: 'atlassian-admin',
  type: 'legacy',
  category: 'app',
  skipExample: true,
  deprecated: true
}, {
  name: 'atlassian-analytics',
  type: 'legacy',
  category: 'app',
  skipExample: true,
  deprecated: true
}, {
  name: 'atlas',
  type: 'legacy',
  category: 'app',
  skipExample: true,
  deprecated: true
}, {
  name: 'jira-align',
  type: 'legacy',
  category: 'app',
  skipExample: true,
  deprecated: true
}, {
  name: 'jira-software',
  type: 'legacy',
  category: 'app',
  skipExample: true,
  deprecated: true
}, {
  name: 'jira-work-management',
  type: 'legacy',
  category: 'app',
  skipExample: true,
  deprecated: true
}];
export var PROGRAM_LOGO_DOCS_ORDER = logoDocsSchema.filter(function (logo) {
  return logo.category === 'program' && !logo.skipExample;
}).map(function (logo) {
  return logo.name;
});
export var APP_LOGO_DOCS_ORDER = logoDocsSchema.filter(function (logo) {
  return logo.category === 'app' && !logo.skipExample;
}).map(function (logo) {
  return logo.name;
});
export var LEGACY_ONLY_LOGOS = logoDocsSchema.filter(function (logo) {
  return logo.type === 'legacy';
});
export var SHARED_LOGOS = logoDocsSchema.filter(function (logo) {
  return logo.type === 'migration';
});
export var NEW_ONLY_LOGOS = logoDocsSchema.filter(function (logo) {
  return logo.type === 'new';
});