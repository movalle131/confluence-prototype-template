/* icon-wrapper.tsx generated by @compiled/babel-plugin v0.36.1 */
"use strict";

var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.IconWrapper = IconWrapper;
require("./icon-wrapper.compiled.css");
var React = _interopRequireWildcard(require("react"));
var _runtime = require("@compiled/react/runtime");
var _tokens = require("@atlaskit/tokens");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != _typeof(e) && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
var styles = {
  root: "_1e0c1o8l"
};

/* eslint-disable @atlaskit/ui-styling-standard/no-imported-style-values */
/* eslint-disable @atlaskit/ui-styling-standard/no-unsafe-values */
var cloudLightAppearanceMap = {
  brand: "_1b3i18uv _9aea18uv",
  neutral: "_1b3i1e01 _9aea1fkg",
  inverse: "_1b3i5a6q _9aeau67f",
  legacy: "_1b3iu67f _9aeadoyu"
};

/* eslint-disable @atlaskit/ui-styling-standard/no-imported-style-values */
/* eslint-disable @atlaskit/ui-styling-standard/no-unsafe-values */
var cloudDarkAppearanceMap = {
  brand: "_1b3i18uv _9aea18uv",
  neutral: "_1b3i1gvk _9aea8hz0",
  inverse: "_1b3iu67f _9aea5a6q",
  legacy: "_1b3iu67f _9aeadoyu"
};

/* eslint-disable @atlaskit/ui-styling-standard/no-imported-style-values */
/* eslint-disable @atlaskit/ui-styling-standard/no-unsafe-values */
var dataCenterLightAppearanceMap = {
  brand: "_1b3idoyu _9aeau67f _3wu01fkg",
  neutral: "_1b3i1e01 _9aea1fkg _3wu01e01",
  inverse: "_1b3iu67f _9aeaqlpt _3wu0u67f",
  legacy: "_1b3idoyu _9aeau67f _3wu01fkg"
};

/* eslint-disable @atlaskit/ui-styling-standard/no-imported-style-values */
/* eslint-disable @atlaskit/ui-styling-standard/no-unsafe-values */
var dataCenterDarkAppearanceMap = {
  brand: "_1b3idoyu _9aeaqlpt _3wu08hz0",
  neutral: "_1b3i1gvk _9aea8hz0 _3wu01gvk",
  inverse: "_1b3i1501 _9aeau67f _3wu01501",
  legacy: "_1b3idoyu _9aeaqlpt _3wu08hz0"
};

/* eslint-enable @atlaskit/ui-styling-standard/no-imported-style-values */
/* eslint-enable @atlaskit/ui-styling-standard/no-unsafe-values */
var sizeMap = {
  xxsmall: "_4t3i7vkz",
  xsmall: "_4t3igktf",
  small: "_4t3i1tcg",
  medium: "_4t3izwfg",
  large: "_4t3i1ylp",
  xlarge: "_4t3ickbl",
  '12': "_4t3i1crf",
  '16': "_4t3i7vkz",
  '20': "_4t3igktf",
  '24': "_4t3i1tcg",
  '32': "_4t3izwfg"
};
function IconWrapper(_ref) {
  var _ref$size = _ref.size,
    size = _ref$size === void 0 ? '20' : _ref$size,
    label = _ref.label,
    svg = _ref.svg,
    customThemeSvg = _ref.customThemeSvg,
    userDefinedTestId = _ref.testId,
    _ref$appearance = _ref.appearance,
    appearance = _ref$appearance === void 0 ? 'brand' : _ref$appearance,
    customIconColor = _ref.iconColor,
    _ref$isDataCenter = _ref.isDataCenter,
    isDataCenter = _ref$isDataCenter === void 0 ? false : _ref$isDataCenter;
  var testId = userDefinedTestId && "".concat(userDefinedTestId, "--wrapper");
  var isCustomThemed = customThemeSvg && customIconColor;
  var _useThemeObserver = (0, _tokens.useThemeObserver)(),
    colorMode = _useThemeObserver.colorMode;
  return /*#__PURE__*/React.createElement("span", {
    "data-testid": testId,
    style: {
      // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values
      '--themed-icon-color': customIconColor || 'initial'
    }
    // If the label is provided an empty string, we want to remove the element from the accessibility tree.
    ,
    "aria-label": label ? label : undefined,
    role: label ? 'img' : undefined,
    "aria-hidden": label === '' ? true : undefined
    // We are using dangerouslySetInnerHTML here to tell React not to track changes to the SVG elements.
    // This is because the SVG elements are static and will not change, so we get a little performance benefit by
    // bypassing React.
    ,
    dangerouslySetInnerHTML: {
      __html: isCustomThemed ? customThemeSvg : svg
    },
    className: (0, _runtime.ax)([styles.root, sizeMap[size], isDataCenter ? colorMode === 'dark' ? dataCenterDarkAppearanceMap[appearance] : dataCenterLightAppearanceMap[appearance] : colorMode === 'dark' ? cloudDarkAppearanceMap[appearance] : cloudLightAppearanceMap[appearance]])
  });
}