import {
  button_item_default,
  custom_item_default,
  link_item_default,
  menu_group_default,
  section_default,
  useFocus
} from "./chunk-PBD27LP4.js";
import {
  esm_default
} from "./chunk-JWOAWYER.js";
import "./chunk-NIAVOAE6.js";
import "./chunk-6X5WLL3E.js";
import {
  avatar_default
} from "./chunk-YQENXFTL.js";
import "./chunk-OV5XYLC3.js";
import "./chunk-CBXLYWMJ.js";
import "./chunk-ZJT24HX4.js";
import {
  KEY_DOWN,
  KEY_END,
  KEY_HOME,
  KEY_UP,
  tooltip_default
} from "./chunk-PA42JLCQ.js";
import "./chunk-CU24BLAG.js";
import "./chunk-GSLSGJXD.js";
import "./chunk-TSADYF5T.js";
import "./chunk-SKNBEIPO.js";
import "./chunk-PUGER6BV.js";
import "./chunk-XUSVWCLU.js";
import "./chunk-73JC3HDI.js";
import {
  noop
} from "./chunk-LRKC55FU.js";
import "./chunk-WD223FES.js";
import "./chunk-ZP3ZNAZP.js";
import "./chunk-YQ5BCTVV.js";
import {
  mergeRefs
} from "./chunk-HDYTRULV.js";
import "./chunk-CM4DOMEY.js";
import "./chunk-ON37A5TK.js";
import {
  _extends,
  init_extends
} from "./chunk-TRLI7EVB.js";
import {
  ax,
  init_runtime
} from "./chunk-XC7QRLB3.js";
import "./chunk-3OAEFRLB.js";
import {
  require_dist
} from "./chunk-4XFTJAYZ.js";
import "./chunk-YLRLJMD7.js";
import "./chunk-ATF5PCW4.js";
import "./chunk-RG5U4ZYV.js";
import {
  _defineProperty,
  _objectWithoutProperties,
  _slicedToArray,
  fg,
  init_defineProperty,
  init_esm,
  init_objectWithoutProperties,
  init_slicedToArray
} from "./chunk-WFA677R7.js";
import {
  require_react
} from "./chunk-QJTFJ6OV.js";
import {
  __toESM
} from "./chunk-V4OQ3NZ2.js";

// node_modules/@atlaskit/avatar-group/dist/esm/components/avatar-group.js
init_objectWithoutProperties();
init_slicedToArray();
init_extends();
init_defineProperty();
var import_react8 = __toESM(require_react());
var import_bind_event_listener2 = __toESM(require_dist());

// node_modules/@atlaskit/avatar-group/dist/esm/components/avatar-group-item.js
init_extends();
init_objectWithoutProperties();
var import_react3 = __toESM(require_react());

// node_modules/@atlaskit/avatar-group/dist/esm/components/internal/hooks/use-register-item-with-focus-manager.js
var import_react2 = __toESM(require_react());

// node_modules/@atlaskit/avatar-group/dist/esm/components/internal/components/focus-manager.js
var import_react = __toESM(require_react());
var import_bind_event_listener = __toESM(require_dist());

// node_modules/@atlaskit/avatar-group/dist/esm/components/internal/utiles/handle-focus.js
init_defineProperty();
var actionMap = _defineProperty(_defineProperty(_defineProperty(_defineProperty({}, KEY_DOWN, "next"), KEY_UP, "prev"), KEY_HOME, "first"), KEY_END, "last");
var getNextFocusableElement = function getNextFocusableElement2(refs, currentFocusedIdx) {
  while (currentFocusedIdx + 1 < refs.length) {
    var isDisabled = refs[currentFocusedIdx + 1].getAttribute("disabled") !== null;
    if (!isDisabled) {
      return refs[currentFocusedIdx + 1];
    }
    currentFocusedIdx++;
  }
};
var getPrevFocusableElement = function getPrevFocusableElement2(refs, currentFocusedIdx) {
  while (currentFocusedIdx > 0) {
    var isDisabled = refs[currentFocusedIdx - 1].getAttribute("disabled") !== null;
    if (!isDisabled) {
      return refs[currentFocusedIdx - 1];
    }
    currentFocusedIdx--;
  }
};
function handleFocus(refs) {
  return function(e) {
    var currentFocusedIdx = refs.findIndex(function(el) {
      var _document$activeEleme;
      return (_document$activeEleme = document.activeElement) === null || _document$activeEleme === void 0 ? void 0 : _document$activeEleme.isSameNode(el);
    });
    var action = actionMap[e.key];
    switch (action) {
      case "next":
        if (currentFocusedIdx < refs.length - 1) {
          e.preventDefault();
          var _nextFocusableElement = getNextFocusableElement(refs, currentFocusedIdx);
          _nextFocusableElement === null || _nextFocusableElement === void 0 || _nextFocusableElement.focus();
        }
        break;
      case "prev":
        if (currentFocusedIdx > 0) {
          e.preventDefault();
          var _prevFocusableElement = getPrevFocusableElement(refs, currentFocusedIdx);
          _prevFocusableElement === null || _prevFocusableElement === void 0 || _prevFocusableElement.focus();
        }
        break;
      case "first":
        e.preventDefault();
        var nextFocusableElement = getNextFocusableElement(refs, -1);
        nextFocusableElement === null || nextFocusableElement === void 0 || nextFocusableElement.focus();
        break;
      case "last":
        e.preventDefault();
        var prevFocusableElement = getPrevFocusableElement(refs, refs.length);
        prevFocusableElement === null || prevFocusableElement === void 0 || prevFocusableElement.focus();
        break;
      default:
        return;
    }
  };
}

// node_modules/@atlaskit/avatar-group/dist/esm/components/internal/components/focus-manager.js
var FocusManagerContext = (0, import_react.createContext)({
  menuItemRefs: [],
  registerRef: noop
});
var FocusManager = function FocusManager2(_ref) {
  var children = _ref.children;
  var menuItemRefs = (0, import_react.useRef)([]);
  var registerRef = (0, import_react.useCallback)(function(ref) {
    if (ref && !menuItemRefs.current.includes(ref)) {
      menuItemRefs.current.push(ref);
    }
  }, []);
  (0, import_react.useEffect)(function() {
    (0, import_bind_event_listener.bind)(window, {
      type: "keydown",
      listener: handleFocus(menuItemRefs.current)
    });
    var unbind = function unbind2() {
      (0, import_bind_event_listener.bind)(window, {
        type: "keydown",
        listener: handleFocus(menuItemRefs.current)
      });
    };
    return unbind;
  }, []);
  var contextValue = {
    menuItemRefs: menuItemRefs.current,
    registerRef
  };
  return import_react.default.createElement(FocusManagerContext.Provider, {
    value: contextValue
  }, children);
};
var focus_manager_default = FocusManager;

// node_modules/@atlaskit/avatar-group/dist/esm/components/internal/hooks/use-register-item-with-focus-manager.js
function useRegisterItemWithFocusManager() {
  var _useContext = (0, import_react2.useContext)(FocusManagerContext), registerRef = _useContext.registerRef;
  var itemRef = (0, import_react2.useRef)(null);
  (0, import_react2.useEffect)(function() {
    if (itemRef.current !== null) {
      registerRef(itemRef.current);
    }
  }, [registerRef]);
  return itemRef;
}
var use_register_item_with_focus_manager_default = useRegisterItemWithFocusManager;

// node_modules/@atlaskit/avatar-group/dist/esm/components/avatar-group-item.js
var _excluded = ["analyticsContext", "appearance", "as", "borderColor", "children", "href", "isDisabled", "key", "label", "name", "onClick", "presence", "size", "src", "stackIndex", "status", "tabIndex", "target", "testId"];
var _excluded2 = ["children", "className", "disabled", "draggable", "onClick", "onDragStart", "onMouseDown", "ref", "tabIndex", "data-testid"];
var AvatarGroupItem = (0, import_react3.forwardRef)(function(props, ref) {
  var avatar = props.avatar, index = props.index, onAvatarClick = props.onAvatarClick, testId = props.testId;
  var analyticsContext = avatar.analyticsContext, appearance = avatar.appearance, as = avatar.as, borderColor = avatar.borderColor, children = avatar.children, href = avatar.href, isDisabled = avatar.isDisabled, key = avatar.key, label = avatar.label, name = avatar.name, onClick = avatar.onClick, presence = avatar.presence, size = avatar.size, src = avatar.src, stackIndex = avatar.stackIndex, status = avatar.status, tabIndex = avatar.tabIndex, target = avatar.target, groupItemTestId = avatar.testId, rest = _objectWithoutProperties(avatar, _excluded);
  var itemRef = use_register_item_with_focus_manager_default();
  var CustomComponent = function CustomComponent2(_ref) {
    var children2 = _ref.children, className = _ref.className, disabled = _ref.disabled, draggable = _ref.draggable, onClick2 = _ref.onClick, onDragStart = _ref.onDragStart, onMouseDown = _ref.onMouseDown, ref2 = _ref.ref, tabIndex2 = _ref.tabIndex, testId2 = _ref["data-testid"], props2 = _objectWithoutProperties(_ref, _excluded2);
    return import_react3.default.createElement("button", _extends({
      type: "button",
      className,
      disabled,
      draggable,
      onClick: onClick2,
      onDragStart,
      onMouseDown,
      ref: ref2,
      tabIndex: tabIndex2,
      "data-testid": testId2
      // eslint-disable-next-line @repo/internal/react/no-unsafe-spread-props
    }, props2), children2);
  };
  var AvatarIcon = import_react3.default.createElement(avatar_default, _extends({}, rest, {
    analyticsContext,
    appearance,
    as,
    borderColor: "transparent",
    children,
    isDisabled,
    label,
    name: "",
    presence,
    size: "small",
    src,
    stackIndex,
    status,
    tabIndex,
    testId: testId && "".concat(testId, "--avatar")
  }));
  var callback = onClick || onAvatarClick;
  if (href) {
    return import_react3.default.createElement(link_item_default, {
      ref: mergeRefs([ref, itemRef]),
      href,
      target,
      rel: target === "_blank" ? "noopener noreferrer" : void 0,
      iconBefore: AvatarIcon,
      testId,
      onClick: function onClick2(event) {
        return callback && callback(event, void 0, index);
      }
    }, name);
  }
  if (typeof callback === "function") {
    return import_react3.default.createElement(button_item_default, {
      ref: mergeRefs([ref, itemRef]),
      onClick: function onClick2(event) {
        return callback && callback(event, void 0, index);
      },
      iconBefore: AvatarIcon,
      testId
    }, name);
  }
  return import_react3.default.createElement(custom_item_default, {
    iconBefore: AvatarIcon,
    component: CustomComponent,
    testId
  }, name);
});
var avatar_group_item_default = AvatarGroupItem;

// node_modules/@atlaskit/avatar-group/dist/esm/components/grid.js
var React3 = __toESM(require_react());
init_runtime();
var import_react4 = __toESM(require_react());
init_esm();
import "/Users/movalle/Documents/GitHub/test-enhanced-app/node_modules/@atlaskit/avatar-group/dist/esm/components/grid.compiled.css";
var Grid = function Grid2(_ref) {
  var children = _ref.children, testId = _ref.testId, label = _ref["aria-label"];
  return React3.createElement("ul", {
    "data-testid": testId,
    "aria-label": label,
    className: ax(["_1e0c1txw _1bah1y6m _1n261g80 _19121cl4 _vwz4kb7n _2mzuagmp _6rthze3t _1pfhze3t _12l2r5cr _ahbqr5cr _85i5ze3t _1q51ze3t _y4tize3t _bozgze3t", fg("platform-avatar-group-spacing-fix") && "_6rth1b66 _y4tiv77o _bozgv77o"])
  }, import_react4.Children.map(children, function(child) {
    return child && React3.createElement("li", {
      className: ax(["_6rthu2gc _1pfhze3t _12l2ze3t _ahbqze3t _y4ti1b66 _bozg1b66"])
    }, child);
  }));
};
var grid_default = Grid;

// node_modules/@atlaskit/avatar-group/dist/esm/components/internal/components/popup-avatar-group.js
init_extends();
init_objectWithoutProperties();
var import_react5 = __toESM(require_react());
var _excluded3 = ["children", "isLoading", "maxHeight", "maxWidth", "minHeight", "minWidth", "onClick", "role", "setInitialFocusRef", "spacing", "testId"];
var PopupAvatarGroup = function PopupAvatarGroup2(_ref) {
  var children = _ref.children, isLoading = _ref.isLoading, maxHeight = _ref.maxHeight, _ref$maxWidth = _ref.maxWidth, maxWidth = _ref$maxWidth === void 0 ? 800 : _ref$maxWidth, minHeight = _ref.minHeight, _ref$minWidth = _ref.minWidth, minWidth = _ref$minWidth === void 0 ? 320 : _ref$minWidth, onClick = _ref.onClick, role = _ref.role, setInitialFocusRef = _ref.setInitialFocusRef, spacing = _ref.spacing, testId = _ref.testId, rest = _objectWithoutProperties(_ref, _excluded3);
  var _useContext = (0, import_react5.useContext)(FocusManagerContext), menuItemRefs = _useContext.menuItemRefs;
  (0, import_react5.useEffect)(function() {
    setInitialFocusRef === null || setInitialFocusRef === void 0 || setInitialFocusRef(menuItemRefs[0]);
  }, [menuItemRefs, setInitialFocusRef]);
  return import_react5.default.createElement(menu_group_default, _extends({
    isLoading,
    maxHeight,
    maxWidth,
    minHeight,
    minWidth,
    onClick,
    role,
    spacing,
    testId
    // eslint-disable-next-line @repo/internal/react/no-unsafe-spread-props
  }, rest), children);
};
var popup_avatar_group_default = PopupAvatarGroup;

// node_modules/@atlaskit/avatar-group/dist/esm/components/more-indicator.js
init_extends();
init_defineProperty();
var React5 = __toESM(require_react());
init_runtime();
var import_react6 = __toESM(require_react());
init_esm();
import "/Users/movalle/Documents/GitHub/test-enhanced-app/node_modules/@atlaskit/avatar-group/dist/esm/components/more-indicator.compiled.css";
var boxShadowCssVar = "--avatar-box-shadow";
var styles = {
  root: "_19itglyw _12ji1r31 _1qu2glyw _12y31o36 _1reo15vq _18m915vq _v564ieh6 _1e0c1txw _vchh1ntv _19pkv77o _2hwxv77o _otyrv77o _18u0v77o _ca0qze3t _u5f3ze3t _n3tdze3t _19bvze3t _4cvr1fhb _1bah1h6o _2lx21bp4 _80omtlke _bfhkm7j4 _syaz1fxt _16qs1nhn _t9ec1aqe _1ejjglyw _mizu194a _ra3xnqa1 _1ah3yh40 _128myh40 _irr315ej _30l31fxt _1di6ip91 _9h8h1fxt _1q8w1np6 _jlxit94y",
  circle: "_2rko1q5u",
  active: "_bfhkfg4m _16qsqz53 _syazaqb7 _t9ec1np6 _irr3i1yw _30l3aqb7 _1di619ru _9h8haqb7",
  disabled: "_80om13gf _1peqs237 _1hfkvuon"
};
var widthHeightMap = {
  xsmall: "_1bsb7vkz _4t3i7vkz",
  small: "_1bsb1tcg _4t3i1tcg",
  medium: "_1bsbzwfg _4t3izwfg",
  large: "_1bsb1ylp _4t3i1ylp",
  xlarge: "_1bsb16xz _4t3i16xz",
  xxlarge: "_1bsb1qr7 _4t3i1qr7"
};
var borderRadiusMap = {
  xsmall: "_2rkogqwt _14mjgqwt",
  small: "_2rkogqwt _14mjgqwt",
  medium: "_2rkosqtm _14mjsqtm",
  large: "_2rkosqtm _14mjsqtm",
  xlarge: "_2rkoi2wt _14mji2wt",
  xxlarge: "_2rkob7nn _14mjb7nn"
};
var fontMap = {
  small: "_11c81o8v",
  medium: "_11c81o8v",
  large: "_11c8dcr7",
  xlarge: "_11c81ixg",
  xxlarge: "_11c81ixg"
};
var MAX_DISPLAY_COUNT = 99;
var MoreIndicator = (0, import_react6.forwardRef)(function(_ref, ref) {
  var _ref$appearance = _ref.appearance, appearance = _ref$appearance === void 0 ? "circle" : _ref$appearance, _ref$borderColor = _ref.borderColor, borderColor = _ref$borderColor === void 0 ? fg("platform-component-visual-refresh") ? "var(--ds-surface, #FFFFFF)" : "var(--ds-border-inverse, #FFFFFF)" : _ref$borderColor, _ref$size = _ref.size, size = _ref$size === void 0 ? "medium" : _ref$size, _ref$count = _ref.count, count = _ref$count === void 0 ? 0 : _ref$count, testId = _ref.testId, onClick = _ref.onClick, ariaControls = _ref["aria-controls"], ariaExpanded = _ref["aria-expanded"], ariaHaspopup = _ref["aria-haspopup"], moreIndicatorLabel = _ref.moreIndicatorLabel, _ref$buttonProps = _ref.buttonProps, buttonProps = _ref$buttonProps === void 0 ? {} : _ref$buttonProps, isActive = _ref.isActive;
  var onClickHander = (0, import_react6.useCallback)(
    function(event, analyticsEvent) {
      if (buttonProps.onClick) {
        buttonProps.onClick(event);
      }
      onClick(event, analyticsEvent);
    },
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [buttonProps.onClick, onClick]
  );
  var displayCount = count > MAX_DISPLAY_COUNT ? MAX_DISPLAY_COUNT : count;
  var providedAriaLabel = moreIndicatorLabel || buttonProps["aria-label"];
  var ariaLabel = providedAriaLabel ? providedAriaLabel : "".concat(displayCount, " more people");
  return React5.createElement("button", _extends({
    type: "submit"
  }, buttonProps, {
    onClick: onClickHander,
    ref,
    "data-testid": testId,
    "aria-controls": ariaControls,
    "aria-expanded": ariaExpanded,
    "aria-haspopup": ariaHaspopup,
    "aria-label": ariaLabel,
    style: _defineProperty({}, boxShadowCssVar, "0 0 0 2px ".concat(borderColor)),
    className: ax([styles.root, borderRadiusMap[size], appearance === "circle" && styles.circle, widthHeightMap[size], fontMap[size], isActive && styles.active])
  }), "+", displayCount);
});
MoreIndicator.displayName = "MoreIndicator";
var more_indicator_default = MoreIndicator;

// node_modules/@atlaskit/avatar-group/dist/esm/components/stack.js
var React6 = __toESM(require_react());
init_runtime();
var import_react7 = __toESM(require_react());
init_esm();
import "/Users/movalle/Documents/GitHub/test-enhanced-app/node_modules/@atlaskit/avatar-group/dist/esm/components/stack.compiled.css";
var Stack = function Stack2(_ref) {
  var children = _ref.children, testId = _ref.testId, label = _ref["aria-label"], size = _ref.size;
  return React6.createElement("ul", {
    "data-testid": testId,
    "aria-label": label,
    className: ax(["_1e0c1txw _19121cl4 _vwz4kb7n _2mzuagmp _6rthze3t _1pfhze3t _12l2u2gc _ahbqze3t _85i5ze3t _1q51ze3t _y4tize3t _bozgze3t", size === "small" && fg("platform-avatar-group-spacing-fix") && "_12l21b66"])
  }, import_react7.Children.map(children, function(child) {
    return child && React6.createElement("li", {
      className: ax(["_6rthze3t _1pfhze3t _12l2x0bf _ahbqze3t", size === "small" && fg("platform-avatar-group-spacing-fix") && "_12l2r5cr"])
    }, child);
  }));
};
var stack_default = Stack;

// node_modules/@atlaskit/avatar-group/dist/esm/components/utils.js
var composeUniqueKey = function composeUniqueKey2(props, index) {
  if (props.key) {
    return props.key;
  }
  return index;
};

// node_modules/@atlaskit/avatar-group/dist/esm/components/avatar-group.js
var _excluded4 = ["aria-controls", "aria-expanded", "aria-haspopup", "onClick"];
function ownKeys(e, r) {
  var t = Object.keys(e);
  if (Object.getOwnPropertySymbols) {
    var o = Object.getOwnPropertySymbols(e);
    r && (o = o.filter(function(r2) {
      return Object.getOwnPropertyDescriptor(e, r2).enumerable;
    })), t.push.apply(t, o);
  }
  return t;
}
function _objectSpread(e) {
  for (var r = 1; r < arguments.length; r++) {
    var t = null != arguments[r] ? arguments[r] : {};
    r % 2 ? ownKeys(Object(t), true).forEach(function(r2) {
      _defineProperty(e, r2, t[r2]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function(r2) {
      Object.defineProperty(e, r2, Object.getOwnPropertyDescriptor(t, r2));
    });
  }
  return e;
}
var MAX_COUNT = {
  grid: 11,
  stack: 5
};
function getOverrides(overrides) {
  return {
    AvatarGroupItem: _objectSpread({
      render: function render(Component, props, index) {
        return import_react8.default.createElement(Component, _extends({}, props, {
          key: composeUniqueKey(props.avatar, index)
        }));
      }
    }, overrides && overrides.AvatarGroupItem),
    Avatar: _objectSpread({
      render: function render(Component, props, index) {
        return import_react8.default.createElement(Component, _extends({}, props, {
          key: composeUniqueKey(props, index)
        }));
      }
    }, overrides && overrides.Avatar),
    MoreIndicator: _objectSpread({
      render: function render(Component, props) {
        return import_react8.default.createElement(Component, props);
      }
    }, overrides && overrides.MoreIndicator)
  };
}
var AvatarGroup = function AvatarGroup2(_ref) {
  var _ref$appearance = _ref.appearance, appearance = _ref$appearance === void 0 ? "stack" : _ref$appearance, _ref$avatar = _ref.avatar, avatar = _ref$avatar === void 0 ? avatar_default : _ref$avatar, borderColor = _ref.borderColor, boundariesElement = _ref.boundariesElement, data = _ref.data, isTooltipDisabled = _ref.isTooltipDisabled, maxCount = _ref.maxCount, onAvatarClick = _ref.onAvatarClick, onMoreClick = _ref.onMoreClick, overrides = _ref.overrides, _ref$showMoreButtonPr = _ref.showMoreButtonProps, showMoreButtonProps = _ref$showMoreButtonPr === void 0 ? {} : _ref$showMoreButtonPr, _ref$size = _ref.size, size = _ref$size === void 0 ? "medium" : _ref$size, testId = _ref.testId, _ref$label = _ref.label, label = _ref$label === void 0 ? "avatar group" : _ref$label, moreIndicatorLabel = _ref.moreIndicatorLabel, _ref$tooltipPosition = _ref.tooltipPosition, tooltipPosition = _ref$tooltipPosition === void 0 ? "bottom" : _ref$tooltipPosition, _ref$shouldPopupRende = _ref.shouldPopupRenderToParent, shouldPopupRenderToParent = _ref$shouldPopupRende === void 0 ? false : _ref$shouldPopupRende;
  var _useState = (0, import_react8.useState)(false), _useState2 = _slicedToArray(_useState, 2), isTriggeredUsingKeyboard = _useState2[0], setTriggeredUsingKeyboard = _useState2[1];
  var _useState3 = (0, import_react8.useState)(false), _useState4 = _slicedToArray(_useState3, 2), isOpen = _useState4[0], setIsOpen = _useState4[1];
  var onClose = (0, import_react8.useCallback)(function() {
    return setIsOpen(false);
  }, []);
  var handleTriggerClicked = (0, import_react8.useCallback)(function(event) {
    var _ref2 = event, clientX = _ref2.clientX, clientY = _ref2.clientY, type = _ref2.type;
    if (type === "keydown" || clientX === 0 || clientY === 0) {
      setTriggeredUsingKeyboard(true);
    }
    setIsOpen(function(isOpen2) {
      return !isOpen2;
    });
  }, []);
  var _useFocus = useFocus(), isFocused = _useFocus.isFocused, bindFocus = _useFocus.bindFocus;
  (0, import_react8.useEffect)(function() {
    if (!isOpen) {
      setTriggeredUsingKeyboard(false);
    }
    if (!isFocused) {
      return noop;
    }
    if (isOpen) {
      return noop;
    }
    (0, import_bind_event_listener2.bind)(window, {
      type: "keydown",
      listener: function openOnKeyDown(e) {
        if (e.key === KEY_DOWN) {
          e.preventDefault();
          handleTriggerClicked(e);
        }
      }
    });
    var unbind = function unbind2() {
      (0, import_bind_event_listener2.bind)(window, {
        type: "keydown",
        listener: function openOnKeyDown(e) {
          if (e.key === KEY_DOWN) {
            e.preventDefault();
            handleTriggerClicked(e);
          }
        }
      });
    };
    return unbind;
  }, [isFocused, isOpen, handleTriggerClicked]);
  function renderMoreDropdown(max2, total2) {
    if (total2 <= max2) {
      return null;
    }
    var renderMoreButton = function renderMoreButton2(_ref3) {
      var ariaControls = _ref3["aria-controls"], ariaExpanded = _ref3["aria-expanded"], ariaHasPopup = _ref3["aria-haspopup"], onClick = _ref3.onClick, props = _objectWithoutProperties(_ref3, _excluded4);
      return getOverrides(overrides).MoreIndicator.render(more_indicator_default, _objectSpread({
        buttonProps: showMoreButtonProps,
        borderColor,
        count: total2 - max2,
        size,
        testId: testId && "".concat(testId, "--overflow-menu--trigger"),
        isActive: isOpen,
        moreIndicatorLabel,
        "aria-controls": ariaControls,
        "aria-expanded": ariaExpanded,
        "aria-haspopup": ariaHasPopup,
        onClick
      }, props));
    };
    if (typeof onMoreClick === "function") {
      return renderMoreButton({
        onClick: onMoreClick
      });
    }
    var boundary = boundariesElement === "scrollParent" ? "clippingParents" : void 0;
    var rootBoundary = (function() {
      if (boundariesElement === "scrollParent") {
        return void 0;
      }
      return boundariesElement === "window" ? "document" : "viewport";
    })();
    return import_react8.default.createElement(esm_default, {
      isOpen,
      onClose,
      placement: "bottom-end",
      boundary,
      rootBoundary,
      shouldFlip: true,
      zIndex: 510,
      shouldRenderToParent: shouldPopupRenderToParent,
      content: function content(_ref4) {
        var setInitialFocusRef = _ref4.setInitialFocusRef;
        return import_react8.default.createElement(focus_manager_default, null, import_react8.default.createElement(popup_avatar_group_default, {
          onClick: function onClick(e) {
            return e.stopPropagation();
          },
          minWidth: 250,
          maxHeight: 300,
          setInitialFocusRef: isTriggeredUsingKeyboard ? setInitialFocusRef : void 0
        }, import_react8.default.createElement(section_default, null, data.slice(max2).map(function(avatar2, index) {
          return getOverrides(overrides).AvatarGroupItem.render(
            avatar_group_item_default,
            {
              avatar: avatar2,
              onAvatarClick,
              testId: testId && "".concat(testId, "--avatar-group-item-").concat(index + max2),
              index: index + max2
            },
            // This index holds the true index,
            // adding up the index of non-overflowed avatars and overflowed avatars.
            index + max2
          );
        }))));
      },
      trigger: function trigger(triggerProps) {
        return renderMoreButton(_objectSpread(_objectSpread(_objectSpread({}, triggerProps), bindFocus), {}, {
          onClick: handleTriggerClicked
        }));
      },
      testId: testId && "".concat(testId, "--overflow-menu")
    });
  }
  var max = maxCount === void 0 || maxCount === 0 ? MAX_COUNT[appearance] : maxCount;
  var total = data.length;
  var maxAvatar = total > max ? max - 1 : max;
  var Group = appearance === "stack" ? stack_default : grid_default;
  return import_react8.default.createElement(Group, {
    testId: testId && "".concat(testId, "--avatar-group"),
    "aria-label": label,
    size
  }, data.slice(0, maxAvatar).map(function(avatarData, idx) {
    var callback = avatarData.onClick || onAvatarClick;
    var finalAvatar = getOverrides(overrides).Avatar.render(avatar, _objectSpread(_objectSpread({}, avatarData), {}, {
      size,
      borderColor: borderColor || avatarData.borderColor,
      testId: testId && "".concat(testId, "--avatar-").concat(idx),
      onClick: callback ? function(event, analyticsEvent) {
        callback(event, analyticsEvent, idx);
      } : void 0,
      stackIndex: max - idx
    }), idx);
    return !isTooltipDisabled && !avatarData.isDisabled ? import_react8.default.createElement(tooltip_default, {
      key: composeUniqueKey(avatarData, idx),
      content: avatarData.name,
      testId: testId && "".concat(testId, "--tooltip-").concat(idx),
      position: tooltipPosition
    }, finalAvatar) : finalAvatar;
  }), renderMoreDropdown(+maxAvatar, total));
};
var avatar_group_default = AvatarGroup;
export {
  avatar_group_default as default
};
//# sourceMappingURL=@atlaskit_avatar-group.js.map
