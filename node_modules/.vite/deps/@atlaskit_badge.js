import {
  text_default
} from "./chunk-PJFXQFKG.js";
import "./chunk-6XQKEE7I.js";
import "./chunk-PUGER6BV.js";
import "./chunk-XUSVWCLU.js";
import "./chunk-73JC3HDI.js";
import "./chunk-LRKC55FU.js";
import "./chunk-WD223FES.js";
import "./chunk-ZP3ZNAZP.js";
import "./chunk-ON37A5TK.js";
import "./chunk-TRLI7EVB.js";
import {
  ax,
  init_runtime
} from "./chunk-XC7QRLB3.js";
import "./chunk-3OAEFRLB.js";
import "./chunk-4XFTJAYZ.js";
import "./chunk-YLRLJMD7.js";
import "./chunk-ATF5PCW4.js";
import "./chunk-RG5U4ZYV.js";
import {
  fg,
  init_esm
} from "./chunk-WFA677R7.js";
import {
  require_react
} from "./chunk-QJTFJ6OV.js";
import {
  __toESM
} from "./chunk-V4OQ3NZ2.js";

// node_modules/@atlaskit/badge/dist/esm/badge.js
var React = __toESM(require_react());
init_runtime();
var import_react = __toESM(require_react());
init_esm();
import "/Users/movalle/Documents/GitHub/test-enhanced-app/node_modules/@atlaskit/badge/dist/esm/badge.compiled.css";

// node_modules/@atlaskit/badge/dist/esm/internal/utils.js
function getSafeValueWithNegativeSupport() {
  var value = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 0;
  var numericValue = +value;
  if (isNaN(numericValue)) {
    return value;
  }
  return numericValue;
}
function formatValueWithNegativeSupport(value, max) {
  var safeValue = getSafeValueWithNegativeSupport(value);
  var safeMax = getSafeValueWithNegativeSupport(max);
  var hasSafeMaxValue = false;
  if (max !== void 0) {
    hasSafeMaxValue = true;
  }
  if (safeMax === Infinity && safeValue === Infinity) {
    return "∞";
  }
  if (hasSafeMaxValue && safeMax < safeValue) {
    return "".concat(safeMax, "+");
  }
  if (safeValue === Infinity) {
    return "∞";
  }
  return safeValue.toString();
}
function getSafeValue() {
  var value = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 0;
  var numericValue = +value;
  if (numericValue < 0) {
    return 0;
  }
  return value;
}
function formatValue(value, max) {
  var safeValue = getSafeValue(value);
  var safeMax = getSafeValue(max);
  if (safeMax && safeMax < safeValue) {
    return "".concat(safeMax, "+");
  }
  if (safeValue === Infinity) {
    return "∞";
  }
  return safeValue.toString();
}

// node_modules/@atlaskit/badge/dist/esm/badge.js
var boxStyles = {
  root: "_2rkopd34 _18zr12x7 _1e0c116y _1o9zidpf _1kz6184x",
  added: "_bfhk1bay",
  default: "_bfhklecj",
  important: "_bfhk1v7l",
  primary: "_bfhkomb0",
  primaryInverted: "_bfhkvuon",
  removed: "_bfhktaeo"
};
var styles = {
  root: "_2rkogqwt _18zr1b66 _1e0c116y _vchhusvi _1ul91ejb _1bah1h6o _1o9zidpf _1kz6184x",
  added: "_bfhkmv6i _syaz1fxt",
  default: "_bfhk1fkg _syazwwip",
  important: "_bfhk1366 _syazwwip",
  primary: "_bfhk1ymo _syazwwip",
  primaryInverted: "_bfhkvuon _syaz1e6v",
  removed: "_bfhk1gly _syaz1fxt"
};
var badgeValueWithNegativeNumberSupported = function badgeValueWithNegativeNumberSupported2(children, max) {
  if (fg("platform_ken_2029_negative_numbers_badge")) {
    return typeof children === "number" && typeof max === "number" ? formatValueWithNegativeSupport(children, max) : children;
  }
  return typeof children === "number" && max ? formatValue(children, max) : children;
};
var Badge = (0, import_react.memo)(function Badge2(_ref) {
  var _ref$appearance = _ref.appearance, appearance = _ref$appearance === void 0 ? "default" : _ref$appearance, _ref$children = _ref.children, children = _ref$children === void 0 ? 0 : _ref$children, _ref$max = _ref.max, max = _ref$max === void 0 ? 99 : _ref$max, style = _ref.style, testId = _ref.testId;
  if (fg("platform-component-visual-refresh")) {
    return React.createElement("span", {
      "data-testid": testId,
      style: {
        background: style === null || style === void 0 ? void 0 : style.backgroundColor,
        color: style === null || style === void 0 ? void 0 : style.color
      },
      className: ax([styles.root, styles[appearance]])
    }, React.createElement(text_default, {
      size: "small",
      align: "center",
      color: "inherit"
    }, badgeValueWithNegativeNumberSupported(children, max)));
  }
  return React.createElement("span", {
    "data-testid": testId,
    style: {
      backgroundColor: style === null || style === void 0 ? void 0 : style.backgroundColor,
      color: style === null || style === void 0 ? void 0 : style.color
    },
    className: ax([boxStyles.root, boxStyles[appearance]])
  }, React.createElement(text_default, {
    size: "UNSAFE_small",
    align: "center",
    color: style !== null && style !== void 0 && style.color ? "inherit" : textColors[appearance]
  }, badgeValueWithNegativeNumberSupported(children, max)));
});
Badge.displayName = "Badge";
var badge_default = Badge;
var textColors = {
  added: "color.text.success",
  default: "color.text",
  important: "color.text.inverse",
  primary: "color.text.inverse",
  primaryInverted: "color.text.brand",
  removed: "color.text.danger"
};
export {
  badge_default as default
};
//# sourceMappingURL=@atlaskit_badge.js.map
