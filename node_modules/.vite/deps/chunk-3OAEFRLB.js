import {
  ThemeMutationObserver,
  get_global_theme_default,
  require_dist,
  set_global_theme_default
} from "./chunk-4XFTJAYZ.js";
import {
  _asyncToGenerator,
  _defineProperty,
  _slicedToArray,
  init_asyncToGenerator,
  init_defineProperty,
  init_slicedToArray,
  require_regenerator
} from "./chunk-WFA677R7.js";
import {
  require_react
} from "./chunk-QJTFJ6OV.js";
import {
  __toESM
} from "./chunk-V4OQ3NZ2.js";

// node_modules/@atlaskit/app-provider/dist/esm/app-provider.js
var import_react3 = __toESM(require_react());

// node_modules/@atlaskit/app-provider/dist/esm/router-link-provider/index.js
var import_react = __toESM(require_react());
var RouterLinkProviderContext = (0, import_react.createContext)({});
var RouterLinkProvider = function RouterLinkProvider2(_ref) {
  var routerLinkComponent = _ref.routerLinkComponent, children = _ref.children;
  return import_react.default.createElement(RouterLinkProviderContext.Provider, {
    value: {
      routerLinkComponent
    }
  }, children);
};
var router_link_provider_default = RouterLinkProvider;

// node_modules/@atlaskit/app-provider/dist/esm/theme-provider.js
init_asyncToGenerator();
init_defineProperty();
init_slicedToArray();
var import_regenerator = __toESM(require_regenerator());
var import_react2 = __toESM(require_react());
var import_bind_event_listener = __toESM(require_dist());
function ownKeys(e, r) {
  var t = Object.keys(e);
  if (Object.getOwnPropertySymbols) {
    var o = Object.getOwnPropertySymbols(e);
    r && (o = o.filter(function(r2) {
      return Object.getOwnPropertyDescriptor(e, r2).enumerable;
    })), t.push.apply(t, o);
  }
  return t;
}
function _objectSpread(e) {
  for (var r = 1; r < arguments.length; r++) {
    var t = null != arguments[r] ? arguments[r] : {};
    r % 2 ? ownKeys(Object(t), true).forEach(function(r2) {
      _defineProperty(e, r2, t[r2]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function(r2) {
      Object.defineProperty(e, r2, Object.getOwnPropertyDescriptor(t, r2));
    });
  }
  return e;
}
var defaultThemeSettings = function defaultThemeSettings2() {
  return {
    dark: "dark",
    light: "light",
    spacing: "spacing",
    typography: "typography"
  };
};
var ColorModeContext = (0, import_react2.createContext)(void 0);
var SetColorModeContext = (0, import_react2.createContext)(void 0);
var ThemeContext = (0, import_react2.createContext)(void 0);
var SetThemeContext = (0, import_react2.createContext)(void 0);
function UNSAFE_useColorModeForMigration() {
  var value = (0, import_react2.useContext)(ColorModeContext);
  return value;
}
function useColorMode() {
  var value = (0, import_react2.useContext)(ColorModeContext);
  var _getGlobalTheme = get_global_theme_default(), colorMode = _getGlobalTheme.colorMode;
  var _useState = (0, import_react2.useState)(colorMode || "light"), _useState2 = _slicedToArray(_useState, 2), resolvedColorMode = _useState2[0], setResolvedColorMode = _useState2[1];
  (0, import_react2.useEffect)(function() {
    if (value) {
      return;
    }
    var observer = new ThemeMutationObserver(function(theme) {
      setResolvedColorMode(theme.colorMode || "light");
    });
    observer.observe();
    return function() {
      return observer.disconnect();
    };
  }, [value]);
  return value ? value : resolvedColorMode;
}
function useSetColorMode() {
  var value = (0, import_react2.useContext)(SetColorModeContext);
  if (!value) {
    throw new Error("useSetColorMode must be used within AppProvider.");
  }
  return value;
}
function useTheme() {
  var theme = (0, import_react2.useContext)(ThemeContext);
  var _useState3 = (0, import_react2.useState)(theme || get_global_theme_default()), _useState4 = _slicedToArray(_useState3, 2), resolvedTheme = _useState4[0], setResolvedTheme = _useState4[1];
  (0, import_react2.useEffect)(function() {
    if (theme) {
      return;
    }
    var observer = new ThemeMutationObserver(setResolvedTheme);
    observer.observe();
    return function() {
      return observer.disconnect();
    };
  }, [theme]);
  return theme ? theme : resolvedTheme;
}
function useSetTheme() {
  var value = (0, import_react2.useContext)(SetThemeContext);
  if (!value) {
    throw new Error("useSetTheme must be used within AppProvider.");
  }
  return value;
}
var isMatchMediaAvailable = typeof window !== "undefined" && "matchMedia" in window;
var prefersDarkModeMql = isMatchMediaAvailable ? window.matchMedia("(prefers-color-scheme: dark)") : void 0;
function getReconciledColorMode(colorMode) {
  if (colorMode === "auto") {
    return prefersDarkModeMql !== null && prefersDarkModeMql !== void 0 && prefersDarkModeMql.matches ? "dark" : "light";
  }
  return colorMode;
}
function ThemeProvider(_ref) {
  var children = _ref.children, defaultColorMode = _ref.defaultColorMode, defaultTheme = _ref.defaultTheme;
  var _useState5 = (0, import_react2.useState)(defaultColorMode), _useState6 = _slicedToArray(_useState5, 2), chosenColorMode = _useState6[0], setChosenColorMode = _useState6[1];
  var _useState7 = (0, import_react2.useState)(getReconciledColorMode(defaultColorMode)), _useState8 = _slicedToArray(_useState7, 2), reconciledColorMode = _useState8[0], setReconciledColorMode = _useState8[1];
  var _useState9 = (0, import_react2.useState)(function() {
    return _objectSpread(_objectSpread({}, defaultThemeSettings()), defaultTheme);
  }), _useState0 = _slicedToArray(_useState9, 2), theme = _useState0[0], setTheme = _useState0[1];
  var setColorMode = (0, import_react2.useCallback)(function(colorMode) {
    setChosenColorMode(colorMode);
    setReconciledColorMode(getReconciledColorMode(colorMode));
  }, []);
  var setPartialTheme = (0, import_react2.useCallback)(function(nextTheme) {
    setTheme(function(theme2) {
      return _objectSpread(_objectSpread({}, theme2), nextTheme);
    });
  }, []);
  var lastSetGlobalThemePromiseRef = (0, import_react2.useRef)(null);
  (0, import_react2.useEffect)(function() {
    var cleanupLastFnCall = (function() {
      var _ref2 = _asyncToGenerator(import_regenerator.default.mark(function _callee() {
        var unbindFn;
        return import_regenerator.default.wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              if (!lastSetGlobalThemePromiseRef.current) {
                _context.next = 6;
                break;
              }
              _context.next = 3;
              return lastSetGlobalThemePromiseRef.current;
            case 3:
              unbindFn = _context.sent;
              unbindFn();
              lastSetGlobalThemePromiseRef.current = null;
            case 6:
            case "end":
              return _context.stop();
          }
        }, _callee);
      }));
      return function cleanupLastFnCall2() {
        return _ref2.apply(this, arguments);
      };
    })();
    var safelySetGlobalTheme = (function() {
      var _ref3 = _asyncToGenerator(import_regenerator.default.mark(function _callee2() {
        var promise;
        return import_regenerator.default.wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              _context2.next = 2;
              return cleanupLastFnCall();
            case 2:
              promise = set_global_theme_default(_objectSpread(_objectSpread({}, theme), {}, {
                colorMode: reconciledColorMode
              }));
              lastSetGlobalThemePromiseRef.current = promise;
            case 4:
            case "end":
              return _context2.stop();
          }
        }, _callee2);
      }));
      return function safelySetGlobalTheme2() {
        return _ref3.apply(this, arguments);
      };
    })();
    safelySetGlobalTheme();
    return function cleanup() {
      cleanupLastFnCall();
    };
  }, [theme, reconciledColorMode]);
  (0, import_react2.useEffect)(function() {
    if (!prefersDarkModeMql) {
      return;
    }
    var unbindListener = (0, import_bind_event_listener.bind)(prefersDarkModeMql, {
      type: "change",
      listener: function listener(event) {
        if (chosenColorMode === "auto") {
          setReconciledColorMode(event.matches ? "dark" : "light");
        }
      }
    });
    return unbindListener;
  }, [chosenColorMode]);
  return import_react2.default.createElement(ColorModeContext.Provider, {
    value: reconciledColorMode
  }, import_react2.default.createElement(SetColorModeContext.Provider, {
    value: setColorMode
  }, import_react2.default.createElement(ThemeContext.Provider, {
    value: theme
  }, import_react2.default.createElement(SetThemeContext.Provider, {
    value: setPartialTheme
  }, children))));
}
var theme_provider_default = ThemeProvider;

// node_modules/@atlaskit/app-provider/dist/esm/app-provider.js
var InsideAppProviderContext = (0, import_react3.createContext)(false);
function AppProvider(_ref) {
  var children = _ref.children, _ref$defaultColorMode = _ref.defaultColorMode, defaultColorMode = _ref$defaultColorMode === void 0 ? "light" : _ref$defaultColorMode, defaultTheme = _ref.defaultTheme, routerLinkComponent = _ref.routerLinkComponent, UNSAFE_isThemingDisabled = _ref.UNSAFE_isThemingDisabled;
  var isInsideAppProvider = (0, import_react3.useContext)(InsideAppProviderContext);
  if (isInsideAppProvider) {
    throw new Error("App provider should not be nested within another app provider.");
  }
  var routerLinkProvider = import_react3.default.createElement(router_link_provider_default, {
    routerLinkComponent
  }, children);
  return import_react3.default.createElement(InsideAppProviderContext.Provider, {
    value: true
  }, UNSAFE_isThemingDisabled ? routerLinkProvider : import_react3.default.createElement(theme_provider_default, {
    defaultColorMode,
    defaultTheme
  }, routerLinkProvider));
}
var app_provider_default = AppProvider;

// node_modules/@atlaskit/app-provider/dist/esm/router-link-provider/hooks/use-router-link.js
var import_react4 = __toESM(require_react());
var useRouterLink = function useRouterLink2() {
  var _useContext = (0, import_react4.useContext)(RouterLinkProviderContext), routerLinkComponent = _useContext.routerLinkComponent;
  if (routerLinkComponent) {
    return routerLinkComponent;
  }
};
var use_router_link_default = useRouterLink;

export {
  UNSAFE_useColorModeForMigration,
  useColorMode,
  useSetColorMode,
  useTheme,
  useSetTheme,
  app_provider_default,
  use_router_link_default
};
//# sourceMappingURL=chunk-3OAEFRLB.js.map
