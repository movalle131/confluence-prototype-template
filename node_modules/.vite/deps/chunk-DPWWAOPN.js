import {
  AvatarContext
} from "./chunk-YQENXFTL.js";
import {
  forwardRefWithGeneric
} from "./chunk-OHIWJLUM.js";
import {
  tooltip_default,
  tooltip_primitive_default
} from "./chunk-PA42JLCQ.js";
import {
  anchor_default,
  cx,
  pressable_default,
  text_default
} from "./chunk-SKNBEIPO.js";
import {
  invariant
} from "./chunk-XUSVWCLU.js";
import {
  noop
} from "./chunk-LRKC55FU.js";
import {
  mergeRefs
} from "./chunk-HDYTRULV.js";
import {
  _extends,
  init_extends
} from "./chunk-TRLI7EVB.js";
import {
  ax,
  init_runtime
} from "./chunk-XC7QRLB3.js";
import {
  _defineProperty,
  _objectWithoutProperties,
  init_defineProperty,
  init_objectWithoutProperties
} from "./chunk-WFA677R7.js";
import {
  require_react
} from "./chunk-QJTFJ6OV.js";
import {
  __toESM
} from "./chunk-V4OQ3NZ2.js";

// node_modules/@atlaskit/navigation-system/dist/esm/ui/menu-item/expandable-menu-item/expandable-menu-item-context.js
var import_react2 = __toESM(require_react());

// node_modules/@atlaskit/navigation-system/dist/esm/ui/menu-item/expandable-menu-item/expandable-menu-item-level-context.js
var import_react = __toESM(require_react());
var ExpandableMenuItemLevelContext = (0, import_react.createContext)(0);

// node_modules/@atlaskit/navigation-system/dist/esm/ui/menu-item/expandable-menu-item/expandable-menu-item-context.js
var AreAllAncestorsExpandedContext = (0, import_react2.createContext)(null);
var IsExpandedContext = (0, import_react2.createContext)(null);
var SetIsExpandedContext = (0, import_react2.createContext)(null);
var OnExpansionToggleContext = (0, import_react2.createContext)(null);
var LevelContext = ExpandableMenuItemLevelContext;
var useIsExpanded = function useIsExpanded2() {
  var context = (0, import_react2.useContext)(IsExpandedContext);
  invariant(context !== null, "useIsExpanded must be used within an ExpandableMenuItem");
  return context;
};
var useSetIsExpanded = function useSetIsExpanded2() {
  var context = (0, import_react2.useContext)(SetIsExpandedContext);
  invariant(context !== null, "useSetIsExpanded must be used within an ExpandableMenuItem");
  return context;
};
var useOnExpansionToggle = function useOnExpansionToggle2() {
  return (0, import_react2.useContext)(OnExpansionToggleContext);
};
var useLevel = function useLevel2() {
  return (0, import_react2.useContext)(LevelContext);
};
var useAreAllAncestorsExpanded = function useAreAllAncestorsExpanded2() {
  var _useContext;
  return (_useContext = (0, import_react2.useContext)(AreAllAncestorsExpandedContext)) !== null && _useContext !== void 0 ? _useContext : true;
};

// node_modules/@atlaskit/navigation-system/dist/esm/ui/menu-item/menu-item-signals.js
var COLLAPSE_ELEM_BEFORE = Symbol("collapse-elem-before");

// node_modules/@atlaskit/navigation-system/dist/esm/ui/menu-item/constants.js
var expandableMenuItemIndentation = "12px";

// node_modules/@atlaskit/navigation-system/dist/esm/ui/menu-item/flyout-menu-item/flyout-menu-item-context.js
var import_react3 = __toESM(require_react());
var IsOpenContext = (0, import_react3.createContext)(false);
var SetIsOpenContext = (0, import_react3.createContext)(noop);
var useFlyoutMenuOpen = function useFlyoutMenuOpen2() {
  return (0, import_react3.useContext)(IsOpenContext);
};
var useSetFlyoutMenuOpen = function useSetFlyoutMenuOpen2() {
  return (0, import_react3.useContext)(SetIsOpenContext);
};

// node_modules/@atlaskit/navigation-system/dist/esm/ui/menu-item/menu-item.js
init_defineProperty();
init_extends();
init_objectWithoutProperties();
init_runtime();
var import_react4 = __toESM(require_react());
import "/Users/movalle/Documents/GitHub/test-enhanced-app/node_modules/@atlaskit/navigation-system/dist/esm/ui/menu-item/menu-item.compiled.css";
var _excluded = ["children", "className"];
function ownKeys(e, r) {
  var t = Object.keys(e);
  if (Object.getOwnPropertySymbols) {
    var o = Object.getOwnPropertySymbols(e);
    r && (o = o.filter(function(r2) {
      return Object.getOwnPropertyDescriptor(e, r2).enumerable;
    })), t.push.apply(t, o);
  }
  return t;
}
function _objectSpread(e) {
  for (var r = 1; r < arguments.length; r++) {
    var t = null != arguments[r] ? arguments[r] : {};
    r % 2 ? ownKeys(Object(t), true).forEach(function(r2) {
      _defineProperty(e, r2, t[r2]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function(r2) {
      Object.defineProperty(e, r2, Object.getOwnPropertyDescriptor(t, r2));
    });
  }
  return e;
}
var LazyDragHandle = (0, import_react4.lazy)(function() {
  return import(
    /* webpackChunkName: "@atlaskit-internal_nav4-menu-item-drag-handle" */
    "./drag-handle-HGTRU37U.js"
  );
});
var tooltipStyles = {
  root: "_2rkoglpi _11c8dcr7 _1e0c1txw _2lx21bp4 _1bah1h6o _1tkezwfg _p12f1pna _vchhusvi _1q51v77o _y4ti12x7 _85i5v77o _bozg12x7 _bfhkcdhy _syaz15cr _152tze3t _1e02ze3t _1i4q1hna _slp31hna"
};
var MenuItemTooltip = (0, import_react4.forwardRef)(function MenuItemTooltip2(_ref, ref) {
  var children = _ref.children, className = _ref.className, rest = _objectWithoutProperties(_ref, _excluded);
  return import_react4.default.createElement(tooltip_primitive_default, _extends({}, rest, {
    // Manually passing on `className` so it gets merged correctly in the build output.
    // The passed classname is mostly used for integration testing (`.Tooltip`)
    // eslint-disable-next-line @atlaskit/design-system/no-unsafe-style-overrides, @atlaskit/ui-styling-standard/no-classname-prop
    className: ax([tooltipStyles.root, className]),
    ref
  }), children);
});
function isTextClamped(element) {
  return element.scrollHeight > element.clientHeight;
}
var defaultAvatarValues = {
  size: "small"
};
var topLevelSiblingStyles = {
  root: "_kqswh2mm"
};
var onTopOfButtonOrAnchorStyles = {
  root: "_18ukglyw"
};
var containerStyles = {
  root: "_2rkoglpi _vchhusvi _1e0c11p5 _yv0e7dup _2z05hkll _1lmcu4vt _1ul9t9kd _4t3iviql _4cvr1h6o _uiztglyw _syaz1gjq _ek6gglyw _1yyu1j28 _91ju1txw _1swv108i _1ojv1txw _irr3108i _1brr1txw _109x1txw",
  removeElemAfter: "_91juglyw",
  showHoverActions: "_ek6g1txw",
  removeElemAfterOnHoverOrOpenNestedPopup: "_1djyglyw _1mfcglyw _1sjuglyw",
  selected: "_bfhkfg4m _syazaqb7 _1yyu1fvw _1swvi1yw _30l3aqb7 _irr3i1yw",
  disabled: "_syaz1lh4 _irr3n7od",
  hasDescription: "_4t3i1wto",
  dragging: "_tzy41ou4"
};
var buttonOrAnchorStyles = {
  root: "_2rkoglpi _yyhyjvu9 _1ii7kb7n _1e0c11p5 _yv0enbh3 _2z05nbh3 _y4ti1b66 _bozg1b66 _1q511b66 _85i51b66 _bfhk1j28 _syaz1gjq _4cvr1h6o _y3gnv2br _14iu1ji5",
  selected: "_syazaqb7 _14iu19ru",
  hasDragIndicator: "_1ifmglyw _1cykglyw _x0kw1txw _7psyru3m _11om6b4r _1uy01amc _bir2q7pw"
};
var extendButtonOrAnchorStyles = {
  root: "_1r04ze3t _kqswstnw"
};
var notchStyles = {
  root: "_kqswstnw _152t1ssb _1e02ze3t _1bsbyh40 _4t3i1crf _t9ec1i34 _bfhk1o0g"
};
var actionStyles = {
  root: "_zulp1b66 _nd5lbc26 _1reo15vq _18m915vq _1e0c1txw _4cvr1h6o _y4ti1b66 _1guo18uv _12s918uv"
};
var actionsOnHoverStyles = {
  root: "_nd5l16dh _zulp1b66 _1reo15vq _18m915vq _1e0c1c3z _4cvr1h6o _y4ti1b66 _1guo18uv _12s918uv"
};
var textStyles = {
  root: "_zulpv77o _1reo15vq _18m915vq _y4ti1b66 _bozg1b66 _1e0c1txw _2lx21bp4 _1ul91c9m _1guo18uv _12s918uv",
  noElemBeforeIndent: "_bozg12x7"
};
var elemBeforeStyles = {
  root: "_nd5l17zh _1reo15vq _18m915vq _1e0c1txw _1o9zidpf _1bsb1tcg _4t3i1tcg _4cvr1h6o _1bah1h6o _bozg1b66 _vchh1ntv _1guo18uv _12s918uv"
};
var elemAfterStyles = {
  root: "_nd5l16dh _1reo15vq _18m915vq _1e0c13yo _1o9zidpf _4t3i1tcg _4cvr1h6o _y4ti1b66 _1guo18uv _12s918uv"
};
var interactiveContentStyles = {
  root: "_nd5l19l3 _1e0c1txw _2lx21bp4 _ae4v1h6o"
};
function getTextColor(_ref2) {
  var isDisabled = _ref2.isDisabled, isSelected = _ref2.isSelected;
  if (isDisabled) {
    return "color.text.disabled";
  }
  if (isSelected) {
    return "color.text.selected";
  }
  return "color.text.subtle";
}
var MenuItemBaseNoRef = function MenuItemBaseNoRef2(_ref3, forwardedRef) {
  var id = _ref3.id, testId = _ref3.testId, actions = _ref3.actions, actionsOnHover = _ref3.actionsOnHover, children = _ref3.children, description = _ref3.description, elemAfter = _ref3.elemAfter, elemBefore = _ref3.elemBefore, href = _ref3.href, target = _ref3.target, isDisabled = _ref3.isDisabled, isSelected = _ref3.isSelected, onClick = _ref3.onClick, ariaControls = _ref3.ariaControls, ariaExpanded = _ref3.ariaExpanded, ariaHasPopup = _ref3.ariaHasPopup, interactionName = _ref3.interactionName, isContentTooltipDisabled = _ref3.isContentTooltipDisabled, visualContentRef = _ref3.visualContentRef, isDragging = _ref3.isDragging, hasDragIndicator = _ref3.hasDragIndicator, dropIndicator = _ref3.dropIndicator;
  var level = useLevel();
  var setFlyoutMenuOpen = useSetFlyoutMenuOpen();
  var isFlyoutMenuOpen = useFlyoutMenuOpen();
  var isLink = typeof href !== "undefined";
  var labelRef = (0, import_react4.useRef)(null);
  var descriptionRef = (0, import_react4.useRef)(null);
  var tooltipOnClick = (0, import_react4.useRef)(null);
  var handleClick = (0, import_react4.useCallback)(function(event, analyticsEvent) {
    var _tooltipOnClick$curre;
    onClick === null || onClick === void 0 || onClick(event, analyticsEvent);
    setFlyoutMenuOpen(!isFlyoutMenuOpen);
    (_tooltipOnClick$curre = tooltipOnClick.current) === null || _tooltipOnClick$curre === void 0 || _tooltipOnClick$curre.call(tooltipOnClick, event);
  }, [onClick, setFlyoutMenuOpen, isFlyoutMenuOpen]);
  var canTooltipAppear = (0, import_react4.useCallback)(function() {
    if (isContentTooltipDisabled) {
      return false;
    }
    var label = labelRef.current;
    var description2 = descriptionRef.current;
    if (label && isTextClamped(label)) {
      return true;
    }
    return Boolean(description2 && isTextClamped(description2));
  }, [isContentTooltipDisabled]);
  var showElemBefore = elemBefore !== COLLAPSE_ELEM_BEFORE;
  var interactiveElemContent = import_react4.default.createElement("div", {
    className: ax([interactiveContentStyles.root])
  }, import_react4.default.createElement("div", {
    // This extends the clickable area of nested menu items to the width
    // of the root level menu items, while being visually indented.
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values
    style: {
      insetInlineStart: "calc(-1 * ".concat(level, " * ").concat(expandableMenuItemIndentation, ")")
    },
    "aria-hidden": "true",
    className: ax([extendButtonOrAnchorStyles.root])
  }), import_react4.default.createElement("div", {
    className: ax([textStyles.root, !showElemBefore && textStyles.noElemBeforeIndent])
  }, import_react4.default.createElement(text_default, {
    weight: "medium",
    maxLines: 1,
    color: getTextColor({
      isDisabled,
      isSelected
    }),
    ref: labelRef
  }, children), description && import_react4.default.createElement(text_default, {
    color: isDisabled ? "color.text.disabled" : "color.text.subtle",
    size: "small",
    maxLines: 1,
    ref: descriptionRef
  }, description)), hasDragIndicator ? import_react4.default.createElement(import_react4.Suspense, {
    fallback: null
  }, import_react4.default.createElement(LazyDragHandle, null)) : null, dropIndicator);
  var showHoverActionsWhenNotHovered = Boolean(ariaExpanded && actionsOnHover);
  return import_react4.default.createElement(AvatarContext.Provider, {
    value: defaultAvatarValues
  }, import_react4.default.createElement("div", {
    ref: visualContentRef,
    "data-testid": testId ? "".concat(testId, "-container") : void 0,
    "data-selected": isSelected,
    className: ax([containerStyles.root, isSelected && containerStyles.selected, isDragging && containerStyles.dragging, description && containerStyles.hasDescription, showHoverActionsWhenNotHovered && containerStyles.showHoverActions, showHoverActionsWhenNotHovered && elemAfter && containerStyles.removeElemAfter, actionsOnHover && elemAfter && containerStyles.removeElemAfterOnHoverOrOpenNestedPopup, isDisabled && containerStyles.disabled])
  }, import_react4.default.createElement(tooltip_default, {
    content: function content() {
      return import_react4.default.createElement(import_react4.default.Fragment, null, import_react4.default.createElement("div", null, children), description ? import_react4.default.createElement("div", null, description) : null);
    },
    position: "right",
    component: MenuItemTooltip,
    ignoreTooltipPointerEvents: true,
    hideTooltipOnMouseDown: true,
    isScreenReaderAnnouncementDisabled: true,
    canAppear: canTooltipAppear
  }, function(tooltipProps) {
    tooltipOnClick.current = tooltipProps.onClick;
    var sharedProps = _objectSpread(_objectSpread({}, tooltipProps), {}, {
      "aria-controls": ariaControls,
      "aria-haspopup": ariaHasPopup,
      ref: mergeRefs([forwardedRef, tooltipProps.ref]),
      id,
      testId,
      interactionName
    });
    return isLink ? import_react4.default.createElement(anchor_default, _extends({}, sharedProps, {
      onClick: handleClick,
      xcss: cx(buttonOrAnchorStyles.root, topLevelSiblingStyles.root, isSelected && buttonOrAnchorStyles.selected, hasDragIndicator && buttonOrAnchorStyles.hasDragIndicator),
      style: {
        textDecoration: "none"
      },
      "aria-current": isSelected ? "page" : void 0,
      href,
      target,
      draggable: hasDragIndicator ? void 0 : false
    }), import_react4.default.createElement("div", {
      "aria-hidden": "true",
      className: ax([notchStyles.root])
    }), interactiveElemContent) : import_react4.default.createElement(pressable_default, _extends({}, sharedProps, {
      onClick: handleClick,
      xcss: cx(buttonOrAnchorStyles.root, topLevelSiblingStyles.root, isSelected && buttonOrAnchorStyles.selected, hasDragIndicator && buttonOrAnchorStyles.hasDragIndicator),
      "aria-expanded": ariaExpanded,
      isDisabled
    }), interactiveElemContent);
  }), showElemBefore && import_react4.default.createElement("div", {
    className: ax([elemBeforeStyles.root, topLevelSiblingStyles.root, onTopOfButtonOrAnchorStyles.root])
  }, elemBefore), actionsOnHover && import_react4.default.createElement("div", {
    className: ax([actionsOnHoverStyles.root])
  }, actionsOnHover), elemAfter && import_react4.default.createElement("div", {
    className: ax([elemAfterStyles.root, topLevelSiblingStyles.root, onTopOfButtonOrAnchorStyles.root])
  }, elemAfter), actions && import_react4.default.createElement("div", {
    className: ax([actionStyles.root, topLevelSiblingStyles.root, onTopOfButtonOrAnchorStyles.root])
  }, actions)));
};
var MenuItemBase = forwardRefWithGeneric(MenuItemBaseNoRef);

export {
  AreAllAncestorsExpandedContext,
  IsExpandedContext,
  SetIsExpandedContext,
  OnExpansionToggleContext,
  LevelContext,
  useIsExpanded,
  useSetIsExpanded,
  useOnExpansionToggle,
  useLevel,
  useAreAllAncestorsExpanded,
  IsOpenContext,
  SetIsOpenContext,
  COLLAPSE_ELEM_BEFORE,
  MenuItemBase
};
//# sourceMappingURL=chunk-DPWWAOPN.js.map
