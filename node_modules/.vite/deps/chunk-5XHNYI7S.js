import {
  SkipLinksContext
} from "./chunk-NL42P2DB.js";
import {
  anchor_default,
  text_default
} from "./chunk-PJFXQFKG.js";
import {
  OpenLayerObserver
} from "./chunk-GSLSGJXD.js";
import {
  noop
} from "./chunk-LRKC55FU.js";
import {
  ax,
  init_runtime
} from "./chunk-XC7QRLB3.js";
import {
  require_dist
} from "./chunk-4XFTJAYZ.js";
import {
  _toConsumableArray
} from "./chunk-RG5U4ZYV.js";
import {
  _defineProperty,
  _slicedToArray,
  init_defineProperty,
  init_slicedToArray
} from "./chunk-WFA677R7.js";
import {
  require_react
} from "./chunk-QJTFJ6OV.js";
import {
  __toESM
} from "./chunk-V4OQ3NZ2.js";

// node_modules/@atlaskit/navigation-system/dist/esm/ui/page-layout/root.js
init_runtime();
var import_react12 = __toESM(require_react());
import "/Users/movalle/Documents/GitHub/test-enhanced-app/node_modules/@atlaskit/navigation-system/dist/esm/ui/page-layout/root.compiled.css";

// node_modules/@atlaskit/navigation-system/dist/esm/components/skip-links/skip-links-container.js
var React2 = __toESM(require_react());
init_runtime();
import "/Users/movalle/Documents/GitHub/test-enhanced-app/node_modules/@atlaskit/navigation-system/dist/esm/components/skip-links/skip-links-container.compiled.css";

// node_modules/@atlaskit/navigation-system/dist/esm/context/skip-links/skip-links-data-context.js
init_defineProperty();
var import_react = __toESM(require_react());
function ownKeys(e, r) {
  var t = Object.keys(e);
  if (Object.getOwnPropertySymbols) {
    var o = Object.getOwnPropertySymbols(e);
    r && (o = o.filter(function(r2) {
      return Object.getOwnPropertyDescriptor(e, r2).enumerable;
    })), t.push.apply(t, o);
  }
  return t;
}
function _objectSpread(e) {
  for (var r = 1; r < arguments.length; r++) {
    var t = null != arguments[r] ? arguments[r] : {};
    r % 2 ? ownKeys(Object(t), true).forEach(function(r2) {
      _defineProperty(e, r2, t[r2]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function(r2) {
      Object.defineProperty(e, r2, Object.getOwnPropertyDescriptor(t, r2));
    });
  }
  return e;
}
var SkipLinksDataContext = (0, import_react.createContext)([]);
var _assignIndex = function assignIndex(num, arr) {
  if (!arr.includes(num)) {
    return num;
  }
  return _assignIndex(num + 1, arr);
};
var sortSkipLinks = function sortSkipLinks2(arr) {
  var customLinks = arr.filter(function(link) {
    return Number.isInteger(link.listIndex);
  });
  if (customLinks.length === 0) {
    return arr;
  }
  var usedIndexes = customLinks.map(function(a) {
    return a.listIndex;
  });
  var regularLinksWithIdx = arr.filter(function(link) {
    return link.listIndex === void 0;
  }).map(function(link, idx) {
    var listIndex = _assignIndex(idx, usedIndexes);
    usedIndexes.push(listIndex);
    return _objectSpread(_objectSpread({}, link), {}, {
      listIndex
    });
  });
  return [].concat(_toConsumableArray(customLinks), _toConsumableArray(regularLinksWithIdx)).sort(function(a, b) {
    return a.listIndex - b.listIndex;
  });
};
var useSortedSkipLinks = function useSortedSkipLinks2() {
  var skipLinksData = (0, import_react.useContext)(SkipLinksDataContext);
  return (0, import_react.useMemo)(function() {
    return sortSkipLinks(skipLinksData);
  }, [skipLinksData]);
};

// node_modules/@atlaskit/navigation-system/dist/esm/components/skip-links/skip-link.js
init_runtime();
var import_react2 = __toESM(require_react());
var import_bind_event_listener = __toESM(require_dist());
import "/Users/movalle/Documents/GitHub/test-enhanced-app/node_modules/@atlaskit/navigation-system/dist/esm/components/skip-links/skip-link.compiled.css";
var styles = {
  skipLinkListItem: "_1pfhze3t"
};
function focusElement(element) {
  element.setAttribute("tabindex", "-1");
  (0, import_bind_event_listener.bind)(element, {
    type: "blur",
    listener: function listener() {
      element.removeAttribute("tabindex");
    },
    options: {
      // Using a one-time listener so it cleans itself up
      once: true
    }
  });
  element.focus({
    // Forces the focus ring to appear after moving focus to the slot
    // https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/focus#focusvisible
    // @ts-expect-error - new and not in types yet
    focusVisible: true
  });
}
var SkipLink = function SkipLink2(_ref) {
  var id = _ref.id, children = _ref.children, onBeforeNavigate = _ref.onBeforeNavigate;
  var href = "#".concat(id);
  var onClick = (0, import_react2.useCallback)(function(event) {
    event.preventDefault();
    var target = document.getElementById(id);
    if (!target) {
      return;
    }
    onBeforeNavigate === null || onBeforeNavigate === void 0 || onBeforeNavigate();
    focusElement(target);
    window.scrollTo(0, 0);
  }, [id, onBeforeNavigate]);
  return import_react2.default.createElement("li", {
    className: ax([styles.skipLinkListItem])
  }, import_react2.default.createElement(
    anchor_default,
    {
      tabIndex: 0,
      href,
      onClick
    },
    children
  ));
};

// node_modules/@atlaskit/navigation-system/dist/esm/components/skip-links/skip-links-container.js
var styles2 = {
  root: "_zulp1b66 _2rkoglpi _1rjcutpp _18zrutpp _1e0c1txw _2lx21bp4 _kqsw1n9t _1e02v47k _152tv47k _bfhk1bhr _16qs1cd0 _1pby1mrw _tzy4idpf _lcxvglyw _1digjh3g _1mygkb7n _18eu1wug",
  skipLinkList: "_zulp1b66 _1e0c1txw _2lx21bp4 _1x8w11lx _2mzuglyw _1pfhze3t _bozgze3t"
};
var closeOnEscape = function closeOnEscape2(event) {
  if (event.key !== "Escape") {
    return;
  }
  var activeElement = document.activeElement;
  if (activeElement instanceof HTMLElement) {
    activeElement.blur();
  }
};
var isOnlyWhitespaceRegex = /^\s*$/;
var SkipLinksContainer = function SkipLinksContainer2(_ref) {
  var label = _ref.label, testId = _ref.testId;
  var sortedSkipLinks = useSortedSkipLinks();
  if (sortedSkipLinks.length === 0) {
    return null;
  }
  var isEmptyLabel = isOnlyWhitespaceRegex.test(label);
  return React2.createElement("div", {
    onKeyDown: closeOnEscape,
    "data-testid": testId ? "".concat(testId, "--skip-links-container") : void 0,
    className: ax([styles2.root])
  }, !isEmptyLabel && React2.createElement(text_default, {
    weight: "bold",
    testId: testId ? "".concat(testId, "--skip-links-container--label") : void 0
  }, label), React2.createElement("ol", {
    className: ax([styles2.skipLinkList])
  }, sortedSkipLinks.map(function(_ref2) {
    var id = _ref2.id, label2 = _ref2.label, onBeforeNavigate = _ref2.onBeforeNavigate;
    return React2.createElement(SkipLink, {
      key: id,
      id,
      onBeforeNavigate
    }, label2);
  })));
};

// node_modules/@atlaskit/navigation-system/dist/esm/context/skip-links/skip-links-provider.js
init_slicedToArray();
var import_react3 = __toESM(require_react());
var getByDomOrderSortFunction = function getByDomOrderSortFunction2() {
  var layoutSlots = Array.from(document.querySelectorAll("[data-layout-slot]"));
  return function(a, b) {
    var _a$listIndex, _b$listIndex;
    var indexA = (_a$listIndex = a.listIndex) !== null && _a$listIndex !== void 0 ? _a$listIndex : layoutSlots.indexOf(document.getElementById(a.id));
    var indexB = (_b$listIndex = b.listIndex) !== null && _b$listIndex !== void 0 ? _b$listIndex : layoutSlots.indexOf(document.getElementById(b.id));
    if (indexA === indexB) {
      if (a.listIndex !== void 0) {
        return -1;
      } else {
        return 1;
      }
    }
    return indexA - indexB;
  };
};
var SkipLinksProvider = function SkipLinksProvider2(_ref) {
  var children = _ref.children;
  var _useState = (0, import_react3.useState)([]), _useState2 = _slicedToArray(_useState, 2), links = _useState2[0], setLinks = _useState2[1];
  var registerSkipLink = (0, import_react3.useCallback)(function(skipLinkData) {
    setLinks(function(oldLinks) {
      if (oldLinks.some(function(_ref2) {
        var id = _ref2.id;
        return id === skipLinkData.id;
      })) {
        if (true) {
          console.warn("Tried registering duplicate skip link for ID '".concat(skipLinkData.id, "'.\n\nIf you're trying to override a slot skip link label, then use the `skipLinkLabel` prop instead.\n\nThis error will not be shown in production, and the duplicate skip link will be ignored."));
        }
        return oldLinks;
      }
      return [].concat(_toConsumableArray(oldLinks), [skipLinkData]).sort(getByDomOrderSortFunction());
    });
  }, []);
  var unregisterSkipLink = (0, import_react3.useCallback)(function(id) {
    setLinks(function(links2) {
      return links2.filter(function(link) {
        return link.id !== id;
      });
    });
  }, []);
  var contextValue = (0, import_react3.useMemo)(function() {
    var data = {
      registerSkipLink,
      unregisterSkipLink
    };
    return data;
  }, [registerSkipLink, unregisterSkipLink]);
  return import_react3.default.createElement(SkipLinksContext.Provider, {
    value: contextValue
  }, import_react3.default.createElement(SkipLinksDataContext.Provider, {
    value: links
  }, children));
};

// node_modules/@atlaskit/navigation-system/dist/esm/context/top-nav-start/top-nav-start-context-provider.js
init_slicedToArray();
var import_react5 = __toESM(require_react());

// node_modules/@atlaskit/navigation-system/dist/esm/context/top-nav-start/top-nav-start-context.js
var import_react4 = __toESM(require_react());
var TopNavStartElement = (0, import_react4.createContext)(null);
var TopNavStartAttachRef = (0, import_react4.createContext)(noop);

// node_modules/@atlaskit/navigation-system/dist/esm/context/top-nav-start/top-nav-start-context-provider.js
var TopNavStartProvider = function TopNavStartProvider2(_ref) {
  var children = _ref.children;
  var _useState = (0, import_react5.useState)(null), _useState2 = _slicedToArray(_useState, 2), element = _useState2[0], setElement = _useState2[1];
  return import_react5.default.createElement(TopNavStartElement.Provider, {
    value: element
  }, import_react5.default.createElement(TopNavStartAttachRef.Provider, {
    value: setElement
  }, children));
};

// node_modules/@atlaskit/navigation-system/dist/esm/ui/page-layout/hoist-slot-sizes-context.js
var import_react6 = __toESM(require_react());
var DangerouslyHoistSlotSizes = (0, import_react6.createContext)(false);

// node_modules/@atlaskit/navigation-system/dist/esm/ui/page-layout/side-nav/element-context.js
var import_react7 = __toESM(require_react());
var SideNavRefContext = (0, import_react7.createContext)({
  current: null
});
function SideNavElementProvider(_ref) {
  var children = _ref.children;
  var sideNavRef = (0, import_react7.useRef)(null);
  return import_react7.default.createElement(SideNavRefContext.Provider, {
    value: sideNavRef
  }, children);
}
function useSideNavRef() {
  return (0, import_react7.useContext)(SideNavRefContext);
}

// node_modules/@atlaskit/navigation-system/dist/esm/ui/page-layout/side-nav/toggle-button-provider.js
init_slicedToArray();
var import_react9 = __toESM(require_react());

// node_modules/@atlaskit/navigation-system/dist/esm/ui/page-layout/side-nav/toggle-button-context.js
var import_react8 = __toESM(require_react());
var SideNavToggleButtonElement = (0, import_react8.createContext)(null);
var SideNavToggleButtonAttachRef = (0, import_react8.createContext)(noop);

// node_modules/@atlaskit/navigation-system/dist/esm/ui/page-layout/side-nav/toggle-button-provider.js
var SideNavToggleButtonProvider = function SideNavToggleButtonProvider2(_ref) {
  var children = _ref.children;
  var _useState = (0, import_react9.useState)(null), _useState2 = _slicedToArray(_useState, 2), element = _useState2[0], setElement = _useState2[1];
  return import_react9.default.createElement(SideNavToggleButtonElement.Provider, {
    value: element
  }, import_react9.default.createElement(SideNavToggleButtonAttachRef.Provider, {
    value: setElement
  }, children));
};

// node_modules/@atlaskit/navigation-system/dist/esm/ui/page-layout/side-nav/visibility-provider.js
init_slicedToArray();
var import_react11 = __toESM(require_react());

// node_modules/@atlaskit/navigation-system/dist/esm/ui/page-layout/side-nav/visibility-context.js
var import_react10 = __toESM(require_react());
var SideNavVisibilityState = (0, import_react10.createContext)(null);
var SetSideNavVisibilityState = (0, import_react10.createContext)(noop);

// node_modules/@atlaskit/navigation-system/dist/esm/ui/page-layout/side-nav/visibility-provider.js
var SideNavVisibilityProvider = function SideNavVisibilityProvider2(_ref) {
  var children = _ref.children;
  var _useState = (0, import_react11.useState)(null), _useState2 = _slicedToArray(_useState, 2), sideNavState = _useState2[0], setSideNavState = _useState2[1];
  return import_react11.default.createElement(SideNavVisibilityState.Provider, {
    value: sideNavState
  }, import_react11.default.createElement(SetSideNavVisibilityState.Provider, {
    value: setSideNavState
  }, children));
};

// node_modules/@atlaskit/navigation-system/dist/esm/ui/page-layout/root.js
var gridRootId = "unsafe-design-system-page-layout-root";
var styles3 = {
  root: "_1e0c11p5 _1tke1kxc _1lmcq9em _yv0ei47z _2z0516ab _1ciragmp _12fkuz0r _12qzrxre _1rqt70if _xkmgbaui _jbc7rxre _tyve1jg8"
};
function Root(_ref) {
  var children = _ref.children, xcss = _ref.xcss, _ref$UNSAFE_dangerous = _ref.UNSAFE_dangerouslyHoistSlotSizes, UNSAFE_dangerouslyHoistSlotSizes = _ref$UNSAFE_dangerous === void 0 ? false : _ref$UNSAFE_dangerous, _ref$skipLinksLabel = _ref.skipLinksLabel, skipLinksLabel = _ref$skipLinksLabel === void 0 ? "Skip to:" : _ref$skipLinksLabel, testId = _ref.testId;
  var ref = (0, import_react12.useRef)(null);
  (0, import_react12.useEffect)(function() {
    if (true) {
      var IGNORED_ELEMENTS = ["SCRIPT", "STYLE"];
      if (ref.current) {
        Array.from(ref.current.children).forEach(function(child) {
          if (!IGNORED_ELEMENTS.includes(child.tagName) && !child.hasAttribute("data-layout-slot")) {
            console.error("Page Layout Error\n\nThis element has been forcibly hidden:\n\n", child, "\n\nAn element was rendered as a child of the page layout root that isn't a page layout component! Resolve this error by moving it into a page layout component.\n\nThis message will not be displayed in production.\n");
          }
        });
      }
    }
  }, []);
  return import_react12.default.createElement(SideNavVisibilityProvider, null, import_react12.default.createElement(SideNavToggleButtonProvider, null, import_react12.default.createElement(SideNavElementProvider, null, import_react12.default.createElement(TopNavStartProvider, null, import_react12.default.createElement(OpenLayerObserver, null, import_react12.default.createElement(DangerouslyHoistSlotSizes.Provider, {
    value: UNSAFE_dangerouslyHoistSlotSizes
  }, import_react12.default.createElement(SkipLinksProvider, null, import_react12.default.createElement(SkipLinksContainer, {
    label: skipLinksLabel,
    testId
  }), import_react12.default.createElement("div", {
    ref,
    className: ax([styles3.root, xcss]),
    id: gridRootId,
    "data-testid": testId
  }, children))))))));
}

export {
  TopNavStartElement,
  TopNavStartAttachRef,
  DangerouslyHoistSlotSizes,
  useSideNavRef,
  SideNavToggleButtonElement,
  SideNavToggleButtonAttachRef,
  SideNavVisibilityState,
  SetSideNavVisibilityState,
  gridRootId,
  Root
};
//# sourceMappingURL=chunk-5XHNYI7S.js.map
