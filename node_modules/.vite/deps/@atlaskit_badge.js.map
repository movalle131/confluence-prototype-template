{
  "version": 3,
  "sources": ["../../@atlaskit/badge/dist/esm/badge.js", "../../@atlaskit/badge/dist/esm/internal/utils.js"],
  "sourcesContent": ["/* badge.tsx generated by @compiled/babel-plugin v0.36.1 */\nimport \"./badge.compiled.css\";\nimport * as React from 'react';\nimport { ax, ix } from \"@compiled/react/runtime\";\nimport { memo } from 'react';\nimport { fg } from '@atlaskit/platform-feature-flags';\n// eslint-disable-next-line @atlaskit/design-system/no-emotion-primitives -- to be migrated to @atlaskit/primitives/compiled – go/akcss\nimport { Text } from '@atlaskit/primitives';\nimport { formatValue, formatValueWithNegativeSupport } from './internal/utils';\nvar boxStyles = {\n  root: \"_2rkopd34 _18zr12x7 _1e0c116y _1o9zidpf _1kz6184x\",\n  added: \"_bfhk1bay\",\n  default: \"_bfhklecj\",\n  important: \"_bfhk1v7l\",\n  primary: \"_bfhkomb0\",\n  primaryInverted: \"_bfhkvuon\",\n  removed: \"_bfhktaeo\"\n};\n\n/**\n * Visual refresh colors.\n * Hardcoded hex colors are used as the they should not change based on theme, and there are no appropriate color tokens.\n *\n * Using separate variables as opposed to an object, to comply with UI styling standard\n * https://atlassian.design/components/eslint-plugin-ui-styling-standard/no-unsafe-values/usage#object-access\n */\nvar neutral300 = '#DDDEE1';\nvar red300 = '#FD9891';\nvar blue300 = '#8FB8F6';\nvar neutral1000 = '#292A2E';\nvar styles = {\n  root: \"_2rkogqwt _18zr1b66 _1e0c116y _vchhusvi _1ul91ejb _1bah1h6o _1o9zidpf _1kz6184x\",\n  added: \"_bfhkmv6i _syaz1fxt\",\n  default: \"_bfhk1fkg _syazwwip\",\n  important: \"_bfhk1366 _syazwwip\",\n  primary: \"_bfhk1ymo _syazwwip\",\n  primaryInverted: \"_bfhkvuon _syaz1e6v\",\n  removed: \"_bfhk1gly _syaz1fxt\"\n};\nvar badgeValueWithNegativeNumberSupported = function badgeValueWithNegativeNumberSupported(children, max) {\n  // Use this flag for allowing negative values(numbers) in badge component when custom number field is used\n  if (fg('platform_ken_2029_negative_numbers_badge')) {\n    return typeof children === 'number' && typeof max === 'number' ? formatValueWithNegativeSupport(children, max) : children;\n  }\n  return typeof children === 'number' && max ? formatValue(children, max) : children;\n};\n\n/**\n * __Badge__\n *\n * This component gives you the full badge functionality and automatically formats the number you provide in \\`children\\`.\n *\n * - [Examples](https://atlassian.design/components/badge/examples)\n * - [Code](https://atlassian.design/components/badge/code)\n * - [Usage](https://atlassian.design/components/badge/usage)\n */\nvar Badge = /*#__PURE__*/memo(function Badge(_ref) {\n  var _ref$appearance = _ref.appearance,\n    appearance = _ref$appearance === void 0 ? 'default' : _ref$appearance,\n    _ref$children = _ref.children,\n    children = _ref$children === void 0 ? 0 : _ref$children,\n    _ref$max = _ref.max,\n    max = _ref$max === void 0 ? 99 : _ref$max,\n    style = _ref.style,\n    testId = _ref.testId;\n  // eslint-disable-next-line @atlaskit/platform/ensure-feature-flag-prefix\n  if (fg('platform-component-visual-refresh')) {\n    return /*#__PURE__*/React.createElement(\"span\", {\n      \"data-testid\": testId,\n      style: {\n        background: style === null || style === void 0 ? void 0 : style.backgroundColor,\n        color: style === null || style === void 0 ? void 0 : style.color\n      },\n      className: ax([styles.root, styles[appearance]])\n    }, /*#__PURE__*/React.createElement(Text, {\n      size: \"small\",\n      align: \"center\",\n      color: \"inherit\"\n    }, badgeValueWithNegativeNumberSupported(children, max)));\n  }\n  return /*#__PURE__*/React.createElement(\"span\", {\n    \"data-testid\": testId,\n    style: {\n      backgroundColor: style === null || style === void 0 ? void 0 : style.backgroundColor,\n      color: style === null || style === void 0 ? void 0 : style.color\n    },\n    className: ax([boxStyles.root, boxStyles[appearance]])\n  }, /*#__PURE__*/React.createElement(Text, {\n    size: \"UNSAFE_small\",\n    align: \"center\",\n    color: style !== null && style !== void 0 && style.color ? 'inherit' : textColors[appearance]\n  }, badgeValueWithNegativeNumberSupported(children, max)));\n});\nBadge.displayName = 'Badge';\nexport default Badge;\nvar textColors = {\n  added: 'color.text.success',\n  default: 'color.text',\n  important: 'color.text.inverse',\n  primary: 'color.text.inverse',\n  primaryInverted: 'color.text.brand',\n  removed: 'color.text.danger'\n};", "function getSafeValueWithNegativeSupport() {\n  var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n  var numericValue = +value;\n  // NOTE: Changing below code as this causes custom fields -ve number to show up as zero in activity timeline.\n  // This will ensure it renders correctly if it is a number otherwise renders 0\n  // If the value is NaN, return it as is (assuming it's a non-numeric string)\n  if (isNaN(numericValue)) {\n    return value;\n  }\n  // Return the numeric value, allowing negative numbers\n  return numericValue;\n}\nexport function formatValueWithNegativeSupport(value, max) {\n  var safeValue = getSafeValueWithNegativeSupport(value);\n  var safeMax = getSafeValueWithNegativeSupport(max);\n  var hasSafeMaxValue = false;\n  if (max !== undefined) {\n    hasSafeMaxValue = true;\n  }\n  if (safeMax === Infinity && safeValue === Infinity) {\n    return '∞';\n  }\n  if (hasSafeMaxValue && safeMax < safeValue) {\n    return \"\".concat(safeMax, \"+\");\n  }\n  if (safeValue === Infinity) {\n    return '∞';\n  }\n  return safeValue.toString();\n}\nfunction getSafeValue() {\n  var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n  var numericValue = +value;\n  if (numericValue < 0) {\n    return 0;\n  }\n  return value;\n}\nexport function formatValue(value, max) {\n  var safeValue = getSafeValue(value);\n  var safeMax = getSafeValue(max);\n  if (safeMax && safeMax < safeValue) {\n    return \"\".concat(safeMax, \"+\");\n  }\n  if (safeValue === Infinity) {\n    return '∞';\n  }\n  return safeValue.toString();\n}"],
  "mappings": "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",
  "names": ["badgeValueWithNegativeNumberSupported", "Badge"]
}
