import {
  Divider,
  MenuSection,
  MenuSectionHeading
} from "./chunk-HH3NKZXP.js";
import {
  ContainerAvatar
} from "./chunk-B3ZNQKSE.js";
import {
  ButtonMenuItem
} from "./chunk-TCOQ3LUK.js";
import {
  MenuList
} from "./chunk-7RUTN36Z.js";
import {
  Main,
  MainStickyHeader
} from "./chunk-PFAZBMJU.js";
import {
  LinkMenuItem,
  useScrollMenuItemIntoView
} from "./chunk-FZPE6W7E.js";
import {
  FlyoutMenuItem,
  FlyoutMenuItemContent,
  FlyoutMenuItemTrigger,
  require_chevron_right
} from "./chunk-YBK4GABZ.js";
import {
  AreAllAncestorsExpandedContext,
  COLLAPSE_ELEM_BEFORE,
  IsExpandedContext,
  LevelContext,
  MenuItemBase,
  OnExpansionToggleContext,
  SetIsExpandedContext,
  useAreAllAncestorsExpanded,
  useIsExpanded,
  useLevel,
  useOnExpansionToggle,
  useSetIsExpanded
} from "./chunk-DPWWAOPN.js";
import {
  useControlled
} from "./chunk-LW47WXE2.js";
import {
  AppLogo,
  AppSwitcher,
  ChatButton,
  CreateButton,
  CustomLogo,
  EndItem,
  Help,
  LogIn,
  Notifications,
  Profile,
  Search,
  Settings
} from "./chunk-SDLHJUEK.js";
import {
  MenuListItem
} from "./chunk-EL4KPZI4.js";
import "./chunk-RNXQZLDM.js";
import "./chunk-DLZTHRDT.js";
import {
  TopNav,
  TopNavEnd,
  TopNavMiddle,
  TopNavStart
} from "./chunk-BJY5TNXA.js";
import {
  List
} from "./chunk-2HRS2K6J.js";
import "./chunk-UYH6E2S6.js";
import "./chunk-N2BKMIOS.js";
import "./chunk-2QMOLFGZ.js";
import "./chunk-JWOAWYER.js";
import "./chunk-NIAVOAE6.js";
import "./chunk-M722CHCQ.js";
import "./chunk-SFYP2GJ2.js";
import {
  require_chevron_down
} from "./chunk-JQN2PVA7.js";
import "./chunk-6X5WLL3E.js";
import "./chunk-4PK344O7.js";
import "./chunk-YQENXFTL.js";
import "./chunk-OV5XYLC3.js";
import {
  PanelSplitter,
  PanelSplitterProvider,
  SideNav,
  SideNavContent,
  SideNavFooter,
  SideNavHeader,
  SideNavToggleButton,
  useResizingWidthCssVarOnRootElement,
  useToggleSideNav
} from "./chunk-FGFAXZ6F.js";
import {
  usePreviousValue
} from "./chunk-3WCTIX47.js";
import "./chunk-PBPEGTWR.js";
import "./chunk-J554AJ6T.js";
import {
  DangerouslyHoistCssVarToDocumentRoot,
  HoistCssVarToLocalGrid
} from "./chunk-WV7G5RON.js";
import {
  UNSAFE_asideLayoutVar,
  UNSAFE_bannerVar,
  UNSAFE_panelLayoutVar,
  asidePanelSplitterId,
  asideVar,
  bannerMountedVar,
  panelPanelSplitterId,
  panelVar,
  sideNavLiveWidthVar,
  useLayoutId
} from "./chunk-W55EUAGZ.js";
import "./chunk-54HUSBMH.js";
import "./chunk-OHIWJLUM.js";
import {
  DangerouslyHoistSlotSizes,
  Root,
  useSideNavRef
} from "./chunk-5XHNYI7S.js";
import {
  useSkipLinkInternal
} from "./chunk-NL42P2DB.js";
import "./chunk-CBXLYWMJ.js";
import {
  media
} from "./chunk-PJFXQFKG.js";
import "./chunk-6XQKEE7I.js";
import "./chunk-YMWXUMSA.js";
import "./chunk-ZJT24HX4.js";
import {
  button_default2 as button_default
} from "./chunk-D4H6CB3O.js";
import "./chunk-CQML7CIN.js";
import "./chunk-PA42JLCQ.js";
import "./chunk-LJL3VMNZ.js";
import "./chunk-CU24BLAG.js";
import "./chunk-GSLSGJXD.js";
import "./chunk-TSADYF5T.js";
import {
  cx
} from "./chunk-SKNBEIPO.js";
import "./chunk-PUGER6BV.js";
import "./chunk-XUSVWCLU.js";
import "./chunk-73JC3HDI.js";
import "./chunk-LRKC55FU.js";
import "./chunk-WD223FES.js";
import "./chunk-ZP3ZNAZP.js";
import "./chunk-YQ5BCTVV.js";
import "./chunk-HDYTRULV.js";
import "./chunk-CM4DOMEY.js";
import "./chunk-ON37A5TK.js";
import {
  _extends,
  init_extends
} from "./chunk-TRLI7EVB.js";
import {
  ax,
  init_runtime
} from "./chunk-XC7QRLB3.js";
import "./chunk-3OAEFRLB.js";
import "./chunk-4XFTJAYZ.js";
import "./chunk-YLRLJMD7.js";
import "./chunk-ATF5PCW4.js";
import "./chunk-RG5U4ZYV.js";
import {
  _defineProperty,
  _slicedToArray,
  fg,
  init_defineProperty,
  init_esm,
  init_slicedToArray
} from "./chunk-WFA677R7.js";
import {
  require_react
} from "./chunk-QJTFJ6OV.js";
import {
  __toESM
} from "./chunk-V4OQ3NZ2.js";

// node_modules/@atlaskit/navigation-system/dist/esm/ui/menu-item/expandable-menu-item/expandable-menu-item.js
init_slicedToArray();
var React = __toESM(require_react());
init_runtime();
var import_react = __toESM(require_react());
import "/Users/movalle/Documents/GitHub/test-enhanced-app/node_modules/@atlaskit/navigation-system/dist/esm/ui/menu-item/expandable-menu-item/expandable-menu-item.compiled.css";
var relativeStyles = {
  root: "_kqswh2mm"
};
var ExpandableMenuItem = (0, import_react.forwardRef)(function(_ref, forwardedRef) {
  var isExpandedControlled = _ref.isExpanded, _ref$isDefaultExpande = _ref.isDefaultExpanded, isDefaultExpanded = _ref$isDefaultExpande === void 0 ? false : _ref$isDefaultExpande, onExpansionToggle = _ref.onExpansionToggle, children = _ref.children, dropIndicator = _ref.dropIndicator;
  var _useControlled = useControlled(isExpandedControlled, function() {
    return isDefaultExpanded;
  }), _useControlled2 = _slicedToArray(_useControlled, 2), isExpanded = _useControlled2[0], setIsExpanded = _useControlled2[1];
  return React.createElement(IsExpandedContext.Provider, {
    value: isExpanded
  }, React.createElement(SetIsExpandedContext.Provider, {
    value: setIsExpanded
  }, React.createElement(OnExpansionToggleContext.Provider, {
    value: onExpansionToggle !== null && onExpansionToggle !== void 0 ? onExpansionToggle : null
  }, React.createElement(MenuListItem, {
    ref: forwardedRef
  }, React.createElement("div", {
    className: ax([dropIndicator && relativeStyles.root])
  }, children, dropIndicator)))));
});

// node_modules/@atlaskit/navigation-system/dist/esm/ui/menu-item/expandable-menu-item/expandable-menu-item-trigger.js
init_extends();
init_runtime();
var import_react2 = __toESM(require_react());
import "/Users/movalle/Documents/GitHub/test-enhanced-app/node_modules/@atlaskit/navigation-system/dist/esm/ui/menu-item/expandable-menu-item/expandable-menu-item-trigger.compiled.css";
var import_chevron_down = __toESM(require_chevron_down());
var import_chevron_right = __toESM(require_chevron_right());
init_esm();
var wrapperStyles = {
  root: "_1mmi1txw _165nglyw",
  showProvidedElemBefore: "_1mmiglyw _165n1bgi _v9u71txw _1hl9glyw _b31z1txw _1vnl1txw _12xsglyw _p8btglyw"
};
var iconStyles = {
  chevron: "_1e0ciw0t _1tz3r0mg",
  providedElemBefore: "_1e0c1xb2",
  providedElemBeforeSelected: "_syaz1qo3"
};
var ExpandableMenuItemIcon = function ExpandableMenuItemIcon2(_ref) {
  var iconProps = _ref.iconProps, isExpanded = _ref.isExpanded, isSelected = _ref.isSelected, providedElemBefore = _ref.providedElemBefore;
  var ChevronIcon = isExpanded ? import_chevron_down.default : import_chevron_right.default;
  var chevronElem = import_react2.default.createElement(ChevronIcon, _extends({}, iconProps, {
    label: "",
    color: isSelected ? "var(--ds-icon-selected, #0C66E4)" : void 0,
    size: "small"
  }));
  return import_react2.default.createElement(import_react2.default.Fragment, null, import_react2.default.createElement("div", {
    className: ax([iconStyles.chevron])
  }, chevronElem), providedElemBefore && import_react2.default.createElement("div", {
    className: ax([iconStyles.providedElemBefore, isSelected && iconStyles.providedElemBeforeSelected])
  }, providedElemBefore));
};
var ExpandableMenuItemTrigger = (0, import_react2.forwardRef)(function(_ref2, forwardedRef) {
  var actions = _ref2.actions, isSelected = _ref2.isSelected, href = _ref2.href, providedElemBefore = _ref2.elemBefore, elemAfter = _ref2.elemAfter, actionsOnHover = _ref2.actionsOnHover, onClick = _ref2.onClick, children = _ref2.children, testId = _ref2.testId, interactionName = _ref2.interactionName, isContentTooltipDisabled = _ref2.isContentTooltipDisabled, visualContentRef = _ref2.visualContentRef, isDragging = _ref2.isDragging, hasDragIndicator = _ref2.hasDragIndicator, dropIndicator = _ref2.dropIndicator;
  var id = (0, import_react2.useId)();
  var onExpansionToggle = useOnExpansionToggle();
  var isExpanded = useIsExpanded();
  var setIsExpanded = useSetIsExpanded();
  var itemRef = (0, import_react2.useRef)(null);
  var handleIconClick = (0, import_react2.useCallback)(function() {
    onExpansionToggle === null || onExpansionToggle === void 0 || onExpansionToggle(!isExpanded);
    setIsExpanded(!isExpanded);
  }, [isExpanded, onExpansionToggle, setIsExpanded]);
  var handleMenuContentClick = (0, import_react2.useCallback)(function(event, analyticsEvent) {
    var newValue = !isExpanded;
    onClick === null || onClick === void 0 || onClick(event, analyticsEvent, {
      isExpanded: newValue
    });
    onExpansionToggle === null || onExpansionToggle === void 0 || onExpansionToggle(newValue);
    setIsExpanded(newValue);
  }, [onClick, onExpansionToggle, isExpanded, setIsExpanded]);
  var isSelectable = typeof href !== "undefined";
  useScrollMenuItemIntoView({
    elementRef: itemRef,
    isSelected: Boolean(isSelectable && isSelected)
  });
  var elemBefore = isSelectable ? import_react2.default.createElement(button_default, {
    icon: function icon(iconProps) {
      return import_react2.default.createElement(ExpandableMenuItemIcon, {
        iconProps,
        isExpanded,
        isSelected,
        providedElemBefore
      });
    },
    "aria-expanded": isExpanded,
    "aria-labelledby": fg("platform_dst_expandable_menu_item_elembefore_label") ? id : void 0,
    label: fg("platform_dst_expandable_menu_item_elembefore_label") ? "" : isExpanded ? "Collapse" : "Expand",
    appearance: "subtle",
    spacing: "compact",
    onClick: handleIconClick,
    interactionName,
    testId: testId ? "".concat(testId, "--elem-before-button") : void 0
  }) : import_react2.default.createElement(ExpandableMenuItemIcon, {
    isExpanded,
    isSelected,
    providedElemBefore
  });
  return import_react2.default.createElement("div", {
    ref: itemRef,
    className: ax([wrapperStyles.root, providedElemBefore && wrapperStyles.showProvidedElemBefore])
  }, import_react2.default.createElement(MenuItemBase, {
    id,
    actions,
    actionsOnHover,
    elemBefore,
    ariaExpanded: isExpanded,
    elemAfter,
    href,
    isSelected,
    onClick: handleMenuContentClick,
    ref: forwardedRef,
    visualContentRef,
    testId,
    interactionName,
    isContentTooltipDisabled,
    isDragging,
    hasDragIndicator,
    dropIndicator
  }, children));
});

// node_modules/@atlaskit/navigation-system/dist/esm/ui/menu-item/expandable-menu-item/expandable-menu-item-content.js
var React3 = __toESM(require_react());
init_runtime();
var import_react3 = __toESM(require_react());
import "/Users/movalle/Documents/GitHub/test-enhanced-app/node_modules/@atlaskit/navigation-system/dist/esm/ui/menu-item/expandable-menu-item/expandable-menu-item-content.compiled.css";
var styles = {
  content: "_bozg1crf",
  collapsedContent: "_1e0cglyw"
};
var ExpandableMenuItemContent = (0, import_react3.forwardRef)(function(_ref, forwardedRef) {
  var children = _ref.children;
  var isExpanded = useIsExpanded();
  var level = useLevel();
  var hasExpanded = (0, import_react3.useRef)(false);
  var areAllAncestorsExpanded = useAreAllAncestorsExpanded();
  if (!isExpanded && !hasExpanded.current) {
    return null;
  }
  hasExpanded.current = true;
  return React3.createElement(LevelContext.Provider, {
    value: level + 1
  }, React3.createElement(AreAllAncestorsExpandedContext.Provider, {
    value: (
      /**
       * By combining the current ancestor and with the current menu item's state, all nested menu items will know if their
       * ancestor menu items are all expanded.
       */
      areAllAncestorsExpanded && isExpanded
    )
  }, React3.createElement(List, {
    ref: forwardedRef,
    xcss: cx(styles.content, !isExpanded && styles.collapsedContent)
  }, children)));
});

// node_modules/@atlaskit/navigation-system/dist/esm/ui/menu-item/top-level-spacer.js
var React4 = __toESM(require_react());
init_runtime();
var import_react5 = __toESM(require_react());
import "/Users/movalle/Documents/GitHub/test-enhanced-app/node_modules/@atlaskit/navigation-system/dist/esm/ui/menu-item/top-level-spacer.compiled.css";
var styles2 = {
  root: "_4t3iutpp"
};
function TopLevelSpacer() {
  var level = useLevel();
  (0, import_react5.useEffect)(function() {
    if (true) {
      if (level !== 0) {
        throw new Error("TopLevelSpacer should only be used in the top level of the menu. Please speak with DST if you have a novel use case.");
      }
    }
  }, [level]);
  return React4.createElement("div", {
    className: ax([styles2.root])
  });
}

// node_modules/@atlaskit/navigation-system/dist/esm/ui/page-layout/aside.js
init_defineProperty();
init_slicedToArray();
var React5 = __toESM(require_react());
init_runtime();
var import_react6 = __toESM(require_react());
import "/Users/movalle/Documents/GitHub/test-enhanced-app/node_modules/@atlaskit/navigation-system/dist/esm/ui/page-layout/aside.compiled.css";
var panelSplitterResizingVar = "--n_asdRsz";
var asideWidthSlotBounds = {
  min: "0px",
  max: "50vw"
};
var asideWidthResizeBounds = {
  min: "120px",
  max: "50vw"
};
function getResizeBounds() {
  return asideWidthResizeBounds;
}
var styles3 = {
  root: "_nd5lns35 _vchhusvi _kqswh2mm _glte1kzp _ndwch9n0",
  inner: "_1reo1wug _18m91wug _152timx3 _4t3i1osq _165teqxy _13wn1if8"
};
function Aside(_ref) {
  var children = _ref.children, xcss = _ref.xcss, _ref$defaultWidth = _ref.defaultWidth, defaultWidth = _ref$defaultWidth === void 0 ? 330 : _ref$defaultWidth, _ref$label = _ref.label, label = _ref$label === void 0 ? "Aside" : _ref$label, _ref$skipLinkLabel = _ref.skipLinkLabel, skipLinkLabel = _ref$skipLinkLabel === void 0 ? label : _ref$skipLinkLabel, testId = _ref.testId, providedId = _ref.id;
  var dangerouslyHoistSlotSizes = (0, import_react6.useContext)(DangerouslyHoistSlotSizes);
  var id = useLayoutId({
    providedId
  });
  useSkipLinkInternal({
    id,
    label: skipLinkLabel,
    isHidden: defaultWidth === 0
  });
  var ref = (0, import_react6.useRef)(null);
  var _useState = (0, import_react6.useState)(defaultWidth), _useState2 = _slicedToArray(_useState, 2), width = _useState2[0], setWidth = _useState2[1];
  var previousWidthProp = usePreviousValue(defaultWidth);
  (0, import_react6.useEffect)(function() {
    setWidth(defaultWidth);
  }, [defaultWidth]);
  (0, import_react6.useEffect)(function() {
    if (true) {
      if (previousWidthProp !== void 0 && defaultWidth !== previousWidthProp) {
        console.warn("Page Layout warning\n\n", "The value of the `defaultWidth` prop on the `Aside` layout slot component has changed. This should not be changed after the component has been mounted.\n\n", "In the future, changes to the `defaultWidth` prop will not be respected. It is only supported as a stopgap to enable migration from Nav3 to Nav4.\n\n");
      }
    }
  }, [defaultWidth, previousWidthProp]);
  var asideVariableWidth = "clamp(".concat(asideWidthSlotBounds.min, ", ").concat(width, "px, ").concat(asideWidthSlotBounds.max, ")");
  useResizingWidthCssVarOnRootElement({
    isEnabled: dangerouslyHoistSlotSizes,
    panelId: asidePanelSplitterId,
    cssVar: panelSplitterResizingVar
  });
  return React5.createElement(
    "aside",
    {
      id,
      "data-layout-slot": true,
      "aria-label": label,
      className: ax([styles3.root, xcss]),
      style: _defineProperty({}, asideVar, asideVariableWidth),
      "data-testid": testId,
      ref
    },
    dangerouslyHoistSlotSizes && // ------ START UNSAFE STYLES ------
    // These styles are only needed for the UNSAFE legacy use case for Jira + Confluence.
    // When they aren't needed anymore we can delete them wholesale.
    React5.createElement(DangerouslyHoistCssVarToDocumentRoot, {
      variableName: UNSAFE_asideLayoutVar,
      value: "0px",
      mediaQuery: media.above.md,
      responsiveValue: "var(".concat(panelSplitterResizingVar, ", ").concat(asideVariableWidth, ")")
    }),
    React5.createElement(PanelSplitterProvider, {
      panelId: asidePanelSplitterId,
      panelRef: ref,
      panelWidth: width,
      onCompleteResize: setWidth,
      getResizeBounds,
      resizingCssVar: panelSplitterResizingVar,
      position: "start"
    }, React5.createElement("div", {
      "data-testid": testId ? "".concat(testId, "--inner") : void 0,
      className: ax([styles3.inner])
    }, children))
  );
}

// node_modules/@atlaskit/navigation-system/dist/esm/ui/page-layout/banner.js
var React6 = __toESM(require_react());
init_runtime();
var import_react7 = __toESM(require_react());
import "/Users/movalle/Documents/GitHub/test-enhanced-app/node_modules/@atlaskit/navigation-system/dist/esm/ui/page-layout/banner.compiled.css";
var styles4 = {
  root: "_nd5ldkfm _1reo15vq _18m915vq _4t3iutvi _152tidpf _kqsw1if8 _1pbyegat"
};
function Banner(_ref) {
  var children = _ref.children, xcss = _ref.xcss, _ref$height = _ref.height, height = _ref$height === void 0 ? 48 : _ref$height, _ref$skipLinkLabel = _ref.skipLinkLabel, skipLinkLabel = _ref$skipLinkLabel === void 0 ? "Banner" : _ref$skipLinkLabel, testId = _ref.testId, providedId = _ref.id;
  var dangerouslyHoistSlotSizes = (0, import_react7.useContext)(DangerouslyHoistSlotSizes);
  var id = useLayoutId({
    providedId
  });
  useSkipLinkInternal({
    id,
    label: skipLinkLabel,
    isHidden: height === 0
  });
  return React6.createElement(
    "div",
    {
      id,
      "data-layout-slot": true,
      className: ax([styles4.root, xcss]),
      "data-testid": testId
    },
    React6.createElement(HoistCssVarToLocalGrid, {
      variableName: bannerMountedVar,
      value: height
    }),
    dangerouslyHoistSlotSizes && // ------ START UNSAFE STYLES ------
    // These styles are only needed for the UNSAFE legacy use case for Jira + Confluence.
    // When they aren't needed anymore we can delete them wholesale.
    React6.createElement(DangerouslyHoistCssVarToDocumentRoot, {
      variableName: UNSAFE_bannerVar,
      value: height
    }),
    children
  );
}

// node_modules/@atlaskit/navigation-system/dist/esm/ui/page-layout/panel.js
init_defineProperty();
init_slicedToArray();
var React7 = __toESM(require_react());
init_runtime();
var import_react8 = __toESM(require_react());
init_esm();
import "/Users/movalle/Documents/GitHub/test-enhanced-app/node_modules/@atlaskit/navigation-system/dist/esm/ui/page-layout/panel.compiled.css";
var panelSplitterResizingVar2 = "--n_pnlRsz";
var fallbackResizeMinWidth = 400;
var styles5 = {
  root: "_nd5l1b6c _10fph9n0 _vchhusvi _1pbykb7n _4t3ieqxy _kqsw1if8 _152timx3 _bfhk1bhr _14b54rrg _4ap3vuon _1dhy1c6w _9sns1wug",
  border: "_191wglyw _16qs1cd0 _1w6ezgxb _scbpglyw",
  scrollContainer: "_1reo1wug _18m91wug _4t3i1osq",
  hidden: "_1e0cglyw",
  oldMobileWidth: "_1bsb1adv",
  newMobileWidth: "_1bsb1dxx"
};
function Panel(_ref) {
  var children = _ref.children, _ref$defaultWidth = _ref.defaultWidth, defaultWidth = _ref$defaultWidth === void 0 ? 365 : _ref$defaultWidth, _ref$label = _ref.label, label = _ref$label === void 0 ? "Panel" : _ref$label, _ref$skipLinkLabel = _ref.skipLinkLabel, skipLinkLabel = _ref$skipLinkLabel === void 0 ? label : _ref$skipLinkLabel, testId = _ref.testId, providedId = _ref.id, xcss = _ref.xcss, _ref$hasBorder = _ref.hasBorder, hasBorder = _ref$hasBorder === void 0 ? fg("platform_design_system_nav4_panel_default_border") : _ref$hasBorder;
  var dangerouslyHoistSlotSizes = (0, import_react8.useContext)(DangerouslyHoistSlotSizes);
  var id = useLayoutId({
    providedId
  });
  useSkipLinkInternal({
    id,
    label: skipLinkLabel,
    isHidden: defaultWidth === 0
  });
  var ref = (0, import_react8.useRef)(null);
  var _useState = (0, import_react8.useState)(defaultWidth), _useState2 = _slicedToArray(_useState, 2), width = _useState2[0], setWidth = _useState2[1];
  var defaultWidthRef = (0, import_react8.useRef)(defaultWidth);
  (0, import_react8.useEffect)(function() {
    if (defaultWidthRef.current === defaultWidth) {
      return;
    }
    defaultWidthRef.current = defaultWidth;
    setWidth(defaultWidth);
    if (true) {
      console.warn("Page Layout warning\n\n", "The value of the `defaultWidth` prop on the `Panel` layout slot component has changed. This should not be changed after the component has been mounted.\n\n", "In the future, changes to the `defaultWidth` prop will not be respected. It is only supported as a stopgap to enable migration from Nav3 to Nav4.\n\n");
    }
  }, [defaultWidth]);
  var sideNavRef = useSideNavRef();
  var minWidth = Math.min(defaultWidth, fallbackResizeMinWidth);
  var getResizeBounds2 = (0, import_react8.useCallback)(function() {
    var _sideNavRef$current$o, _sideNavRef$current;
    var sideNavWidth = (_sideNavRef$current$o = (_sideNavRef$current = sideNavRef.current) === null || _sideNavRef$current === void 0 ? void 0 : _sideNavRef$current.offsetWidth) !== null && _sideNavRef$current$o !== void 0 ? _sideNavRef$current$o : 0;
    var maxWidth = Math.round((window.innerWidth - sideNavWidth) / 2);
    return {
      min: "".concat(minWidth, "px"),
      max: "".concat(maxWidth, "px")
    };
  }, [minWidth, sideNavRef]);
  var panelWidthSlotBounds = {
    min: "".concat(minWidth, "px"),
    // `sideNavLiveWidthVar` is not defined if the `SideNav` is not mounted, so we fallback to `0px`.
    max: "round(nearest, calc((100vw - var(".concat(sideNavLiveWidthVar, ", 0px)) / 2), 1px)")
  };
  var panelVariableWidth = "clamp(".concat(panelWidthSlotBounds.min, ", ").concat(width, "px, ").concat(panelWidthSlotBounds.max, ")");
  useResizingWidthCssVarOnRootElement({
    isEnabled: dangerouslyHoistSlotSizes,
    cssVar: panelSplitterResizingVar2,
    panelId: panelPanelSplitterId
  });
  return React7.createElement(
    "section",
    {
      id,
      "data-layout-slot": true,
      "aria-label": label,
      className: ax([styles5.root, defaultWidth === 0 && styles5.hidden, hasBorder && styles5.border, fg("platform_design_system_nav4_panel_mobile_width_fix") ? styles5.newMobileWidth : styles5.oldMobileWidth, xcss]),
      style: _defineProperty(_defineProperty({}, panelVar, panelVariableWidth), "--minWidth", fg("platform_design_system_nav4_panel_mobile_width_fix") ? "".concat(minWidth, "px") : void 0),
      "data-testid": testId,
      ref
    },
    dangerouslyHoistSlotSizes && // ------ START UNSAFE STYLES ------
    // These styles are only needed for the UNSAFE legacy use case for Jira + Confluence.
    // When they aren't needed anymore we can delete them wholesale.
    React7.createElement(DangerouslyHoistCssVarToDocumentRoot, {
      variableName: UNSAFE_panelLayoutVar,
      value: "0px",
      mediaQuery: media.above.lg,
      responsiveValue: "var(".concat(panelSplitterResizingVar2, ", ").concat(panelVariableWidth, ")")
    }),
    React7.createElement(PanelSplitterProvider, {
      panelId: panelPanelSplitterId,
      panelRef: ref,
      panelWidth: width,
      onCompleteResize: setWidth,
      getResizeBounds: getResizeBounds2,
      resizingCssVar: panelSplitterResizingVar2,
      position: "start"
    }, React7.createElement("div", {
      className: ax([styles5.scrollContainer])
    }, children))
  );
}
export {
  AppLogo,
  AppSwitcher,
  Aside,
  Banner,
  ButtonMenuItem,
  COLLAPSE_ELEM_BEFORE,
  ChatButton,
  ContainerAvatar,
  CreateButton,
  CustomLogo,
  Divider,
  EndItem,
  ExpandableMenuItem,
  ExpandableMenuItemContent,
  ExpandableMenuItemTrigger,
  FlyoutMenuItem,
  FlyoutMenuItemContent,
  FlyoutMenuItemTrigger,
  Help,
  LinkMenuItem,
  LogIn,
  Main,
  MainStickyHeader,
  MenuList,
  MenuListItem,
  MenuSection,
  MenuSectionHeading,
  Notifications,
  Panel,
  PanelSplitter,
  PanelSplitterProvider,
  Profile,
  Root,
  Search,
  Settings,
  SideNav,
  SideNavContent,
  SideNavFooter,
  SideNavHeader,
  SideNavToggleButton,
  TopLevelSpacer,
  TopNav,
  TopNavEnd,
  TopNavMiddle,
  TopNavStart,
  useIsExpanded,
  useToggleSideNav
};
//# sourceMappingURL=@atlaskit_navigation-system.js.map
