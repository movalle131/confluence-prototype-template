import {
  IsOpenContext,
  MenuItemBase,
  SetIsOpenContext
} from "./chunk-DPWWAOPN.js";
import {
  useControlled
} from "./chunk-LW47WXE2.js";
import {
  MenuListItem
} from "./chunk-EL4KPZI4.js";
import {
  Layering,
  popper_wrapper_default,
  useGetMemoizedMergedTriggerRef,
  usePopupAppearance
} from "./chunk-NIAVOAE6.js";
import {
  usePreviousValue
} from "./chunk-3WCTIX47.js";
import {
  base_new_exports,
  init_base_new
} from "./chunk-ZJT24HX4.js";
import {
  Portal
} from "./chunk-PA42JLCQ.js";
import {
  Manager,
  Reference
} from "./chunk-CU24BLAG.js";
import {
  useNotifyOpenLayerObserver
} from "./chunk-GSLSGJXD.js";
import {
  invariant
} from "./chunk-XUSVWCLU.js";
import {
  noop
} from "./chunk-LRKC55FU.js";
import {
  useId
} from "./chunk-WD223FES.js";
import {
  mergeRefs
} from "./chunk-HDYTRULV.js";
import {
  ax,
  init_runtime
} from "./chunk-XC7QRLB3.js";
import {
  _slicedToArray,
  fg,
  init_esm,
  init_slicedToArray
} from "./chunk-WFA677R7.js";
import {
  require_react
} from "./chunk-QJTFJ6OV.js";
import {
  __commonJS,
  __toCommonJS,
  __toESM
} from "./chunk-V4OQ3NZ2.js";

// node_modules/@atlaskit/icon/core/chevron-right.js
var require_chevron_right = __commonJS({
  "node_modules/@atlaskit/icon/core/chevron-right.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _react = _interopRequireDefault(require_react());
    var _baseNew = _interopRequireDefault((init_base_new(), __toCommonJS(base_new_exports)));
    function _interopRequireDefault(e) {
      return e && e.__esModule ? e : { default: e };
    }
    var ChevronRightIcon2 = (props) => _react.default.createElement(_baseNew.default, Object.assign({
      dangerouslySetGlyph: `<path fill="currentcolor" d="m6.03 1.47 6 6a.75.75 0 0 1 .052 1.004l-.052.056-6 6-1.06-1.06L10.44 8 4.97 2.53z"/>`
      // eslint-disable-next-line @repo/internal/react/no-unsafe-spread-props
    }, props));
    ChevronRightIcon2.displayName = "ChevronRightIcon";
    var _default = exports.default = ChevronRightIcon2;
  }
});

// node_modules/@atlaskit/navigation-system/dist/esm/ui/menu-item/flyout-menu-item/flyout-menu-item.js
init_slicedToArray();
var import_react2 = __toESM(require_react());

// node_modules/@atlaskit/popup/dist/esm/compositional/popup.js
init_slicedToArray();
var import_react = __toESM(require_react());
var IsOpenContext2 = (0, import_react.createContext)(false);
var IdContext = (0, import_react.createContext)(void 0);
var TriggerRefContext = (0, import_react.createContext)(null);
var SetTriggerRefContext = (0, import_react.createContext)(noop);
var EnsureIsInsidePopupContext = (0, import_react.createContext)(false);
var useEnsureIsInsidePopup = function useEnsureIsInsidePopup2() {
  var context = (0, import_react.useContext)(EnsureIsInsidePopupContext);
  invariant(context, "PopupTrigger and PopupContent components must be used within a Popup");
};
var Popup = function Popup2(_ref) {
  var children = _ref.children, providedId = _ref.id, _ref$isOpen = _ref.isOpen, isOpen = _ref$isOpen === void 0 ? false : _ref$isOpen;
  var _useState = (0, import_react.useState)(null), _useState2 = _slicedToArray(_useState, 2), triggerRef = _useState2[0], setTriggerRef = _useState2[1];
  var generatedId = useId();
  var id = providedId || generatedId;
  return import_react.default.createElement(EnsureIsInsidePopupContext.Provider, {
    value: true
  }, import_react.default.createElement(IdContext.Provider, {
    value: id
  }, import_react.default.createElement(TriggerRefContext.Provider, {
    value: triggerRef
  }, import_react.default.createElement(SetTriggerRefContext.Provider, {
    value: setTriggerRef
  }, import_react.default.createElement(IsOpenContext2.Provider, {
    value: isOpen
  }, import_react.default.createElement(Manager, null, children))))));
};
var PopupTrigger = function PopupTrigger2(_ref2) {
  var children = _ref2.children;
  useEnsureIsInsidePopup();
  var isOpen = (0, import_react.useContext)(IsOpenContext2);
  var id = (0, import_react.useContext)(IdContext);
  var setTriggerRef = (0, import_react.useContext)(SetTriggerRefContext);
  var getMergedTriggerRef = useGetMemoizedMergedTriggerRef();
  return import_react.default.createElement(Reference, null, function(_ref3) {
    var ref = _ref3.ref;
    return children({
      ref: getMergedTriggerRef(ref, setTriggerRef, isOpen),
      "aria-controls": id,
      "aria-expanded": isOpen,
      "aria-haspopup": true
    });
  });
};
var defaultLayer = 400;
var shouldDisableGpuAccelerationModifiers = [{
  name: "computeStyles",
  options: {
    gpuAcceleration: false
  }
}];
var PopupContent = function PopupContent2(_ref4) {
  var xcss = _ref4.xcss, _ref4$appearance = _ref4.appearance, inAppearance = _ref4$appearance === void 0 ? "default" : _ref4$appearance, children = _ref4.children, boundary = _ref4.boundary, offset = _ref4.offset, strategy = _ref4.strategy, onClose = _ref4.onClose, testId = _ref4.testId, _ref4$rootBoundary = _ref4.rootBoundary, rootBoundary = _ref4$rootBoundary === void 0 ? "viewport" : _ref4$rootBoundary, _ref4$shouldFlip = _ref4.shouldFlip, shouldFlip = _ref4$shouldFlip === void 0 ? true : _ref4$shouldFlip, _ref4$placement = _ref4.placement, placement = _ref4$placement === void 0 ? "auto" : _ref4$placement, fallbackPlacements = _ref4.fallbackPlacements, popupComponent = _ref4.popupComponent, _ref4$autoFocus = _ref4.autoFocus, autoFocus = _ref4$autoFocus === void 0 ? true : _ref4$autoFocus, _ref4$zIndex = _ref4.zIndex, zIndex = _ref4$zIndex === void 0 ? defaultLayer : _ref4$zIndex, _ref4$shouldUseCaptur = _ref4.shouldUseCaptureOnOutsideClick, shouldUseCaptureOnOutsideClick = _ref4$shouldUseCaptur === void 0 ? false : _ref4$shouldUseCaptur, inShouldRenderToParent = _ref4.shouldRenderToParent, _ref4$shouldDisableFo = _ref4.shouldDisableFocusLock, shouldDisableFocusLock = _ref4$shouldDisableFo === void 0 ? false : _ref4$shouldDisableFo, shouldFitContainer = _ref4.shouldFitContainer, shouldFitViewport = _ref4.shouldFitViewport, _ref4$shouldDisableGp = _ref4.shouldDisableGpuAcceleration, shouldDisableGpuAcceleration = _ref4$shouldDisableGp === void 0 ? false : _ref4$shouldDisableGp;
  useEnsureIsInsidePopup();
  var isOpen = (0, import_react.useContext)(IsOpenContext2);
  var id = (0, import_react.useContext)(IdContext);
  var triggerRef = (0, import_react.useContext)(TriggerRefContext);
  var _usePopupAppearance = usePopupAppearance({
    appearance: inAppearance,
    shouldRenderToParent: inShouldRenderToParent
  }), appearance = _usePopupAppearance.appearance, shouldRenderToParent = _usePopupAppearance.shouldRenderToParent;
  var handleOpenLayerObserverCloseSignal = (0, import_react.useCallback)(function() {
    onClose === null || onClose === void 0 || onClose(null);
  }, [onClose]);
  useNotifyOpenLayerObserver({
    isOpen,
    onClose: handleOpenLayerObserverCloseSignal
  });
  if (!isOpen) {
    return null;
  }
  var popperWrapper = import_react.default.createElement(Layering, {
    isDisabled: false
  }, import_react.default.createElement(popper_wrapper_default, {
    xcss,
    appearance,
    content: children,
    isOpen,
    placement,
    fallbackPlacements,
    boundary,
    rootBoundary,
    shouldFlip,
    offset,
    popupComponent,
    id,
    testId,
    onClose,
    autoFocus,
    shouldFitContainer,
    shouldUseCaptureOnOutsideClick,
    shouldRenderToParent,
    shouldDisableFocusLock,
    triggerRef,
    strategy,
    shouldFitViewport,
    modifiers: shouldDisableGpuAcceleration ? shouldDisableGpuAccelerationModifiers : void 0
  }));
  if (shouldRenderToParent) {
    return popperWrapper;
  }
  return import_react.default.createElement(Portal, {
    zIndex
  }, popperWrapper);
};

// node_modules/@atlaskit/navigation-system/dist/esm/ui/menu-item/flyout-menu-item/flyout-menu-item.js
var FlyoutMenuItem = (0, import_react2.forwardRef)(function(_ref, forwardedRef) {
  var children = _ref.children, id = _ref.id, isOpenControlled = _ref.isOpen, _ref$isDefaultOpen = _ref.isDefaultOpen, isDefaultOpen = _ref$isDefaultOpen === void 0 ? false : _ref$isDefaultOpen, onOpenChange = _ref.onOpenChange;
  var _useControlled = useControlled(isOpenControlled, function() {
    return isDefaultOpen;
  }), _useControlled2 = _slicedToArray(_useControlled, 2), isOpen = _useControlled2[0], setIsOpen = _useControlled2[1];
  var previousIsOpen = usePreviousValue(isOpen);
  (0, import_react2.useEffect)(function() {
    if (previousIsOpen === void 0 || previousIsOpen === isOpen) {
      return;
    }
    onOpenChange === null || onOpenChange === void 0 || onOpenChange(isOpen);
  }, [isOpen, onOpenChange, previousIsOpen]);
  return import_react2.default.createElement(IsOpenContext.Provider, {
    value: isOpen
  }, import_react2.default.createElement(SetIsOpenContext.Provider, {
    value: setIsOpen
  }, import_react2.default.createElement(MenuListItem, {
    ref: forwardedRef
  }, import_react2.default.createElement(Popup, {
    id,
    isOpen
  }, children))));
});

// node_modules/@atlaskit/navigation-system/dist/esm/ui/menu-item/flyout-menu-item/flyout-menu-item-content.js
init_slicedToArray();
init_runtime();
var import_react3 = __toESM(require_react());
import "/Users/movalle/Documents/GitHub/test-enhanced-app/node_modules/@atlaskit/navigation-system/dist/esm/ui/menu-item/flyout-menu-item/flyout-menu-item-content.compiled.css";
init_esm();
var flyoutMenuItemContentStyles = {
  root: "_1q51u2gc _85i5u2gc _bozgu2gc _y4tiu2gc _14b51kdj"
};
var FlyoutMenuItemContent = (0, import_react3.forwardRef)(function(_ref, forwardedRef) {
  var children = _ref.children, containerTestId = _ref.containerTestId, onClose = _ref.onClose, autoFocus = _ref.autoFocus;
  var setIsOpen = (0, import_react3.useContext)(SetIsOpenContext);
  var handleClose = (0, import_react3.useCallback)(function() {
    onClose === null || onClose === void 0 || onClose();
    setIsOpen(false);
  }, [setIsOpen, onClose]);
  return import_react3.default.createElement(PopupContent, {
    appearance: "UNSAFE_modal-below-sm",
    onClose: handleClose,
    placement: "right-start",
    shouldUseCaptureOnOutsideClick: fg("platform_dst_nav4_flyout_use_capture_outside"),
    shouldFitViewport: true,
    testId: containerTestId,
    xcss: flyoutMenuItemContentStyles.root,
    autoFocus,
    shouldDisableGpuAcceleration: true
  }, function(_ref2) {
    var update = _ref2.update;
    return import_react3.default.createElement(UpdatePopperOnContentResize, {
      ref: forwardedRef,
      update
    }, children);
  });
});
function createResizeObserver(update) {
  return new ResizeObserver(update);
}
var UpdatePopperOnContentResize = (0, import_react3.forwardRef)(function(_ref3, forwardedRef) {
  var update = _ref3.update, children = _ref3.children;
  var updateRef = (0, import_react3.useRef)(update);
  (0, import_react3.useEffect)(function() {
    updateRef.current = update;
  }, [update]);
  var triggerUpdate = (0, import_react3.useCallback)(function() {
    var _updateRef$current;
    (_updateRef$current = updateRef.current) === null || _updateRef$current === void 0 || _updateRef$current.call(updateRef);
  }, []);
  var _useState = (0, import_react3.useState)(function() {
    return createResizeObserver(triggerUpdate);
  }), _useState2 = _slicedToArray(_useState, 1), resizeObserver = _useState2[0];
  var observeCallbackRef = (0, import_react3.useCallback)(function(element) {
    resizeObserver.disconnect();
    if (!element) {
      return;
    }
    resizeObserver.observe(element);
  }, [resizeObserver]);
  var ref = (0, import_react3.useMemo)(function() {
    return mergeRefs([forwardedRef, observeCallbackRef]);
  }, [forwardedRef, observeCallbackRef]);
  return import_react3.default.createElement("div", {
    ref
  }, children);
});

// node_modules/@atlaskit/navigation-system/dist/esm/ui/menu-item/flyout-menu-item/flyout-menu-item-trigger.js
var React4 = __toESM(require_react());
init_runtime();
var import_react4 = __toESM(require_react());
import "/Users/movalle/Documents/GitHub/test-enhanced-app/node_modules/@atlaskit/navigation-system/dist/esm/ui/menu-item/flyout-menu-item/flyout-menu-item-trigger.compiled.css";
var import_chevron_right = __toESM(require_chevron_right());
var elemAfterStyles = {
  root: "_18zr12x7 _1tz3r0mg"
};
var FlyoutMenuItemTrigger = (0, import_react4.forwardRef)(function(_ref, forwardedRef) {
  var children = _ref.children, elemBefore = _ref.elemBefore, onClick = _ref.onClick, isSelected = _ref.isSelected, interactionName = _ref.interactionName, testId = _ref.testId, isContentTooltipDisabled = _ref.isContentTooltipDisabled, visualContentRef = _ref.visualContentRef, isDragging = _ref.isDragging, hasDragIndicator = _ref.hasDragIndicator, dropIndicator = _ref.dropIndicator;
  return React4.createElement(PopupTrigger, null, function(_ref2) {
    var ref = _ref2.ref, ariaControls = _ref2["aria-controls"], ariaExpanded = _ref2["aria-expanded"], ariaHasPopup = _ref2["aria-haspopup"];
    return React4.createElement(MenuItemBase, {
      testId,
      ref: mergeRefs([ref, forwardedRef]),
      visualContentRef,
      elemBefore,
      elemAfter: React4.createElement("div", {
        className: ax([elemAfterStyles.root])
      }, React4.createElement(import_chevron_right.default, {
        label: "",
        color: "var(--ds-icon, #44546F)",
        size: "small"
      })),
      onClick,
      ariaControls,
      ariaExpanded,
      ariaHasPopup,
      interactionName,
      isContentTooltipDisabled,
      isSelected,
      isDragging,
      hasDragIndicator,
      dropIndicator
    }, children);
  });
});

export {
  require_chevron_right,
  FlyoutMenuItem,
  FlyoutMenuItemContent,
  FlyoutMenuItemTrigger
};
//# sourceMappingURL=chunk-YBK4GABZ.js.map
