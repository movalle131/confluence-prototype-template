{
  "version": 3,
  "sources": ["../../@atlaskit/app-provider/dist/esm/app-provider.js", "../../@atlaskit/app-provider/dist/esm/router-link-provider/index.js", "../../@atlaskit/app-provider/dist/esm/theme-provider.js", "../../@atlaskit/app-provider/dist/esm/router-link-provider/hooks/use-router-link.js"],
  "sourcesContent": ["import React, { createContext, useContext } from 'react';\nimport RouterLinkProvider from './router-link-provider';\nimport ThemeProvider from './theme-provider';\nvar InsideAppProviderContext = /*#__PURE__*/createContext(false);\n/**\n * __App provider__\n *\n * An app provider provides app level configuration such as global theming.\n *\n * Place it at the root of your application.\n */\nfunction AppProvider(_ref) {\n  var children = _ref.children,\n    _ref$defaultColorMode = _ref.defaultColorMode,\n    defaultColorMode = _ref$defaultColorMode === void 0 ? 'light' : _ref$defaultColorMode,\n    defaultTheme = _ref.defaultTheme,\n    routerLinkComponent = _ref.routerLinkComponent,\n    UNSAFE_isThemingDisabled = _ref.UNSAFE_isThemingDisabled;\n  var isInsideAppProvider = useContext(InsideAppProviderContext);\n  if (isInsideAppProvider) {\n    throw new Error('App provider should not be nested within another app provider.');\n  }\n  var routerLinkProvider = /*#__PURE__*/React.createElement(RouterLinkProvider, {\n    routerLinkComponent: routerLinkComponent\n  }, children);\n  return /*#__PURE__*/React.createElement(InsideAppProviderContext.Provider, {\n    value: true\n  }, UNSAFE_isThemingDisabled ? routerLinkProvider : /*#__PURE__*/React.createElement(ThemeProvider, {\n    defaultColorMode: defaultColorMode,\n    defaultTheme: defaultTheme\n  }, routerLinkProvider));\n}\nexport default AppProvider;", "import React, { createContext } from 'react';\n// eslint-disable-next-line @repo/internal/react/require-jsdoc\nexport var RouterLinkProviderContext = /*#__PURE__*/createContext({});\n/**\n * __RouterLinkProvider__\n *\n * Provides a configured router link component for use\n * within Design System components.\n */\nvar RouterLinkProvider = function RouterLinkProvider(_ref) {\n  var routerLinkComponent = _ref.routerLinkComponent,\n    children = _ref.children;\n  return /*#__PURE__*/React.createElement(RouterLinkProviderContext.Provider, {\n    value: {\n      routerLinkComponent: routerLinkComponent\n    }\n  }, children);\n};\nexport default RouterLinkProvider;", "import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport React, { createContext, useCallback, useContext, useEffect, useRef, useState } from 'react';\nimport { bind } from 'bind-event-listener';\nimport { getGlobalTheme, setGlobalTheme, ThemeMutationObserver } from '@atlaskit/tokens';\nvar defaultThemeSettings = function defaultThemeSettings() {\n  return {\n    dark: 'dark',\n    light: 'light',\n    spacing: 'spacing',\n    typography: 'typography'\n  };\n};\nvar ColorModeContext = /*#__PURE__*/createContext(undefined);\nvar SetColorModeContext = /*#__PURE__*/createContext(undefined);\nvar ThemeContext = /*#__PURE__*/createContext(undefined);\nvar SetThemeContext = /*#__PURE__*/createContext(undefined);\n\n/**\n * __UNSAFE_useColorModeForMigration()__\n *\n * Returns the current color mode when inside the app provider.\n * Unlike useColorMode, this utility returns undefined, instead of throwing an error, when the app provider is missing.\n * This allows it to be used by components that need to operate with and without an app provider.\n */\nexport function UNSAFE_useColorModeForMigration() {\n  var value = useContext(ColorModeContext);\n  return value;\n}\n\n/**\n * __useColorMode()__\n *\n * Returns the current color mode when inside the app provider.\n */\nexport function useColorMode() {\n  var value = useContext(ColorModeContext);\n  var _getGlobalTheme = getGlobalTheme(),\n    colorMode = _getGlobalTheme.colorMode;\n  var _useState = useState(colorMode || 'light'),\n    _useState2 = _slicedToArray(_useState, 2),\n    resolvedColorMode = _useState2[0],\n    setResolvedColorMode = _useState2[1];\n  useEffect(function () {\n    // We are using theme from context so no need to reference the DOM\n    if (value) {\n      return;\n    }\n    var observer = new ThemeMutationObserver(function (theme) {\n      setResolvedColorMode(theme.colorMode || 'light');\n    });\n    observer.observe();\n    return function () {\n      return observer.disconnect();\n    };\n  }, [value]);\n  return value ? value : resolvedColorMode;\n}\n\n/**\n * __useSetColorMode()__\n *\n * Returns the color mode setter when inside the app provider.\n */\nexport function useSetColorMode() {\n  var value = useContext(SetColorModeContext);\n  if (!value) {\n    throw new Error('useSetColorMode must be used within AppProvider.');\n  }\n  return value;\n}\n\n/**\n * __useTheme()__\n *\n * Returns the current theme settings when inside the app provider.\n */\nexport function useTheme() {\n  var theme = useContext(ThemeContext);\n  var _useState3 = useState(theme || getGlobalTheme()),\n    _useState4 = _slicedToArray(_useState3, 2),\n    resolvedTheme = _useState4[0],\n    setResolvedTheme = _useState4[1];\n  useEffect(function () {\n    // We are using theme from context so no need to reference the DOM\n    if (theme) {\n      return;\n    }\n    var observer = new ThemeMutationObserver(setResolvedTheme);\n    observer.observe();\n    return function () {\n      return observer.disconnect();\n    };\n  }, [theme]);\n  return theme ? theme : resolvedTheme;\n}\n\n/**\n * __useSetTheme()__\n *\n * Returns the theme setter when inside the app provider.\n */\nexport function useSetTheme() {\n  var value = useContext(SetThemeContext);\n  if (!value) {\n    throw new Error('useSetTheme must be used within AppProvider.');\n  }\n  return value;\n}\nvar isMatchMediaAvailable = typeof window !== 'undefined' && 'matchMedia' in window;\nvar prefersDarkModeMql = isMatchMediaAvailable ? window.matchMedia('(prefers-color-scheme: dark)') : undefined;\n\n// TODO: currently 'auto' color mode will always return 'light' in SSR.\n// Additional work required: https://product-fabric.atlassian.net/browse/DSP-9781\nfunction getReconciledColorMode(colorMode) {\n  if (colorMode === 'auto') {\n    return prefersDarkModeMql !== null && prefersDarkModeMql !== void 0 && prefersDarkModeMql.matches ? 'dark' : 'light';\n  }\n  return colorMode;\n}\n/**\n * __Theme provider__\n *\n * Provides global theming configuration.\n *\n * @internal\n */\nfunction ThemeProvider(_ref) {\n  var children = _ref.children,\n    defaultColorMode = _ref.defaultColorMode,\n    defaultTheme = _ref.defaultTheme;\n  var _useState5 = useState(defaultColorMode),\n    _useState6 = _slicedToArray(_useState5, 2),\n    chosenColorMode = _useState6[0],\n    setChosenColorMode = _useState6[1];\n  var _useState7 = useState(getReconciledColorMode(defaultColorMode)),\n    _useState8 = _slicedToArray(_useState7, 2),\n    reconciledColorMode = _useState8[0],\n    setReconciledColorMode = _useState8[1];\n  var _useState9 = useState(function () {\n      return _objectSpread(_objectSpread({}, defaultThemeSettings()), defaultTheme);\n    }),\n    _useState0 = _slicedToArray(_useState9, 2),\n    theme = _useState0[0],\n    setTheme = _useState0[1];\n  var setColorMode = useCallback(function (colorMode) {\n    setChosenColorMode(colorMode);\n    setReconciledColorMode(getReconciledColorMode(colorMode));\n  }, []);\n  var setPartialTheme = useCallback(function (nextTheme) {\n    setTheme(function (theme) {\n      return _objectSpread(_objectSpread({}, theme), nextTheme);\n    });\n  }, []);\n  var lastSetGlobalThemePromiseRef = useRef(null);\n  useEffect(function () {\n    /**\n     * We need to wait for any previous `setGlobalTheme` calls to finish before calling it again.\n     * This is to prevent race conditions as `setGlobalTheme` is async and mutates the DOM (e.g. sets the\n     * `data-color-mode` attribute on the root element).\n     *\n     * Since we can't safely abort the `setGlobalTheme` execution, we need to wait for it to properly finish before\n     * applying the new theme.\n     *\n     * Without this, we can end up in the following scenario:\n     * 1. app loads with the default 'light' theme, kicking off `setGlobalTheme`\n     * 2. app switches to 'dark' theme after retrieving value persisted in local storage, calling `setGlobalTheme` again\n     * 3. `setGlobalTheme` function execution for `dark` finishes before the initial `light` execution\n     * 4. `setGlobalTheme` function execution for `light` then finishes, resulting in the 'light' theme being applied.\n     */\n    var cleanupLastFnCall = /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var unbindFn;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              if (!lastSetGlobalThemePromiseRef.current) {\n                _context.next = 6;\n                break;\n              }\n              _context.next = 3;\n              return lastSetGlobalThemePromiseRef.current;\n            case 3:\n              unbindFn = _context.sent;\n              unbindFn();\n              lastSetGlobalThemePromiseRef.current = null;\n            case 6:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee);\n      }));\n      return function cleanupLastFnCall() {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n    var safelySetGlobalTheme = /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var promise;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return cleanupLastFnCall();\n            case 2:\n              promise = setGlobalTheme(_objectSpread(_objectSpread({}, theme), {}, {\n                colorMode: reconciledColorMode\n              }));\n              lastSetGlobalThemePromiseRef.current = promise;\n            case 4:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2);\n      }));\n      return function safelySetGlobalTheme() {\n        return _ref3.apply(this, arguments);\n      };\n    }();\n    safelySetGlobalTheme();\n    return function cleanup() {\n      cleanupLastFnCall();\n    };\n  }, [theme, reconciledColorMode]);\n  useEffect(function () {\n    if (!prefersDarkModeMql) {\n      return;\n    }\n    var unbindListener = bind(prefersDarkModeMql, {\n      type: 'change',\n      listener: function listener(event) {\n        if (chosenColorMode === 'auto') {\n          setReconciledColorMode(event.matches ? 'dark' : 'light');\n        }\n      }\n    });\n    return unbindListener;\n  }, [chosenColorMode]);\n  return /*#__PURE__*/React.createElement(ColorModeContext.Provider, {\n    value: reconciledColorMode\n  }, /*#__PURE__*/React.createElement(SetColorModeContext.Provider, {\n    value: setColorMode\n  }, /*#__PURE__*/React.createElement(ThemeContext.Provider, {\n    value: theme\n  }, /*#__PURE__*/React.createElement(SetThemeContext.Provider, {\n    value: setPartialTheme\n  }, children))));\n}\nexport default ThemeProvider;", "import { useContext } from 'react';\nimport { RouterLinkProviderContext } from '../index';\n\n/**\n * __useRouterLink()__\n *\n * Hook: Returns app-configured router link component.\n *\n * A generic can be passed to define advanced link configuration:\n * ```\n * type MyRouterLinkConfig = {\n *  to: string;\n *  replace?: boolean;\n * }\n *\n * const RouterLink = useRouterLink<MyRouterLinkConfig>();\n * ```\n */\nvar useRouterLink = function useRouterLink() {\n  var _useContext = useContext(RouterLinkProviderContext),\n    routerLinkComponent = _useContext.routerLinkComponent;\n  if (routerLinkComponent) {\n    return routerLinkComponent;\n  }\n};\nexport default useRouterLink;"],
  "mappings": "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",
  "names": ["import_react", "RouterLinkProvider", "React", "import_react", "r", "defaultThemeSettings", "theme", "_regeneratorRuntime", "cleanupLastFnCall", "safelySetGlobalTheme", "React", "React", "import_react", "useRouterLink"]
}
