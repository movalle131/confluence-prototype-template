import {
  invariant
} from "./chunk-XUSVWCLU.js";
import {
  _slicedToArray,
  init_slicedToArray
} from "./chunk-WFA677R7.js";
import {
  require_react
} from "./chunk-QJTFJ6OV.js";
import {
  __toESM
} from "./chunk-V4OQ3NZ2.js";

// node_modules/@atlaskit/layering/dist/esm/components/open-layer-observer/open-layer-observer.js
init_slicedToArray();
var import_react2 = __toESM(require_react());

// node_modules/@atlaskit/layering/dist/esm/components/open-layer-observer/open-layer-observer-context.js
var import_react = __toESM(require_react());
var OpenLayerObserverContext = (0, import_react.createContext)(null);

// node_modules/@atlaskit/layering/dist/esm/components/open-layer-observer/open-layer-observer.js
var noNamespaceSymbol = Symbol("no-namespace");
function getTotalOpenLayerCount(registry) {
  return Array.from(registry.values()).reduce(function(acc, listeners) {
    return acc + listeners.size;
  }, 0);
}
function getListeners(_ref) {
  var registry = _ref.registry, namespace = _ref.namespace;
  var existingListeners = registry.get(namespace);
  if (existingListeners) {
    return existingListeners;
  }
  var newSet = /* @__PURE__ */ new Set();
  registry.set(namespace, newSet);
  return newSet;
}
function createInternalAPI() {
  var namespaceToChangeListenerRegistry = /* @__PURE__ */ new Map();
  var namespaceToLayerCloseListenerRegistry = /* @__PURE__ */ new Map();
  function callChangeListeners(_ref2) {
    var namespace = _ref2.namespace, newCount = _ref2.newCount;
    if (namespace) {
      var listenersForNamespace = namespaceToChangeListenerRegistry.get(namespace);
      Array.from(listenersForNamespace !== null && listenersForNamespace !== void 0 ? listenersForNamespace : []).forEach(function(listener) {
        return listener({
          count: newCount
        });
      });
    }
    var noNamespaceListeners = namespaceToChangeListenerRegistry.get(noNamespaceSymbol);
    if (!noNamespaceListeners) {
      return;
    }
    var totalCount = getTotalOpenLayerCount(namespaceToLayerCloseListenerRegistry);
    Array.from(noNamespaceListeners).forEach(function(listener) {
      return listener({
        count: totalCount
      });
    });
  }
  function getCount() {
    var _ref3 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {}, namespace = _ref3.namespace;
    if (namespace) {
      var _namespaceToLayerClos, _namespaceToLayerClos2;
      return (_namespaceToLayerClos = (_namespaceToLayerClos2 = namespaceToLayerCloseListenerRegistry.get(namespace)) === null || _namespaceToLayerClos2 === void 0 ? void 0 : _namespaceToLayerClos2.size) !== null && _namespaceToLayerClos !== void 0 ? _namespaceToLayerClos : 0;
    }
    return getTotalOpenLayerCount(namespaceToLayerCloseListenerRegistry);
  }
  function onChange(listener) {
    var _ref4 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, providedNamespace = _ref4.namespace;
    function wrapped() {
      listener.apply(void 0, arguments);
    }
    var namespace = providedNamespace !== null && providedNamespace !== void 0 ? providedNamespace : noNamespaceSymbol;
    var listenersForNamespace = getListeners({
      namespace,
      registry: namespaceToChangeListenerRegistry
    });
    listenersForNamespace.add(wrapped);
    return function unsubscribe() {
      listenersForNamespace.delete(wrapped);
      if (listenersForNamespace.size === 0) {
        namespaceToChangeListenerRegistry.delete(namespace);
      }
    };
  }
  function onClose(listener, _ref5) {
    var providedNamespace = _ref5.namespace;
    function wrapped() {
      listener();
    }
    var namespace = providedNamespace !== null && providedNamespace !== void 0 ? providedNamespace : noNamespaceSymbol;
    var listenersForNamespace = getListeners({
      namespace,
      registry: namespaceToLayerCloseListenerRegistry
    });
    listenersForNamespace.add(wrapped);
    callChangeListeners({
      namespace: providedNamespace,
      newCount: listenersForNamespace.size
    });
    return function unsubscribe() {
      listenersForNamespace.delete(wrapped);
      callChangeListeners({
        namespace: providedNamespace,
        newCount: listenersForNamespace.size
      });
      if (listenersForNamespace.size === 0) {
        namespaceToLayerCloseListenerRegistry.delete(namespace);
      }
    };
  }
  function closeLayers() {
    Array.from(namespaceToLayerCloseListenerRegistry.values()).forEach(function(listeners) {
      Array.from(listeners).forEach(function(listener) {
        return listener();
      });
    });
  }
  var internalAPI = {
    getCount,
    onChange,
    onClose,
    closeLayers
  };
  return internalAPI;
}
function OpenLayerObserver(_ref6) {
  var children = _ref6.children;
  var _useState = (0, import_react2.useState)(function() {
    return createInternalAPI();
  }), _useState2 = _slicedToArray(_useState, 1), internalAPI = _useState2[0];
  var parentContext = (0, import_react2.useContext)(OpenLayerObserverContext);
  invariant(parentContext === null, "`OpenLayerObserver` cannot be nested within another `OpenLayerObserver`.");
  return import_react2.default.createElement(OpenLayerObserverContext.Provider, {
    value: internalAPI
  }, children);
}

// node_modules/@atlaskit/layering/dist/esm/components/open-layer-observer/use-open-layer-observer.js
var import_react3 = __toESM(require_react());
function useOpenLayerObserver() {
  var context = (0, import_react3.useContext)(OpenLayerObserverContext);
  invariant(context, "useOpenLayerObserver must be used within an OpenLayerObserver");
  var publicAPI = (0, import_react3.useMemo)(function() {
    return {
      getCount: context.getCount,
      onChange: context.onChange,
      closeLayers: context.closeLayers
    };
  }, [context.getCount, context.onChange, context.closeLayers]);
  return publicAPI;
}

// node_modules/@atlaskit/layering/dist/esm/components/open-layer-observer/open-layer-observer-namespace-provider.js
var import_react6 = __toESM(require_react());

// node_modules/@atlaskit/layering/dist/esm/components/open-layer-observer/open-layer-observer-namespace-context.js
var import_react4 = __toESM(require_react());
var OpenLayerObserverNamespaceContext = (0, import_react4.createContext)(null);

// node_modules/@atlaskit/layering/dist/esm/components/open-layer-observer/use-open-layer-observer-namespace.js
var import_react5 = __toESM(require_react());
function useOpenLayerObserverNamespace() {
  var namespace = (0, import_react5.useContext)(OpenLayerObserverNamespaceContext);
  return namespace;
}

// node_modules/@atlaskit/layering/dist/esm/components/open-layer-observer/open-layer-observer-namespace-provider.js
function OpenLayerObserverNamespaceProvider(_ref) {
  var children = _ref.children, namespace = _ref.namespace;
  var parentContext = useOpenLayerObserverNamespace();
  (0, import_react6.useEffect)(function() {
    invariant(parentContext === null, "An OpenLayerObserver namespace already exists in this component tree: ".concat(parentContext, ". Nesting OpenLayerObserverNamespaceProvider is not supported."));
  }, [parentContext]);
  return import_react6.default.createElement(OpenLayerObserverNamespaceContext.Provider, {
    value: namespace
  }, children);
}

// node_modules/@atlaskit/layering/dist/esm/components/open-layer-observer/use-notify-open-layer-observer.js
var import_react7 = __toESM(require_react());
function useNotifyOpenLayerObserver(_ref) {
  var isOpen = _ref.isOpen, onClose = _ref.onClose;
  var context = (0, import_react7.useContext)(OpenLayerObserverContext);
  var namespace = useOpenLayerObserverNamespace();
  (0, import_react7.useEffect)(function() {
    if (context === null) {
      return;
    }
    if (!isOpen) {
      return;
    }
    return context.onClose(onClose, {
      namespace
    });
  }, [context, isOpen, namespace, onClose]);
}

export {
  OpenLayerObserver,
  useNotifyOpenLayerObserver,
  useOpenLayerObserver,
  OpenLayerObserverNamespaceProvider
};
//# sourceMappingURL=chunk-GSLSGJXD.js.map
