import {
  MenuItemBase,
  useAreAllAncestorsExpanded
} from "./chunk-DPWWAOPN.js";
import {
  ListItem
} from "./chunk-RNXQZLDM.js";
import {
  forwardRefWithGeneric
} from "./chunk-OHIWJLUM.js";
import {
  invariant
} from "./chunk-XUSVWCLU.js";
import {
  mergeRefs
} from "./chunk-HDYTRULV.js";
import {
  init_runtime
} from "./chunk-XC7QRLB3.js";
import {
  require_react
} from "./chunk-QJTFJ6OV.js";
import {
  __toESM
} from "./chunk-V4OQ3NZ2.js";

// node_modules/@atlaskit/navigation-system/dist/esm/ui/menu-item/link-menu-item.js
var React = __toESM(require_react());
init_runtime();
var import_react2 = __toESM(require_react());
import "/Users/movalle/Documents/GitHub/test-enhanced-app/node_modules/@atlaskit/navigation-system/dist/esm/ui/menu-item/link-menu-item.compiled.css";

// node_modules/@atlaskit/navigation-system/dist/esm/ui/menu-item/use-scroll-menu-item-into-view.js
var import_react = __toESM(require_react());
function scrollMenuItemIntoView(element) {
  var _element$scrollIntoVi;
  if (typeof element.scrollIntoViewIfNeeded === "function") {
    element.scrollIntoViewIfNeeded(true);
    return;
  }
  (_element$scrollIntoVi = element.scrollIntoView) === null || _element$scrollIntoVi === void 0 || _element$scrollIntoVi.call(element, {
    // We are using `nearest` to prevent scrolling on user interaction when the menu item is already in view.
    block: "nearest"
  });
}
function useScrollMenuItemIntoView(_ref) {
  var elementRef = _ref.elementRef, isSelected = _ref.isSelected;
  var areAllAncestorsExpanded = useAreAllAncestorsExpanded();
  var waitingStateRef = (0, import_react.useRef)({
    type: "waiting-to-be-selected-and-all-ancestors-expanded"
  });
  (0, import_react.useEffect)(function() {
    if (waitingStateRef.current.type === "waiting-to-be-selected-and-all-ancestors-expanded") {
      var shouldScroll = areAllAncestorsExpanded && isSelected;
      if (!shouldScroll) {
        return;
      }
      var element = elementRef.current;
      invariant(element, "Element ref must be set");
      scrollMenuItemIntoView(element);
      waitingStateRef.current.type = "waiting-to-be-unselected";
      return;
    }
    if (waitingStateRef.current.type === "waiting-to-be-unselected") {
      if (!isSelected) {
        waitingStateRef.current.type = "waiting-to-be-selected-and-all-ancestors-expanded";
      }
      return;
    }
  }, [areAllAncestorsExpanded, elementRef, isSelected]);
}

// node_modules/@atlaskit/navigation-system/dist/esm/ui/menu-item/link-menu-item.js
var listItemStyles = {
  root: "_10m98stt"
};
var LinkMenuItemNoRef = function LinkMenuItemNoRef2(_ref, forwardedRef) {
  var testId = _ref.testId, actions = _ref.actions, children = _ref.children, description = _ref.description, elemAfter = _ref.elemAfter, elemBefore = _ref.elemBefore, href = _ref.href, target = _ref.target, actionsOnHover = _ref.actionsOnHover, isSelected = _ref.isSelected, onClick = _ref.onClick, interactionName = _ref.interactionName, isContentTooltipDisabled = _ref.isContentTooltipDisabled, visualContentRef = _ref.visualContentRef, listItemRef = _ref.listItemRef, isDragging = _ref.isDragging, hasDragIndicator = _ref.hasDragIndicator, dropIndicator = _ref.dropIndicator;
  var itemRef = (0, import_react2.useRef)(null);
  useScrollMenuItemIntoView({
    elementRef: itemRef,
    isSelected: isSelected !== null && isSelected !== void 0 ? isSelected : false
  });
  var ref = (0, import_react2.useMemo)(function() {
    return mergeRefs([itemRef, listItemRef !== null && listItemRef !== void 0 ? listItemRef : null]);
  }, [itemRef, listItemRef]);
  return React.createElement(ListItem, {
    ref,
    xcss: listItemStyles.root
  }, React.createElement(MenuItemBase, {
    testId,
    description,
    actions,
    elemAfter,
    elemBefore,
    href,
    target,
    actionsOnHover,
    isSelected,
    onClick,
    ref: forwardedRef,
    visualContentRef,
    interactionName,
    isContentTooltipDisabled,
    isDragging,
    hasDragIndicator,
    dropIndicator
  }, children));
};
var LinkMenuItem = forwardRefWithGeneric(LinkMenuItemNoRef);

export {
  useScrollMenuItemIntoView,
  LinkMenuItem
};
//# sourceMappingURL=chunk-FZPE6W7E.js.map
