import {
  useControlled
} from "./chunk-LW47WXE2.js";
import {
  SELECTION_STYLE_CONTEXT_DO_NOT_USE,
  button_item_default,
  custom_item_default,
  link_item_default,
  menu_group_default,
  section_default,
  useFocus
} from "./chunk-PBD27LP4.js";
import {
  esm_default
} from "./chunk-JWOAWYER.js";
import {
  useLayering
} from "./chunk-NIAVOAE6.js";
import {
  require_chevron_down
} from "./chunk-2DE3Z3RG.js";
import "./chunk-JQN2PVA7.js";
import "./chunk-6X5WLL3E.js";
import "./chunk-CBXLYWMJ.js";
import "./chunk-ZJT24HX4.js";
import {
  svg_default
} from "./chunk-AF4SYBWW.js";
import {
  button_default
} from "./chunk-D4H6CB3O.js";
import "./chunk-CQML7CIN.js";
import {
  KEY_DOWN,
  KEY_END,
  KEY_ENTER,
  KEY_HOME,
  KEY_SPACE,
  KEY_TAB,
  KEY_UP
} from "./chunk-PA42JLCQ.js";
import {
  spinner_default
} from "./chunk-LJL3VMNZ.js";
import "./chunk-CU24BLAG.js";
import "./chunk-GSLSGJXD.js";
import {
  gridSize,
  layers
} from "./chunk-TSADYF5T.js";
import {
  box_default
} from "./chunk-SKNBEIPO.js";
import "./chunk-PUGER6BV.js";
import "./chunk-XUSVWCLU.js";
import {
  visually_hidden_default
} from "./chunk-73JC3HDI.js";
import {
  noop
} from "./chunk-LRKC55FU.js";
import {
  useId
} from "./chunk-WD223FES.js";
import "./chunk-ZP3ZNAZP.js";
import "./chunk-YQ5BCTVV.js";
import {
  mergeRefs
} from "./chunk-HDYTRULV.js";
import {
  B400,
  N10,
  N100
} from "./chunk-CM4DOMEY.js";
import "./chunk-ON37A5TK.js";
import {
  _extends,
  init_extends
} from "./chunk-TRLI7EVB.js";
import {
  init_runtime
} from "./chunk-XC7QRLB3.js";
import "./chunk-3OAEFRLB.js";
import {
  require_dist
} from "./chunk-4XFTJAYZ.js";
import "./chunk-YLRLJMD7.js";
import "./chunk-ATF5PCW4.js";
import "./chunk-RG5U4ZYV.js";
import {
  _defineProperty,
  _objectWithoutProperties,
  _slicedToArray,
  fg,
  init_defineProperty,
  init_esm,
  init_objectWithoutProperties,
  init_slicedToArray
} from "./chunk-WFA677R7.js";
import {
  require_react
} from "./chunk-QJTFJ6OV.js";
import {
  __toESM
} from "./chunk-V4OQ3NZ2.js";

// node_modules/@atlaskit/dropdown-menu/dist/esm/dropdown-menu.js
init_extends();
init_defineProperty();
init_objectWithoutProperties();
init_slicedToArray();
var import_react5 = __toESM(require_react());
var import_bind_event_listener2 = __toESM(require_dist());
var import_chevron_down = __toESM(require_chevron_down());

// node_modules/@atlaskit/dropdown-menu/dist/esm/internal/components/focus-manager.js
init_slicedToArray();
var import_react = __toESM(require_react());
var import_bind_event_listener = __toESM(require_dist());

// node_modules/@atlaskit/dropdown-menu/dist/esm/internal/utils/handle-focus.js
init_defineProperty();
init_esm();

// node_modules/@atlaskit/dropdown-menu/dist/esm/internal/utils/use-generated-id.js
var PREFIX = "ds--dropdown--";
function useGeneratedId() {
  var id = useId();
  return "".concat(PREFIX).concat(id);
}

// node_modules/@atlaskit/dropdown-menu/dist/esm/internal/utils/handle-focus.js
var actionMap = _defineProperty(_defineProperty(_defineProperty(_defineProperty({}, KEY_DOWN, "next"), KEY_UP, "prev"), KEY_HOME, "first"), KEY_END, "last");
var getNextFocusableElement = function getNextFocusableElement2(refs, currentFocusedIdx) {
  for (var i = 0; i < refs.length - 1; i++) {
    if (currentFocusedIdx + 1 === refs.length) {
      currentFocusedIdx = 0;
    } else {
      currentFocusedIdx++;
    }
    var element = refs[currentFocusedIdx].current;
    var isValid = !!element && !element.hasAttribute("disabled");
    if (isValid) {
      return element;
    }
  }
};
var getPrevFocusableElement = function getPrevFocusableElement2(refs, currentFocusedIdx) {
  for (var i = 0; i < refs.length - 1; i++) {
    if (currentFocusedIdx === 0) {
      currentFocusedIdx = refs.length - 1;
    } else {
      currentFocusedIdx--;
    }
    var element = refs[currentFocusedIdx].current;
    var isValid = !!element && !element.hasAttribute("disabled");
    if (isValid) {
      return element;
    }
  }
};
function handleFocus(refs, isLayerDisabled, onClose) {
  return function(e) {
    var _refs$current;
    var currentRefs = (_refs$current = refs.current) !== null && _refs$current !== void 0 ? _refs$current : [];
    var currentFocusedIdx = currentRefs.findIndex(function(_ref) {
      var _document$activeEleme;
      var el = _ref.current;
      return el && ((_document$activeEleme = document.activeElement) === null || _document$activeEleme === void 0 ? void 0 : _document$activeEleme.isSameNode(el));
    });
    if (fg("platform_dst_popup-disable-focuslock")) {
      var _document$activeEleme2;
      var isNestedDropdown = !!((_document$activeEleme2 = document.activeElement) !== null && _document$activeEleme2 !== void 0 && _document$activeEleme2.closest("[id^=".concat(PREFIX, "]")));
      if (isLayerDisabled() && isNestedDropdown) {
        if (e.key === KEY_TAB && !e.shiftKey) {
          onClose(e);
        }
        return;
      }
    } else {
      if (isLayerDisabled()) {
        if (e.key === KEY_TAB && !e.shiftKey) {
          onClose(e);
        }
        return;
      }
    }
    var action = actionMap[e.key];
    switch (action) {
      case "next":
        e.preventDefault();
        var nextFocusableElement = getNextFocusableElement(currentRefs, currentFocusedIdx);
        nextFocusableElement === null || nextFocusableElement === void 0 || nextFocusableElement.focus();
        break;
      case "prev":
        e.preventDefault();
        var prevFocusableElement = getPrevFocusableElement(currentRefs, currentFocusedIdx);
        prevFocusableElement === null || prevFocusableElement === void 0 || prevFocusableElement.focus();
        break;
      case "first":
        e.preventDefault();
        var firstFocusableElement = getNextFocusableElement(currentRefs, -1);
        firstFocusableElement === null || firstFocusableElement === void 0 || firstFocusableElement.focus();
        break;
      case "last":
        e.preventDefault();
        var lastFocusableElement = getPrevFocusableElement(currentRefs, currentRefs.length);
        lastFocusableElement === null || lastFocusableElement === void 0 || lastFocusableElement.focus();
        break;
      default:
        return;
    }
  };
}

// node_modules/@atlaskit/dropdown-menu/dist/esm/internal/components/focus-manager.js
var FocusManagerContext = (0, import_react.createContext)({
  menuItemRefs: [],
  registerRef: noop
});
var FocusManager = function FocusManager2(_ref) {
  var children = _ref.children, onClose = _ref.onClose;
  var menuItemRefs = (0, import_react.useRef)([]);
  var _useState = (0, import_react.useState)(0), _useState2 = _slicedToArray(_useState, 2), refresh = _useState2[0], setRefresh = _useState2[1];
  var registerMode = (0, import_react.useRef)("ordered");
  registerMode.current = "ordered";
  var registerRef = (0, import_react.useCallback)(
    function(ref) {
      if (menuItemRefs.current.includes(ref)) {
        return;
      }
      switch (registerMode.current) {
        case "ordered":
          menuItemRefs.current.push(ref);
          break;
        case "unordered":
          registerMode.current = "regenerate";
          menuItemRefs.current = [];
          setRefresh(refresh + 1);
          break;
        case "regenerate":
          break;
        default:
          throw new Error("Unexpected case of ".concat(registerMode.current));
      }
    },
    // Updating register ref on force reload will cause `useRegisterItemWithFocusManager` to re-register
    [refresh]
  );
  var _useLayering = useLayering(), isLayerDisabled = _useLayering.isLayerDisabled;
  (0, import_react.useEffect)(function() {
    if (registerMode.current === "ordered") {
      registerMode.current = "unordered";
    }
  });
  (0, import_react.useEffect)(function() {
    return (0, import_bind_event_listener.bind)(window, {
      type: "keydown",
      listener: handleFocus(menuItemRefs, isLayerDisabled, onClose)
    });
  }, [isLayerDisabled, onClose]);
  var contextValue = {
    menuItemRefs: menuItemRefs.current,
    registerRef
  };
  return import_react.default.createElement(FocusManagerContext.Provider, {
    value: contextValue
  }, children);
};
var focus_manager_default = FocusManager;

// node_modules/@atlaskit/dropdown-menu/dist/esm/internal/components/menu-wrapper.js
var React2 = __toESM(require_react());
init_runtime();
var import_react2 = __toESM(require_react());
import "/Users/movalle/Documents/GitHub/test-enhanced-app/node_modules/@atlaskit/dropdown-menu/dist/esm/internal/components/menu-wrapper.compiled.css";

// node_modules/@atlaskit/dropdown-menu/dist/esm/internal/utils/is-checkbox-item.js
function isCheckboxItem(element) {
  var role = element.getAttribute("role");
  return role === "checkbox" || role === "menuitemcheckbox";
}

// node_modules/@atlaskit/dropdown-menu/dist/esm/internal/utils/is-radio-item.js
function isCheckboxItem2(element) {
  var role = element.getAttribute("role");
  return role === "radio" || role === "menuitemradio";
}

// node_modules/@atlaskit/dropdown-menu/dist/esm/internal/components/menu-wrapper.js
var styles = {
  spinnerContainer: "_1e0c1txw _1ul91lit _1bah1h6o _ca0qv47k _u5f3v47k _n3tdv47k _19bvv47k"
};
var LoadingIndicator = function LoadingIndicator2(_ref) {
  var _ref$statusLabel = _ref.statusLabel, statusLabel = _ref$statusLabel === void 0 ? "Loading" : _ref$statusLabel, testId = _ref.testId;
  return React2.createElement(box_default, {
    xcss: styles.spinnerContainer,
    role: "menuitem"
  }, React2.createElement(spinner_default, {
    size: "small",
    label: statusLabel,
    testId
  }));
};
var MenuWrapper = function MenuWrapper2(_ref2) {
  var children = _ref2.children, isLoading = _ref2.isLoading, maxHeight = _ref2.maxHeight, maxWidth = _ref2.maxWidth, onClose = _ref2.onClose, onUpdate = _ref2.onUpdate, statusLabel = _ref2.statusLabel, setInitialFocusRef = _ref2.setInitialFocusRef, shouldRenderToParent = _ref2.shouldRenderToParent, spacing = _ref2.spacing, testId = _ref2.testId, isTriggeredUsingKeyboard = _ref2.isTriggeredUsingKeyboard, autoFocus = _ref2.autoFocus, menuLabel = _ref2.menuLabel;
  var _useContext = (0, import_react2.useContext)(FocusManagerContext), menuItemRefs = _useContext.menuItemRefs;
  var closeOnMenuItemClick = function closeOnMenuItemClick2(e) {
    var isTargetMenuItemOrDescendant = menuItemRefs.some(function(menuItemRef) {
      var menuItem = menuItemRef.current;
      if (!menuItem) {
        return false;
      }
      var isCheckboxOrRadio = isCheckboxItem(menuItem) || isCheckboxItem2(menuItem);
      return menuItem.contains(e.target) && !isCheckboxOrRadio;
    });
    if (isTargetMenuItemOrDescendant && onClose) {
      onClose(e);
    }
  };
  (0, import_react2.useLayoutEffect)(function() {
    onUpdate();
  }, [isLoading, onUpdate]);
  (0, import_react2.useEffect)(function() {
    var _menuItemRefs$map$fin;
    var firstFocusableRef = (_menuItemRefs$map$fin = menuItemRefs.map(function(_ref3) {
      var current = _ref3.current;
      return current;
    }).find(function(el) {
      return !!el && !el.hasAttribute("disabled");
    })) !== null && _menuItemRefs$map$fin !== void 0 ? _menuItemRefs$map$fin : null;
    if (shouldRenderToParent && (isTriggeredUsingKeyboard || autoFocus)) {
      firstFocusableRef === null || firstFocusableRef === void 0 || firstFocusableRef.focus();
    }
    setInitialFocusRef === null || setInitialFocusRef === void 0 || setInitialFocusRef(firstFocusableRef);
  }, [menuItemRefs, setInitialFocusRef, autoFocus, shouldRenderToParent, isTriggeredUsingKeyboard]);
  return React2.createElement(menu_group_default, {
    isLoading,
    maxHeight,
    maxWidth,
    onClick: closeOnMenuItemClick,
    role: "menu",
    spacing,
    testId: testId && "".concat(testId, "--menu-group"),
    menuLabel
  }, isLoading ? React2.createElement(LoadingIndicator, {
    statusLabel,
    testId: testId && "".concat(testId, "--loading-indicator")
  }) : children);
};
var menu_wrapper_default = MenuWrapper;

// node_modules/@atlaskit/dropdown-menu/dist/esm/internal/context/selection-store.js
var import_react3 = __toESM(require_react());
var SelectionStoreContext = (0, import_react3.createContext)({
  setItemState: noop,
  getItemState: function getItemState() {
    return void 0;
  },
  setGroupState: noop,
  getGroupState: function getGroupState() {
    return {};
  }
});
var SelectionStore = function SelectionStore2(props) {
  var children = props.children;
  var store = (0, import_react3.useRef)({});
  var context = (0, import_react3.useMemo)(function() {
    return {
      setItemState: function setItemState(group, id, value) {
        if (!store.current[group]) {
          store.current[group] = {};
        }
        store.current[group][id] = value;
      },
      getItemState: function getItemState2(group, id) {
        if (!store.current[group]) {
          return void 0;
        }
        return store.current[group][id];
      },
      setGroupState: function setGroupState(group, value) {
        store.current[group] = value;
      },
      getGroupState: function getGroupState2(group) {
        return store.current[group] || {};
      }
    };
  }, []);
  return import_react3.default.createElement(SelectionStoreContext.Provider, {
    value: context
  }, children);
};
var selection_store_default = SelectionStore;

// node_modules/@atlaskit/dropdown-menu/dist/esm/internal/hooks/use-register-item-with-focus-manager.js
var import_react4 = __toESM(require_react());
init_esm();
function useRegisterItemWithFocusManager() {
  var hasPopup = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : false;
  var _useContext = (0, import_react4.useContext)(FocusManagerContext), registerRef = _useContext.registerRef;
  var itemRef = (0, import_react4.useRef)(null);
  (0, import_react4.useEffect)(function() {
    if (hasPopup && fg("select-avoid-duplicated-registered-ref")) {
      return;
    }
    registerRef(itemRef);
  }, [registerRef, hasPopup]);
  return itemRef;
}
var use_register_item_with_focus_manager_default = useRegisterItemWithFocusManager;

// node_modules/@atlaskit/dropdown-menu/dist/esm/dropdown-menu.js
var _excluded = ["ref", "aria-controls", "aria-expanded", "aria-haspopup"];
function ownKeys(e, r) {
  var t = Object.keys(e);
  if (Object.getOwnPropertySymbols) {
    var o = Object.getOwnPropertySymbols(e);
    r && (o = o.filter(function(r2) {
      return Object.getOwnPropertyDescriptor(e, r2).enumerable;
    })), t.push.apply(t, o);
  }
  return t;
}
function _objectSpread(e) {
  for (var r = 1; r < arguments.length; r++) {
    var t = null != arguments[r] ? arguments[r] : {};
    r % 2 ? ownKeys(Object(t), true).forEach(function(r2) {
      _defineProperty(e, r2, t[r2]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function(r2) {
      Object.defineProperty(e, r2, Object.getOwnPropertyDescriptor(t, r2));
    });
  }
  return e;
}
var gridSize2 = gridSize();
var MAX_HEIGHT = "calc(100vh - ".concat(gridSize2 * 2, "px)");
var opposites = {
  top: "bottom",
  bottom: "top",
  left: "right",
  right: "left",
  start: "end",
  auto: "auto",
  end: "start"
};
var getFallbackPlacements = function getFallbackPlacements2(placement) {
  var placementPieces = placement.split("-");
  var mainAxis = placementPieces[0];
  if (!["top", "bottom"].includes(mainAxis)) {
    return void 0;
  } else if (placementPieces.length === 2 && ["start", "end"].includes(placementPieces[1])) {
    var crossAxis = placementPieces[1];
    return ["".concat(mainAxis), "".concat(mainAxis, "-").concat(opposites[crossAxis]), "".concat(opposites[mainAxis], "-").concat(crossAxis), "".concat(opposites[mainAxis]), "".concat(opposites[mainAxis], "-").concat(opposites[crossAxis]), "auto"];
  } else {
    return ["".concat(mainAxis, "-start"), "".concat(mainAxis, "-end"), "".concat(opposites[mainAxis]), "".concat(opposites[mainAxis], "-start"), "".concat(opposites[mainAxis], "-end"), "auto"];
  }
};
function isKeyboardEvent(event) {
  return event !== null && (event instanceof KeyboardEvent || "nativeEvent" in event && event.nativeEvent instanceof KeyboardEvent);
}
var DropdownMenu = function DropdownMenu2(_ref) {
  var _ref$autoFocus = _ref.autoFocus, autoFocus = _ref$autoFocus === void 0 ? false : _ref$autoFocus, children = _ref.children, _ref$defaultOpen = _ref.defaultOpen, defaultOpen = _ref$defaultOpen === void 0 ? false : _ref$defaultOpen, _ref$isLoading = _ref.isLoading, isLoading = _ref$isLoading === void 0 ? false : _ref$isLoading, isOpen = _ref.isOpen, _ref$onOpenChange = _ref.onOpenChange, onOpenChange = _ref$onOpenChange === void 0 ? noop : _ref$onOpenChange, _ref$placement = _ref.placement, placement = _ref$placement === void 0 ? "bottom-start" : _ref$placement, _ref$shouldFitContain = _ref.shouldFitContainer, shouldFitContainer = _ref$shouldFitContain === void 0 ? false : _ref$shouldFitContain, _ref$shouldFlip = _ref.shouldFlip, shouldFlip = _ref$shouldFlip === void 0 ? true : _ref$shouldFlip, _ref$shouldRenderToPa = _ref.shouldRenderToParent, shouldRenderToParent = _ref$shouldRenderToPa === void 0 ? false : _ref$shouldRenderToPa, returnFocusRef = _ref.returnFocusRef, spacing = _ref.spacing, statusLabel = _ref.statusLabel, testId = _ref.testId, _trigger = _ref.trigger, _ref$zIndex = _ref.zIndex, zIndex = _ref$zIndex === void 0 ? layers.modal() : _ref$zIndex, label = _ref.label, interactionName = _ref.interactionName, strategy = _ref.strategy, menuLabel = _ref.menuLabel;
  var _useControlledState = useControlled(isOpen, function() {
    return defaultOpen;
  }), _useControlledState2 = _slicedToArray(_useControlledState, 2), isLocalOpen = _useControlledState2[0], setLocalIsOpen = _useControlledState2[1];
  var triggerRef = (0, import_react5.useRef)(null);
  var _useState = (0, import_react5.useState)(false), _useState2 = _slicedToArray(_useState, 2), isTriggeredUsingKeyboard = _useState2[0], setTriggeredUsingKeyboard = _useState2[1];
  var id = useGeneratedId();
  var itemRef = use_register_item_with_focus_manager_default();
  var fallbackPlacements = (0, import_react5.useMemo)(function() {
    return getFallbackPlacements(placement);
  }, [placement]);
  var handleTriggerClicked = (0, import_react5.useCallback)(
    // TODO: event is an `any` and is being cast incorrectly
    // This means that the public type for `onOpenChange` is incorrect
    // current: (event: React.MouseEvent | React.KeyboardEvent) => void;
    // correct: (event: React.MouseEvent | KeyboardEvent) => void;
    // https://product-fabric.atlassian.net/browse/DSP-4692
    function(event) {
      var newValue = !isLocalOpen;
      var clientX = event.clientX, clientY = event.clientY, type = event.type, detail = event.detail;
      if (type === "keydown") {
        setTriggeredUsingKeyboard(true);
      } else if (clientX === 0 || clientY === 0) {
        setTriggeredUsingKeyboard(true);
      } else if (detail === 0) {
        setTriggeredUsingKeyboard(true);
      } else {
        var _itemRef$current;
        itemRef === null || itemRef === void 0 || (_itemRef$current = itemRef.current) === null || _itemRef$current === void 0 || _itemRef$current.focus();
        setTriggeredUsingKeyboard(false);
      }
      setLocalIsOpen(newValue);
      onOpenChange({
        isOpen: newValue,
        event
      });
    },
    [isLocalOpen, setLocalIsOpen, onOpenChange, itemRef]
  );
  var handleOnClose = (0, import_react5.useCallback)(function(event, currentLevel) {
    var _event$target$closest, _event$target;
    var isTabOrEscapeKey = isKeyboardEvent(event) && (event.key === "Tab" || event.key === "Escape");
    if (event !== null && !isTabOrEscapeKey && event.target instanceof HTMLElement && (_event$target$closest = (_event$target = event.target).closest) !== null && _event$target$closest !== void 0 && _event$target$closest.call(_event$target, "[id^=".concat(PREFIX, "] [aria-haspopup]"))) {
      var _itemRef$current2;
      if (!currentLevel) {
        return;
      }
      var toCloseLevel = (_itemRef$current2 = itemRef.current) === null || _itemRef$current2 === void 0 ? void 0 : _itemRef$current2.dataset["ds-Level"];
      if (toCloseLevel && Number(toCloseLevel) < currentLevel) {
        return;
      }
    }
    if (returnFocusRef) {
      requestAnimationFrame(function() {
        var _returnFocusRef$curre;
        (_returnFocusRef$curre = returnFocusRef.current) === null || _returnFocusRef$curre === void 0 || _returnFocusRef$curre.focus();
      });
    } else if (isKeyboardEvent(event) && (event.key === "Tab" && event.shiftKey || event.key === "Escape")) {
      requestAnimationFrame(function() {
        var _itemRef$current3;
        (_itemRef$current3 = itemRef.current) === null || _itemRef$current3 === void 0 || _itemRef$current3.focus();
      });
    } else if (triggerRef.current) {
      var _event$target$closest2, _event$target2;
      var isClickOutsideMenu = (event === null || event === void 0 ? void 0 : event.target) instanceof HTMLElement && ((_event$target$closest2 = (_event$target2 = event.target).closest) === null || _event$target$closest2 === void 0 ? void 0 : _event$target$closest2.call(_event$target2, '[role="menu"]')) === null;
      var shouldPreventFocus = isClickOutsideMenu && document.activeElement !== document.body;
      if (!shouldPreventFocus) {
        requestAnimationFrame(function() {
          var _triggerRef$current;
          (_triggerRef$current = triggerRef.current) === null || _triggerRef$current === void 0 || _triggerRef$current.focus();
        });
      }
    }
    var newValue = false;
    setLocalIsOpen(newValue);
    onOpenChange({
      isOpen: newValue,
      event
    });
  }, [itemRef, onOpenChange, returnFocusRef, setLocalIsOpen]);
  var _useFocus = useFocus(), isFocused = _useFocus.isFocused, bindFocus = _useFocus.bindFocus;
  (0, import_react5.useEffect)(function() {
    if (!isFocused) {
      return noop;
    }
    if (isLocalOpen) {
      return noop;
    }
    return (0, import_bind_event_listener2.bind)(window, {
      type: "keydown",
      listener: function openOnKeyDown(e) {
        var isNestedTriggerButton;
        if (e.target instanceof HTMLElement) {
          isNestedTriggerButton = e.target.closest("[id^=".concat(PREFIX, "] [aria-haspopup]"));
        }
        if (e.key === KEY_DOWN && !isNestedTriggerButton) {
          e.preventDefault();
          handleTriggerClicked(e);
        } else if ((e.code === KEY_SPACE || e.key === KEY_ENTER) && e.detail === 0) {
          setTriggeredUsingKeyboard(true);
        } else if (e.key === KEY_TAB && isNestedTriggerButton) {
          handleOnClose(e);
        }
      }
    });
  }, [isFocused, isLocalOpen, handleTriggerClicked, handleOnClose]);
  var conditionalProps = shouldFitContainer ? {
    shouldFitContainer,
    // When shouldFitContainer is true, `fixed` positions are not allowed
    strategy: strategy !== "fixed" ? strategy : void 0
  } : {
    shouldRenderToParent,
    strategy
  };
  return import_react5.default.createElement(selection_store_default, null, import_react5.default.createElement(esm_default, _extends({
    id: isLocalOpen ? id : void 0,
    shouldFlip,
    isOpen: isLocalOpen,
    shouldReturnFocus: (
      // If returnFocusRef is provided, we **don't** want to return focus to the trigger.
      // Otherwise, Popup will focus on the dropdown trigger after the `returnFocusRef` element is focused.
      returnFocusRef === void 0
    ),
    onClose: handleOnClose,
    zIndex,
    placement,
    fallbackPlacements,
    testId: testId && "".concat(testId, "--content"),
    shouldUseCaptureOnOutsideClick: true
  }, conditionalProps, {
    shouldDisableFocusLock: true,
    trigger: function trigger(_ref2) {
      var ref = _ref2.ref, ariaControls = _ref2["aria-controls"], ariaExpanded = _ref2["aria-expanded"], ariaHasPopup = _ref2["aria-haspopup"], rest = _objectWithoutProperties(_ref2, _excluded);
      if (typeof _trigger === "function") {
        return _trigger(_objectSpread(_objectSpread(_objectSpread({
          "aria-controls": ariaControls,
          "aria-expanded": ariaExpanded,
          "aria-haspopup": ariaHasPopup
        }, rest), bindFocus), {}, {
          triggerRef: mergeRefs([ref, triggerRef, itemRef]),
          isSelected: isLocalOpen,
          onClick: handleTriggerClicked,
          testId: testId && "".concat(testId, "--trigger")
        }));
      }
      return import_react5.default.createElement(button_default, _extends({}, bindFocus, {
        ref: mergeRefs([ref, triggerRef, itemRef]),
        "aria-controls": ariaControls,
        "aria-expanded": ariaExpanded,
        "aria-haspopup": ariaHasPopup,
        isSelected: isLocalOpen,
        iconAfter: function iconAfter(iconProps) {
          return import_react5.default.createElement(import_chevron_down.default, _extends({}, iconProps, {
            size: "small"
          }));
        },
        onClick: handleTriggerClicked,
        testId: testId && "".concat(testId, "--trigger"),
        "aria-label": label,
        interactionName
      }), _trigger);
    },
    content: function content(_ref3) {
      var setInitialFocusRef = _ref3.setInitialFocusRef, update = _ref3.update;
      return import_react5.default.createElement(focus_manager_default, {
        onClose: handleOnClose
      }, import_react5.default.createElement(menu_wrapper_default, {
        spacing,
        maxHeight: MAX_HEIGHT,
        maxWidth: shouldFitContainer ? void 0 : 800,
        onClose: handleOnClose,
        onUpdate: update,
        isLoading,
        statusLabel,
        setInitialFocusRef: isTriggeredUsingKeyboard || autoFocus ? setInitialFocusRef : void 0,
        shouldRenderToParent: shouldRenderToParent || shouldFitContainer,
        isTriggeredUsingKeyboard,
        autoFocus,
        testId: testId && "".concat(testId, "--menu-wrapper"),
        menuLabel
      }, children));
    }
  })));
};
var dropdown_menu_default = DropdownMenu;

// node_modules/@atlaskit/dropdown-menu/dist/esm/dropdown-menu-item-group.js
init_extends();
init_objectWithoutProperties();
var import_react7 = __toESM(require_react());

// node_modules/@atlaskit/dropdown-menu/dist/esm/internal/components/group-title.js
init_runtime();
var import_react6 = __toESM(require_react());
import "/Users/movalle/Documents/GitHub/test-enhanced-app/node_modules/@atlaskit/dropdown-menu/dist/esm/internal/components/group-title.compiled.css";
var styles2 = {
  heading: "_11c81vhk _1rjcze3t _18zrpxbi _syaz1gjq"
};
var GroupTitle = function GroupTitle2(_ref) {
  var id = _ref.id, title = _ref.title;
  return import_react6.default.createElement(box_default, {
    "data-ds--menu--heading-item": true,
    role: "menuitem",
    id,
    "aria-hidden": "true",
    xcss: styles2.heading
  }, title);
};
var group_title_default = GroupTitle;

// node_modules/@atlaskit/dropdown-menu/dist/esm/dropdown-menu-item-group.js
var _excluded2 = ["children", "id", "isList", "isScrollable", "title", "testId", "hasSeparator"];
var DropdownMenuItemGroup = (0, import_react7.forwardRef)(function(_ref, ref) {
  var children = _ref.children, id = _ref.id, isList = _ref.isList, isScrollable = _ref.isScrollable, title = _ref.title, testId = _ref.testId, hasSeparator = _ref.hasSeparator, rest = _objectWithoutProperties(_ref, _excluded2);
  var uid = useId();
  var titleId = "dropdown-menu-item-group-title-".concat(uid);
  return import_react7.default.createElement(section_default, _extends({
    id,
    ref,
    isList,
    isScrollable,
    hasSeparator,
    testId,
    titleId: title ? titleId : void 0
  }, rest), title && import_react7.default.createElement(group_title_default, {
    id: titleId,
    title
  }), children);
});
var dropdown_menu_item_group_default = DropdownMenuItemGroup;

// node_modules/@atlaskit/dropdown-menu/dist/esm/dropdown-menu-item.js
init_extends();
init_objectWithoutProperties();
var import_react8 = __toESM(require_react());
var _excluded3 = ["children", "component", "description", "elemAfter", "elemBefore", "href", "isDisabled", "isSelected", "onClick", "rel", "shouldDescriptionWrap", "shouldTitleWrap", "target", "testId", "UNSAFE_shouldDisableRouterLink", "returnFocusRef", "interactionName", "role"];
var DropdownMenuItem = (0, import_react8.forwardRef)(function(_ref, ref) {
  var children = _ref.children, component = _ref.component, description = _ref.description, elemAfter = _ref.elemAfter, elemBefore = _ref.elemBefore, href = _ref.href, isDisabled = _ref.isDisabled, isSelected = _ref.isSelected, onClick = _ref.onClick, rel = _ref.rel, _ref$shouldDescriptio = _ref.shouldDescriptionWrap, shouldDescriptionWrap = _ref$shouldDescriptio === void 0 ? true : _ref$shouldDescriptio, _ref$shouldTitleWrap = _ref.shouldTitleWrap, shouldTitleWrap = _ref$shouldTitleWrap === void 0 ? true : _ref$shouldTitleWrap, target = _ref.target, testId = _ref.testId, UNSAFE_shouldDisableRouterLink = _ref.UNSAFE_shouldDisableRouterLink, returnFocusRef = _ref.returnFocusRef, interactionName = _ref.interactionName, role = _ref.role, rest = _objectWithoutProperties(_ref, _excluded3);
  var itemRef = use_register_item_with_focus_manager_default(!!rest["aria-haspopup"]);
  var handleItemClick = (0, import_react8.useCallback)(function(event) {
    if (returnFocusRef !== null && returnFocusRef !== void 0 && returnFocusRef.current) {
      returnFocusRef.current.focus();
    }
    if (onClick) {
      onClick(event);
    }
  }, [onClick, returnFocusRef]);
  if (component) {
    return import_react8.default.createElement(custom_item_default, _extends({
      component,
      description,
      iconAfter: elemAfter,
      iconBefore: elemBefore,
      isDisabled,
      isSelected,
      onClick: handleItemClick,
      ref: mergeRefs([ref, itemRef]),
      shouldDescriptionWrap,
      shouldTitleWrap,
      testId,
      href,
      target,
      rel,
      interactionName
      // DSP-13312 TODO: remove spread props in future major release
    }, rest), children);
  } else if (href) {
    return import_react8.default.createElement(link_item_default, _extends({
      description,
      href,
      iconAfter: elemAfter,
      iconBefore: elemBefore,
      isDisabled,
      isSelected,
      onClick: handleItemClick,
      ref: mergeRefs([ref, itemRef]),
      rel,
      role: "menuitem",
      shouldDescriptionWrap,
      shouldTitleWrap,
      target,
      testId,
      UNSAFE_shouldDisableRouterLink,
      interactionName
      // DSP-13312 TODO: remove spread props in future major release
    }, rest), children);
  } else {
    return import_react8.default.createElement(button_item_default, _extends({
      description,
      iconAfter: elemAfter,
      iconBefore: elemBefore,
      isDisabled,
      isSelected,
      onClick: handleItemClick,
      ref: mergeRefs([ref, itemRef]),
      role: role || "menuitem",
      shouldDescriptionWrap,
      shouldTitleWrap,
      testId,
      target,
      rel,
      interactionName
      // DSP-13312 TODO: remove spread props in future major release
    }, rest), children);
  }
});
var dropdown_menu_item_default = DropdownMenuItem;

// node_modules/@atlaskit/dropdown-menu/dist/esm/checkbox/dropdown-item-checkbox.js
init_extends();
init_slicedToArray();
init_objectWithoutProperties();
var import_react12 = __toESM(require_react());

// node_modules/@atlaskit/dropdown-menu/dist/esm/internal/components/checkbox-icon.js
var import_react9 = __toESM(require_react());
init_esm();
var CheckboxIcon = function CheckboxIcon2(_ref) {
  var checked = _ref.checked;
  return import_react9.default.createElement(svg_default, {
    label: "",
    size: "medium",
    primaryColor: checked ? "var(--ds-background-selected-bold, ".concat(B400, ")") : "var(--ds-background-input, ".concat(N10, ")"),
    secondaryColor: checked ? "var(--ds-icon-inverse, ".concat(N10, ")") : "transparent"
  }, import_react9.default.createElement(
    "g",
    {
      fillRule: "evenodd"
    },
    // eslint-disable-next-line @atlaskit/platform/ensure-feature-flag-prefix
    fg("platform-visual-refresh-icons") ? import_react9.default.createElement(import_react9.default.Fragment, null, import_react9.default.createElement("rect", {
      stroke: checked ? "var(--ds-border-selected, ".concat(B400, ")") : "var(--ds-border-input, ".concat(N100, ")"),
      x: "5.5",
      y: "5.5",
      width: "13",
      height: "13",
      rx: "1.5",
      fill: "currentColor"
    }), import_react9.default.createElement("path", {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M16.3262 9.48011L15.1738 8.51984L10.75 13.8284L8.82616 11.5198L7.67383 12.4801L10.1738 15.4801C10.3163 15.6511 10.5274 15.75 10.75 15.75C10.9726 15.75 11.1837 15.6511 11.3262 15.4801L16.3262 9.48011Z",
      fill: "inherit"
    })) : import_react9.default.createElement(import_react9.default.Fragment, null, import_react9.default.createElement("rect", {
      fill: "currentColor",
      x: "6",
      y: "6",
      width: "12",
      height: "12",
      rx: "2",
      stroke: checked ? "var(--ds-border-selected, ".concat(B400, ")") : "var(--ds-border-input, ".concat(N100, ")"),
      strokeWidth: 1
    }), import_react9.default.createElement("path", {
      d: "M9.707 11.293a1 1 0 10-1.414 1.414l2 2a1 1 0 001.414 0l4-4a1 1 0 10-1.414-1.414L11 12.586l-1.293-1.293z",
      fill: "inherit"
    }))
  ));
};
var checkbox_icon_default = CheckboxIcon;

// node_modules/@atlaskit/dropdown-menu/dist/esm/internal/hooks/use-checkbox-state.js
init_slicedToArray();
var import_react11 = __toESM(require_react());

// node_modules/@atlaskit/dropdown-menu/dist/esm/internal/context/checkbox-group-context.js
var import_react10 = __toESM(require_react());
var CheckboxGroupContext = (0, import_react10.createContext)("");

// node_modules/@atlaskit/dropdown-menu/dist/esm/internal/hooks/use-checkbox-state.js
var useCheckboxState = function useCheckboxState2(_ref) {
  var isSelected = _ref.isSelected, id = _ref.id, defaultSelected = _ref.defaultSelected;
  var _useContext = (0, import_react11.useContext)(SelectionStoreContext), setItemState = _useContext.setItemState, getItemState2 = _useContext.getItemState;
  var groupId = (0, import_react11.useContext)(CheckboxGroupContext);
  var persistedIsSelected = getItemState2(groupId, id);
  var _useState = (0, import_react11.useState)(
    // Initial state is set depending on value being defined or not.
    // This state is only utilised if the checkbox is uncontrolled.
    function() {
      return persistedIsSelected !== void 0 ? persistedIsSelected : defaultSelected || false;
    }
  ), _useState2 = _slicedToArray(_useState, 2), localIsSelected = _useState2[0], setLocalIsSelected = _useState2[1];
  var setLocalState = (0, import_react11.useCallback)(function(newValue) {
    var nextValue = newValue(persistedIsSelected);
    setLocalIsSelected(nextValue);
    setItemState(groupId, id, nextValue);
  }, [setItemState, persistedIsSelected, groupId, id]);
  if (typeof isSelected === "boolean") {
    return [isSelected, function() {
      return false;
    }];
  }
  if (persistedIsSelected === void 0) {
    setItemState(groupId, id, defaultSelected || false);
  }
  return [localIsSelected, setLocalState];
};
var use_checkbox_state_default = useCheckboxState;

// node_modules/@atlaskit/dropdown-menu/dist/esm/checkbox/dropdown-item-checkbox.js
var _excluded4 = ["children", "defaultSelected", "description", "id", "isDisabled", "isSelected", "onClick", "shouldDescriptionWrap", "shouldTitleWrap", "testId", "interactionName"];
var DropdownItemCheckbox = function DropdownItemCheckbox2(_ref) {
  var children = _ref.children, defaultSelected = _ref.defaultSelected, description = _ref.description, id = _ref.id, isDisabled = _ref.isDisabled, isSelected = _ref.isSelected, _ref$onClick = _ref.onClick, providedOnClick = _ref$onClick === void 0 ? noop : _ref$onClick, _ref$shouldDescriptio = _ref.shouldDescriptionWrap, shouldDescriptionWrap = _ref$shouldDescriptio === void 0 ? true : _ref$shouldDescriptio, _ref$shouldTitleWrap = _ref.shouldTitleWrap, shouldTitleWrap = _ref$shouldTitleWrap === void 0 ? true : _ref$shouldTitleWrap, testId = _ref.testId, interactionName = _ref.interactionName, rest = _objectWithoutProperties(_ref, _excluded4);
  if (typeof process !== "undefined" && true && typeof isSelected !== "undefined" && typeof defaultSelected !== "undefined") {
    console.warn("[DropdownItemCheckbox] You've used both `defaultSelected` and `isSelected` props. This is dangerous and can lead to unexpected results. Use one or the other depending if you want to control the components state yourself.");
  }
  var _useCheckboxState = use_checkbox_state_default({
    id,
    isSelected,
    defaultSelected
  }), _useCheckboxState2 = _slicedToArray(_useCheckboxState, 2), selected = _useCheckboxState2[0], setSelected = _useCheckboxState2[1];
  var onClickHandler = (0, import_react12.useCallback)(function(event) {
    setSelected(function(selected2) {
      return !selected2;
    });
    providedOnClick(event);
  }, [providedOnClick, setSelected]);
  var itemRef = use_register_item_with_focus_manager_default();
  return import_react12.default.createElement(SELECTION_STYLE_CONTEXT_DO_NOT_USE.Provider, {
    value: "none"
  }, import_react12.default.createElement(button_item_default, _extends({
    "aria-checked": selected,
    description,
    iconBefore: import_react12.default.createElement(checkbox_icon_default, {
      checked: selected
    }),
    id,
    isDisabled,
    isSelected: selected,
    onClick: onClickHandler,
    ref: itemRef,
    role: "menuitemcheckbox",
    shouldDescriptionWrap,
    shouldTitleWrap,
    testId,
    interactionName
    // eslint-disable-next-line @repo/internal/react/no-unsafe-spread-props
  }, rest), children));
};
var dropdown_item_checkbox_default = DropdownItemCheckbox;

// node_modules/@atlaskit/dropdown-menu/dist/esm/checkbox/dropdown-item-checkbox-group.js
init_extends();
init_objectWithoutProperties();
var import_react13 = __toESM(require_react());
var _excluded5 = ["children", "hasSeparator", "id", "isList", "isScrollable", "testId", "title"];
var DropdownItemCheckboxGroup = function DropdownItemCheckboxGroup2(_ref) {
  var children = _ref.children, hasSeparator = _ref.hasSeparator, id = _ref.id, isList = _ref.isList, isScrollable = _ref.isScrollable, testId = _ref.testId, title = _ref.title, rest = _objectWithoutProperties(_ref, _excluded5);
  var uid = useId();
  var titleId = "dropdown-menu-item-checkbox-group-title-".concat(uid);
  return import_react13.default.createElement(CheckboxGroupContext.Provider, {
    value: id
  }, import_react13.default.createElement(section_default, _extends({
    hasSeparator,
    id,
    isList,
    isScrollable,
    testId,
    titleId: title ? titleId : void 0
    // eslint-disable-next-line @repo/internal/react/no-unsafe-spread-props
  }, rest), title && import_react13.default.createElement(group_title_default, {
    id: titleId,
    title
  }), children));
};
var dropdown_item_checkbox_group_default = DropdownItemCheckboxGroup;

// node_modules/@atlaskit/dropdown-menu/dist/esm/radio/dropdown-item-radio.js
init_extends();
init_slicedToArray();
init_objectWithoutProperties();
var import_react17 = __toESM(require_react());

// node_modules/@atlaskit/dropdown-menu/dist/esm/internal/components/radio-icon.js
var import_react14 = __toESM(require_react());
init_esm();
var RadioIcon = function RadioIcon2(_ref) {
  var checked = _ref.checked;
  return import_react14.default.createElement(svg_default, {
    label: "",
    size: "medium",
    primaryColor: checked ? "var(--ds-background-selected-bold, ".concat(B400, ")") : "var(--ds-background-input, ".concat(N10, ")"),
    secondaryColor: checked ? "var(--ds-icon-inverse, ".concat(N10, ")") : "transparent"
  }, import_react14.default.createElement(
    "g",
    {
      fillRule: "evenodd"
    },
    // eslint-disable-next-line @atlaskit/platform/ensure-feature-flag-prefix
    fg("platform-visual-refresh-icons") ? import_react14.default.createElement(import_react14.default.Fragment, null, import_react14.default.createElement("circle", {
      cx: "12",
      cy: "12",
      r: "7.5",
      fill: "currentColor",
      stroke: checked ? "var(--ds-border-selected, ".concat(B400, ")") : "var(--ds-border-input, ".concat(N100, ")"),
      strokeWidth: "1"
    }), import_react14.default.createElement("circle", {
      cx: "12",
      cy: "12",
      r: "3",
      fill: "inherit"
    })) : import_react14.default.createElement(import_react14.default.Fragment, null, import_react14.default.createElement("circle", {
      fill: "currentColor",
      cx: "12",
      cy: "12",
      r: "6",
      stroke: checked ? "var(--ds-border-selected, ".concat(B400, ")") : "var(--ds-border-input, ".concat(N100, ")"),
      strokeWidth: 1
    }), import_react14.default.createElement("circle", {
      fill: "inherit",
      cx: "12",
      cy: "12",
      r: "2"
    }))
  ));
};
var radio_icon_default = RadioIcon;

// node_modules/@atlaskit/dropdown-menu/dist/esm/internal/hooks/use-radio-state.js
init_defineProperty();
init_slicedToArray();
var import_react16 = __toESM(require_react());

// node_modules/@atlaskit/dropdown-menu/dist/esm/radio/dropdown-item-radio-group.js
init_extends();
init_defineProperty();
init_slicedToArray();
init_objectWithoutProperties();
var import_react15 = __toESM(require_react());

// node_modules/@atlaskit/dropdown-menu/dist/esm/internal/utils/reset-options-in-group.js
init_defineProperty();
function ownKeys2(e, r) {
  var t = Object.keys(e);
  if (Object.getOwnPropertySymbols) {
    var o = Object.getOwnPropertySymbols(e);
    r && (o = o.filter(function(r2) {
      return Object.getOwnPropertyDescriptor(e, r2).enumerable;
    })), t.push.apply(t, o);
  }
  return t;
}
function _objectSpread2(e) {
  for (var r = 1; r < arguments.length; r++) {
    var t = null != arguments[r] ? arguments[r] : {};
    r % 2 ? ownKeys2(Object(t), true).forEach(function(r2) {
      _defineProperty(e, r2, t[r2]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys2(Object(t)).forEach(function(r2) {
      Object.defineProperty(e, r2, Object.getOwnPropertyDescriptor(t, r2));
    });
  }
  return e;
}
var resetOptionsInGroup = function resetOptionsInGroup2(group) {
  return Object.keys(group || {}).reduce(function(accumulator, current) {
    return _objectSpread2(_objectSpread2({}, accumulator), {}, _defineProperty({}, current, typeof group[current] === "undefined" ? void 0 : false));
  }, {});
};
var reset_options_in_group_default = resetOptionsInGroup;

// node_modules/@atlaskit/dropdown-menu/dist/esm/radio/dropdown-item-radio-group.js
var _excluded6 = ["children", "hasSeparator", "id", "isList", "isScrollable", "testId", "title"];
function ownKeys3(e, r) {
  var t = Object.keys(e);
  if (Object.getOwnPropertySymbols) {
    var o = Object.getOwnPropertySymbols(e);
    r && (o = o.filter(function(r2) {
      return Object.getOwnPropertyDescriptor(e, r2).enumerable;
    })), t.push.apply(t, o);
  }
  return t;
}
function _objectSpread3(e) {
  for (var r = 1; r < arguments.length; r++) {
    var t = null != arguments[r] ? arguments[r] : {};
    r % 2 ? ownKeys3(Object(t), true).forEach(function(r2) {
      _defineProperty(e, r2, t[r2]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys3(Object(t)).forEach(function(r2) {
      Object.defineProperty(e, r2, Object.getOwnPropertyDescriptor(t, r2));
    });
  }
  return e;
}
var RadioGroupContext = (0, import_react15.createContext)({
  id: "",
  radioGroupState: {},
  selectRadioItem: noop
});
var DropdownItemRadioGroup = function DropdownItemRadioGroup2(_ref) {
  var children = _ref.children, hasSeparator = _ref.hasSeparator, id = _ref.id, isList = _ref.isList, isScrollable = _ref.isScrollable, testId = _ref.testId, title = _ref.title, rest = _objectWithoutProperties(_ref, _excluded6);
  var _useContext = (0, import_react15.useContext)(SelectionStoreContext), setGroupState = _useContext.setGroupState, getGroupState2 = _useContext.getGroupState;
  var uid = useId();
  var titleId = "dropdown-menu-item-radio-group-title-".concat(uid);
  var _useState = (0, import_react15.useState)(function() {
    return getGroupState2(id);
  }), _useState2 = _slicedToArray(_useState, 2), radioGroupState = _useState2[0], setRadioGroupState = _useState2[1];
  var selectRadioItem = function selectRadioItem2(childId, value) {
    var newValue = _objectSpread3(_objectSpread3({}, reset_options_in_group_default(getGroupState2(id))), {}, _defineProperty({}, childId, value));
    setRadioGroupState(newValue);
    setGroupState(id, newValue);
  };
  return import_react15.default.createElement(RadioGroupContext.Provider, {
    value: {
      id,
      radioGroupState,
      selectRadioItem
    }
  }, import_react15.default.createElement(section_default, _extends({
    hasSeparator,
    id,
    isList,
    isScrollable,
    testId,
    titleId: title ? titleId : void 0
    // eslint-disable-next-line @repo/internal/react/no-unsafe-spread-props
  }, rest), title && import_react15.default.createElement(group_title_default, {
    id: titleId,
    title
  }), children));
};
var dropdown_item_radio_group_default = DropdownItemRadioGroup;

// node_modules/@atlaskit/dropdown-menu/dist/esm/internal/hooks/use-radio-state.js
function ownKeys4(e, r) {
  var t = Object.keys(e);
  if (Object.getOwnPropertySymbols) {
    var o = Object.getOwnPropertySymbols(e);
    r && (o = o.filter(function(r2) {
      return Object.getOwnPropertyDescriptor(e, r2).enumerable;
    })), t.push.apply(t, o);
  }
  return t;
}
function _objectSpread4(e) {
  for (var r = 1; r < arguments.length; r++) {
    var t = null != arguments[r] ? arguments[r] : {};
    r % 2 ? ownKeys4(Object(t), true).forEach(function(r2) {
      _defineProperty(e, r2, t[r2]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys4(Object(t)).forEach(function(r2) {
      Object.defineProperty(e, r2, Object.getOwnPropertyDescriptor(t, r2));
    });
  }
  return e;
}
function useRadioState(_ref) {
  var id = _ref.id, isSelected = _ref.isSelected, defaultSelected = _ref.defaultSelected;
  var _useContext = (0, import_react16.useContext)(SelectionStoreContext), setGroupState = _useContext.setGroupState, getGroupState2 = _useContext.getGroupState;
  var _useContext2 = (0, import_react16.useContext)(RadioGroupContext), group = _useContext2.id, radioGroupState = _useContext2.radioGroupState, selectRadioItem = _useContext2.selectRadioItem;
  var persistedIsSelected = radioGroupState[id];
  var _useState = (0, import_react16.useState)(function() {
    return persistedIsSelected !== void 0 ? persistedIsSelected : defaultSelected || false;
  }), _useState2 = _slicedToArray(_useState, 2), localIsSelected = _useState2[0], setLocalIsSelected = _useState2[1];
  var setLocalState = (0, import_react16.useCallback)(function(newValue) {
    if (!persistedIsSelected) {
      var nextValue = newValue(persistedIsSelected);
      selectRadioItem(id, nextValue);
      setLocalIsSelected(nextValue);
    }
  }, [persistedIsSelected, id, selectRadioItem]);
  (0, import_react16.useEffect)(function() {
    setLocalIsSelected(function() {
      var existing2 = radioGroupState[id];
      return existing2 !== void 0 ? existing2 : defaultSelected || false;
    });
  }, [radioGroupState, group, id, defaultSelected]);
  if (typeof isSelected === "boolean") {
    return [isSelected, function() {
      return false;
    }];
  }
  if (persistedIsSelected === void 0) {
    var existing = getGroupState2(group);
    var newGroupState = _objectSpread4(_objectSpread4({}, existing), {}, _defineProperty({}, id, defaultSelected || false));
    setGroupState(group, newGroupState);
  }
  return [localIsSelected, setLocalState];
}
var use_radio_state_default = useRadioState;

// node_modules/@atlaskit/dropdown-menu/dist/esm/radio/dropdown-item-radio.js
var _excluded7 = ["children", "defaultSelected", "testId", "id", "title", "description", "isDisabled", "isSelected", "onClick", "shouldDescriptionWrap", "shouldTitleWrap", "interactionName"];
var DropdownItemRadio = function DropdownItemRadio2(_ref) {
  var children = _ref.children, defaultSelected = _ref.defaultSelected, testId = _ref.testId, id = _ref.id, title = _ref.title, description = _ref.description, isDisabled = _ref.isDisabled, isSelected = _ref.isSelected, _ref$onClick = _ref.onClick, providedOnClick = _ref$onClick === void 0 ? noop : _ref$onClick, _ref$shouldDescriptio = _ref.shouldDescriptionWrap, shouldDescriptionWrap = _ref$shouldDescriptio === void 0 ? true : _ref$shouldDescriptio, _ref$shouldTitleWrap = _ref.shouldTitleWrap, shouldTitleWrap = _ref$shouldTitleWrap === void 0 ? true : _ref$shouldTitleWrap, interactionName = _ref.interactionName, rest = _objectWithoutProperties(_ref, _excluded7);
  if (typeof process !== "undefined" && true && typeof isSelected !== "undefined" && typeof defaultSelected !== "undefined") {
    console.warn("[DropdownItemRadio] You've used both `defaultSelected` and `isSelected` props. This is dangerous and can lead to unexpected results. Use one or the other depending if you want to control the components state yourself.");
  }
  var _useRadioState = use_radio_state_default({
    id,
    isSelected,
    defaultSelected
  }), _useRadioState2 = _slicedToArray(_useRadioState, 2), selected = _useRadioState2[0], setSelected = _useRadioState2[1];
  var onClickHandler = (0, import_react17.useCallback)(function(event) {
    setSelected(function(selected2) {
      return !selected2;
    });
    providedOnClick(event);
  }, [providedOnClick, setSelected]);
  var itemRef = use_register_item_with_focus_manager_default();
  return import_react17.default.createElement(SELECTION_STYLE_CONTEXT_DO_NOT_USE.Provider, {
    value: "none"
  }, import_react17.default.createElement(button_item_default, _extends({
    "aria-checked": selected,
    "aria-describedby": "".concat(id, "-radio"),
    description,
    iconBefore: import_react17.default.createElement(radio_icon_default, {
      checked: selected
    }),
    id,
    isDisabled,
    isSelected: selected,
    onClick: onClickHandler,
    ref: itemRef,
    role: "menuitemradio",
    shouldDescriptionWrap,
    shouldTitleWrap,
    testId,
    title,
    interactionName
    // eslint-disable-next-line @repo/internal/react/no-unsafe-spread-props
  }, rest), children), import_react17.default.createElement(visually_hidden_default, {
    id: "".concat(id, "-radio")
  }, "radio button ", selected));
};
var dropdown_item_radio_default = DropdownItemRadio;
export {
  dropdown_menu_item_default as DropdownItem,
  dropdown_item_checkbox_default as DropdownItemCheckbox,
  dropdown_item_checkbox_group_default as DropdownItemCheckboxGroup,
  dropdown_menu_item_group_default as DropdownItemGroup,
  dropdown_item_radio_default as DropdownItemRadio,
  dropdown_item_radio_group_default as DropdownItemRadioGroup,
  dropdown_menu_default as default
};
//# sourceMappingURL=@atlaskit_dropdown-menu.js.map
