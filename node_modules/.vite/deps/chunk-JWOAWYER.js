import {
  Layering,
  popper_wrapper_default,
  useGetMemoizedMergedTriggerRef,
  usePopupAppearance
} from "./chunk-NIAVOAE6.js";
import {
  memoizeOne
} from "./chunk-6X5WLL3E.js";
import {
  Portal
} from "./chunk-PA42JLCQ.js";
import {
  Manager,
  Reference
} from "./chunk-CU24BLAG.js";
import {
  useNotifyOpenLayerObserver
} from "./chunk-GSLSGJXD.js";
import {
  box_default
} from "./chunk-SKNBEIPO.js";
import {
  useId
} from "./chunk-WD223FES.js";
import {
  init_runtime
} from "./chunk-XC7QRLB3.js";
import {
  _slicedToArray,
  fg,
  init_esm,
  init_slicedToArray
} from "./chunk-WFA677R7.js";
import {
  require_react
} from "./chunk-QJTFJ6OV.js";
import {
  __toESM
} from "./chunk-V4OQ3NZ2.js";

// node_modules/@atlaskit/popup/dist/esm/popup.js
init_slicedToArray();
var React = __toESM(require_react());
init_runtime();
var import_react2 = __toESM(require_react());
import "/Users/movalle/Documents/GitHub/test-enhanced-app/node_modules/@atlaskit/popup/dist/esm/popup.compiled.css";
init_esm();

// node_modules/@atlaskit/popup/dist/esm/use-get-memoized-merged-trigger-ref-new.js
init_slicedToArray();
var import_react = __toESM(require_react());
var useGetMemoizedMergedTriggerRefNew = function useGetMemoizedMergedTriggerRefNew2() {
  var _useState = (0, import_react.useState)(function() {
    return memoizeOne(function(ref, setTriggerRef) {
      return function(node) {
        if (node) {
          if (typeof ref === "function") {
            ref(node);
          } else if (ref) {
            ref.current = node;
          }
          setTriggerRef(node);
        }
      };
    });
  }), _useState2 = _slicedToArray(_useState, 1), getMemoizedMergedTriggerRefNew = _useState2[0];
  return getMemoizedMergedTriggerRefNew;
};

// node_modules/@atlaskit/popup/dist/esm/popup.js
var defaultLayer = 400;
var wrapperStyles = {
  root: "_kqswh2mm"
};
var Popup = (0, import_react2.memo)(function(_ref) {
  var xcss = _ref.xcss, _ref$appearance = _ref.appearance, inAppearance = _ref$appearance === void 0 ? "default" : _ref$appearance, isOpen = _ref.isOpen, providedId = _ref.id, offset = _ref.offset, testId = _ref.testId, trigger = _ref.trigger, content = _ref.content, onClose = _ref.onClose, boundary = _ref.boundary, _ref$rootBoundary = _ref.rootBoundary, rootBoundary = _ref$rootBoundary === void 0 ? "viewport" : _ref$rootBoundary, _ref$shouldFlip = _ref.shouldFlip, shouldFlip = _ref$shouldFlip === void 0 ? true : _ref$shouldFlip, _ref$placement = _ref.placement, placement = _ref$placement === void 0 ? "auto" : _ref$placement, fallbackPlacements = _ref.fallbackPlacements, PopupContainer = _ref.popupComponent, _ref$autoFocus = _ref.autoFocus, autoFocus = _ref$autoFocus === void 0 ? true : _ref$autoFocus, _ref$zIndex = _ref.zIndex, zIndex = _ref$zIndex === void 0 ? defaultLayer : _ref$zIndex, _ref$shouldUseCapture = _ref.shouldUseCaptureOnOutsideClick, shouldUseCaptureOnOutsideClick = _ref$shouldUseCapture === void 0 ? false : _ref$shouldUseCapture, _ref$shouldRenderToPa = _ref.shouldRenderToParent, inShouldRenderToParent = _ref$shouldRenderToPa === void 0 ? false : _ref$shouldRenderToPa, _ref$shouldFitContain = _ref.shouldFitContainer, shouldFitContainer = _ref$shouldFitContain === void 0 ? false : _ref$shouldFitContain, _ref$shouldDisableFoc = _ref.shouldDisableFocusLock, shouldDisableFocusLock = _ref$shouldDisableFoc === void 0 ? false : _ref$shouldDisableFoc, _ref$shouldReturnFocu = _ref.shouldReturnFocus, shouldReturnFocus = _ref$shouldReturnFocu === void 0 ? true : _ref$shouldReturnFocu, strategy = _ref.strategy, role = _ref.role, label = _ref.label, titleId = _ref.titleId, modifiers = _ref.modifiers, shouldFitViewport = _ref.shouldFitViewport;
  var _useState = (0, import_react2.useState)(null), _useState2 = _slicedToArray(_useState, 2), triggerRef = _useState2[0], setTriggerRef = _useState2[1];
  var getMergedTriggerRef = useGetMemoizedMergedTriggerRef();
  var getMergedTriggerRefNew = useGetMemoizedMergedTriggerRefNew();
  var generatedId = useId();
  var _usePopupAppearance = usePopupAppearance({
    appearance: inAppearance,
    shouldRenderToParent: inShouldRenderToParent
  }), appearance = _usePopupAppearance.appearance, shouldRenderToParent = _usePopupAppearance.shouldRenderToParent;
  var id = providedId || generatedId;
  var handleOpenLayerObserverCloseSignal = (0, import_react2.useCallback)(function() {
    onClose === null || onClose === void 0 || onClose(null);
  }, [onClose]);
  useNotifyOpenLayerObserver({
    isOpen,
    onClose: handleOpenLayerObserverCloseSignal
  });
  var renderPopperWrapper = React.createElement(Layering, {
    isDisabled: false
  }, React.createElement(popper_wrapper_default, {
    xcss,
    appearance,
    content,
    isOpen,
    placement,
    fallbackPlacements,
    boundary,
    rootBoundary,
    shouldFlip,
    offset,
    popupComponent: PopupContainer,
    id,
    testId,
    onClose,
    autoFocus,
    shouldUseCaptureOnOutsideClick,
    shouldRenderToParent: shouldRenderToParent || shouldFitContainer,
    shouldFitContainer,
    shouldDisableFocusLock,
    shouldReturnFocus,
    triggerRef,
    strategy: shouldFitContainer ? "absolute" : strategy,
    role,
    label,
    titleId,
    modifiers,
    shouldFitViewport
  }));
  var popupContent = React.createElement(Manager, null, React.createElement(Reference, null, function(_ref2) {
    var ref = _ref2.ref;
    return trigger({
      ref: !fg("platform-design-system-popup-ref") ? getMergedTriggerRef(ref, setTriggerRef, isOpen) : getMergedTriggerRefNew(ref, setTriggerRef),
      "aria-controls": isOpen ? id : void 0,
      "aria-expanded": isOpen,
      "aria-haspopup": role === "dialog" && fg("platform_dst_popup-disable-focuslock") ? "dialog" : true
    });
  }), isOpen && (shouldRenderToParent || shouldFitContainer ? renderPopperWrapper : React.createElement(Portal, {
    zIndex
  }, renderPopperWrapper)));
  if (shouldFitContainer) {
    return React.createElement(box_default, {
      xcss: wrapperStyles.root
    }, popupContent);
  }
  return popupContent;
});

// node_modules/@atlaskit/popup/dist/esm/index.js
var esm_default = Popup;

export {
  esm_default
};
//# sourceMappingURL=chunk-JWOAWYER.js.map
