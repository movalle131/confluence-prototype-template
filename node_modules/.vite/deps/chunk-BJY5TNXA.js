import {
  List
} from "./chunk-2HRS2K6J.js";
import {
  require_show_more_horizontal
} from "./chunk-UYH6E2S6.js";
import {
  themedLogoIcon,
  themedLogoText
} from "./chunk-N2BKMIOS.js";
import {
  esm_default
} from "./chunk-JWOAWYER.js";
import {
  DangerouslyHoistCssVarToDocumentRoot,
  HoistCssVarToLocalGrid
} from "./chunk-WV7G5RON.js";
import {
  UNSAFE_topNavVar,
  topNavMountedVar,
  useLayoutId
} from "./chunk-W55EUAGZ.js";
import {
  HasCustomThemeContext,
  IconButton,
  themedButtonBackground,
  themedButtonBackgroundHovered,
  themedButtonBackgroundPressed,
  themedButtonBorder,
  themedButtonDisabledBackground,
  themedButtonDisabledText,
  themedButtonPrimaryBackground,
  themedButtonPrimaryBackgroundHovered,
  themedButtonPrimaryBackgroundPressed,
  themedButtonPrimaryText,
  themedButtonSelectedBackground,
  themedButtonSelectedBackgroundHovered,
  themedButtonSelectedBackgroundPressed,
  themedButtonSelectedBorder,
  themedButtonSelectedText
} from "./chunk-54HUSBMH.js";
import {
  DangerouslyHoistSlotSizes,
  TopNavStartAttachRef
} from "./chunk-5XHNYI7S.js";
import {
  useSkipLink
} from "./chunk-NL42P2DB.js";
import {
  useLayoutEffect
} from "./chunk-PJFXQFKG.js";
import {
  UNSAFE_useMediaQuery,
  cx
} from "./chunk-SKNBEIPO.js";
import {
  _extends,
  init_extends
} from "./chunk-TRLI7EVB.js";
import {
  ax,
  init_runtime
} from "./chunk-XC7QRLB3.js";
import {
  _defineProperty,
  _slicedToArray,
  fg,
  init_defineProperty,
  init_esm,
  init_slicedToArray
} from "./chunk-WFA677R7.js";
import {
  require_react
} from "./chunk-QJTFJ6OV.js";
import {
  __toESM
} from "./chunk-V4OQ3NZ2.js";

// node_modules/@atlaskit/navigation-system/dist/esm/ui/page-layout/top-nav/top-nav.js
var React = __toESM(require_react());
init_runtime();
var import_react2 = __toESM(require_react());
import "/Users/movalle/Documents/GitHub/test-enhanced-app/node_modules/@atlaskit/navigation-system/dist/esm/ui/page-layout/top-nav/top-nav.compiled.css";

// node_modules/@atlaskit/navigation-system/dist/esm/ui/top-nav-items/themed/use-custom-theme.js
var import_react = __toESM(require_react());

// node_modules/@atlaskit/navigation-system/dist/esm/ui/top-nav-items/themed/get-custom-theme-styles.js
init_defineProperty();

// node_modules/@atlaskit/navigation-system/dist/esm/ui/top-nav-items/themed/color-utils/index.js
function linearizeRGBChannel(channel) {
  return channel <= 0.04045 ? channel / 12.92 : Math.pow((channel + 0.055) / 1.055, 2.4);
}
function relativeLuminanceW3C(_ref) {
  var r = _ref.r, g = _ref.g, b = _ref.b;
  var normal = {
    r: r / 255,
    g: g / 255,
    b: b / 255
  };
  var linear = {
    r: linearizeRGBChannel(normal.r),
    g: linearizeRGBChannel(normal.g),
    b: linearizeRGBChannel(normal.b)
  };
  var L = 0.2126 * linear.r + 0.7152 * linear.g + 0.0722 * linear.b;
  return L;
}
var flipLuminance = 0.179129;
function isLight(color) {
  return relativeLuminanceW3C(color) >= flipLuminance;
}
function getColorMode(backgroundColor) {
  if (relativeLuminanceW3C(backgroundColor) >= flipLuminance) {
    return "light";
  }
  return "dark";
}
var textColor = {
  light: {
    hex: "#000",
    rgb: {
      r: 0,
      g: 0,
      b: 0
    }
  },
  dark: {
    hex: "#FFF",
    rgb: {
      r: 255,
      g: 255,
      b: 255
    }
  }
};
function getTextColor(backgroundColor) {
  var colorMode = getColorMode(backgroundColor);
  return textColor[colorMode];
}
function simpleAlphaComposite(_ref2) {
  var background = _ref2.background, foreground = _ref2.foreground;
  return {
    r: foreground.a * foreground.r + background.r * (1 - foreground.a),
    g: foreground.a * foreground.g + background.g * (1 - foreground.a),
    b: foreground.a * foreground.b + background.b * (1 - foreground.a)
  };
}

// node_modules/@atlaskit/navigation-system/dist/esm/ui/top-nav-items/themed/color-utils/formats/hex.js
var isValidHex = function isValidHex2(hex) {
  return (
    // Not using `([a-f0-9]{3,4}){1,2}` because that allows 7 digits which is invalid
    /^#(([a-f0-9]{3,4})|([a-f0-9][a-f0-9]){3,4})$/i.test(hex)
  );
};
function parseHex(color) {
  if (!isValidHex(color)) {
    if (true) {
      console.error("parseHex failed to parse input: '".concat(color, "'"));
    }
    return null;
  }
  var channels;
  if (color.length <= 5) {
    channels = {
      r: color[1].repeat(2),
      g: color[2].repeat(2),
      b: color[3].repeat(2)
    };
  } else {
    channels = {
      r: color.slice(1, 3),
      g: color.slice(3, 5),
      b: color.slice(5, 7)
    };
  }
  return {
    r: parseInt(channels.r, 16),
    g: parseInt(channels.g, 16),
    b: parseInt(channels.b, 16)
  };
}

// node_modules/@atlaskit/navigation-system/dist/esm/ui/top-nav-items/themed/palette.js
var palette = {
  "DarkNeutral-100": "#111213",
  "DarkNeutral-100A": "#01040475",
  DarkNeutral0: "#18191A",
  DarkNeutral100: "#1F1F21",
  DarkNeutral100A: "#BDBDBD0A",
  DarkNeutral200: "#242528",
  DarkNeutral200A: "#CECED912",
  DarkNeutral250: "#2B2C2F",
  DarkNeutral250A: "#D9DAE71A",
  DarkNeutral300: "#303134",
  DarkNeutral300A: "#E3E4F21F",
  DarkNeutral350: "#3D3F43",
  DarkNeutral350A: "#E8EDFD2E",
  DarkNeutral400: "#4B4D51",
  DarkNeutral400A: "#E5E9F640",
  DarkNeutral500: "#63666B",
  DarkNeutral500A: "#E9F0FB5C",
  DarkNeutral600: "#7E8188",
  DarkNeutral700: "#96999E",
  DarkNeutral800: "#A9ABAF",
  DarkNeutral900: "#BFC1C4",
  DarkNeutral1000: "#CECFD2",
  DarkNeutral1100: "#E2E3E4",
  Neutral0: "#FFFFFF",
  Neutral100: "#F8F8F8",
  Neutral100A: "#17171708",
  Neutral200: "#F0F1F2",
  Neutral200A: "#0515240F",
  Neutral300: "#DDDEE1",
  Neutral300A: "#0B120E24",
  Neutral400: "#B7B9BE",
  Neutral400A: "#080F214A",
  Neutral500: "#8C8F97",
  Neutral500A: "#050C1F75",
  Neutral600: "#7D818A",
  Neutral700: "#6B6E76",
  Neutral800: "#505258",
  Neutral900: "#3B3D42",
  Neutral1000: "#292A2E",
  Neutral1100: "#1E1F21"
};
var paletteRgba = {
  DarkNeutral300A: {
    r: 227,
    g: 228,
    b: 242,
    a: 31 / 255
  },
  Neutral300A: {
    r: 11,
    g: 18,
    b: 14,
    a: 36 / 255
  }
};

// node_modules/@atlaskit/navigation-system/dist/esm/ui/top-nav-items/themed/search.js
var themedSearchBorder = "--ds-top-bar-search-border";
var themedSearchBorderFocused = "--ds-top-bar-search-border-focused";
var legacySearchTheme = {
  default: {
    backgroundColor: "transparent",
    color: "currentColor",
    borderColor: "var(".concat(themedSearchBorder, ")")
  },
  focus: {
    /**
     * When expanded the input ignores the custom theme,
     * except for its border which is derived from the highlight color.
     */
    color: "var(--ds-text, #172B4D)",
    backgroundColor: "var(--ds-background-input-pressed, #FFFFFF)",
    borderColor: "var(".concat(themedSearchBorderFocused, ")"),
    boxShadow: "inset 0px 0px 0px 1px var(".concat(themedSearchBorderFocused, ")")
  },
  hover: {
    /**
     * This is not actually used for the search bar input (at least by the Search Platform components).
     *
     * Instead it's used as the hover background color for a close button when on mobile.
     */
    backgroundColor: "var(".concat(themedButtonBackgroundHovered, ")")
  }
};

// node_modules/@atlaskit/navigation-system/dist/esm/ui/top-nav-items/themed/get-custom-theme-styles.js
function ownKeys(e, r) {
  var t = Object.keys(e);
  if (Object.getOwnPropertySymbols) {
    var o = Object.getOwnPropertySymbols(e);
    r && (o = o.filter(function(r2) {
      return Object.getOwnPropertyDescriptor(e, r2).enumerable;
    })), t.push.apply(t, o);
  }
  return t;
}
function _objectSpread(e) {
  for (var r = 1; r < arguments.length; r++) {
    var t = null != arguments[r] ? arguments[r] : {};
    r % 2 ? ownKeys(Object(t), true).forEach(function(r2) {
      _defineProperty(e, r2, t[r2]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function(r2) {
      Object.defineProperty(e, r2, Object.getOwnPropertyDescriptor(t, r2));
    });
  }
  return e;
}
function toRGBString(_ref) {
  var r = _ref.r, g = _ref.g, b = _ref.b;
  return "rgb(".concat(r, ", ").concat(g, ", ").concat(b, ")");
}
function toRGBAString(_ref2) {
  var r = _ref2.r, g = _ref2.g, b = _ref2.b, a = _ref2.a;
  return "rgba(".concat(r, ", ").concat(g, ", ").concat(b, ", ").concat(a, ")");
}
var buttonStyles = {
  light: _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty({}, themedButtonBackground, "transparent"), themedButtonBackgroundHovered, palette.Neutral200A), themedButtonBackgroundPressed, palette.Neutral300A), themedButtonBorder, palette.Neutral300A), themedButtonSelectedBackground, palette.Neutral300A), themedButtonSelectedBackgroundHovered, palette.Neutral400A), themedButtonSelectedBackgroundPressed, palette.Neutral500A), themedButtonDisabledText, palette.Neutral400A), themedButtonDisabledBackground, palette.Neutral100A),
  dark: _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty({}, themedButtonBackground, "transparent"), themedButtonBackgroundHovered, palette.DarkNeutral200A), themedButtonBackgroundPressed, palette.DarkNeutral300A), themedButtonBorder, palette.DarkNeutral300A), themedButtonSelectedBackground, palette.DarkNeutral300A), themedButtonSelectedBackgroundHovered, palette.DarkNeutral400A), themedButtonSelectedBackgroundPressed, palette.DarkNeutral500A), themedButtonDisabledText, palette.DarkNeutral400A), themedButtonDisabledBackground, palette.DarkNeutral100A)
};
var logoStyles = {
  light: _defineProperty(_defineProperty({}, themedLogoIcon, palette.DarkNeutral0), themedLogoText, palette.DarkNeutral0),
  dark: _defineProperty(_defineProperty({}, themedLogoIcon, palette.Neutral0), themedLogoText, palette.Neutral0)
};
function getCustomThemeStyles(_ref3) {
  var backgroundColor = _ref3.backgroundColor, highlightColor = _ref3.highlightColor;
  var backgroundRgb = typeof backgroundColor === "string" ? parseHex(backgroundColor) : backgroundColor;
  var highlightRgb = typeof highlightColor === "string" ? parseHex(highlightColor) : highlightColor;
  if (!backgroundRgb || !highlightRgb) {
    return null;
  }
  var textColor2 = getTextColor(backgroundRgb);
  var colorMode = getColorMode(backgroundRgb);
  var highlightTextColor = getTextColor(highlightRgb);
  return _objectSpread(_objectSpread(_objectSpread(_objectSpread({
    backgroundColor: toRGBString(backgroundRgb),
    color: textColor2.hex
  }, buttonStyles[colorMode]), logoStyles[colorMode]), getSelectedStyles({
    backgroundColor: backgroundRgb,
    colorMode
  })), {}, _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty({}, themedSearchBorder, toRGBAString(_objectSpread(_objectSpread({}, textColor2.rgb), {}, {
    a: 0.5
  }))), themedSearchBorderFocused, toRGBAString(_objectSpread(_objectSpread({}, highlightRgb), {}, {
    a: 0.8
  }))), themedButtonPrimaryBackground, toRGBString(highlightRgb)), themedButtonPrimaryBackgroundHovered, toRGBAString(_objectSpread(_objectSpread({}, highlightRgb), {}, {
    a: 0.8
  }))), themedButtonPrimaryBackgroundPressed, toRGBAString(_objectSpread(_objectSpread({}, highlightRgb), {}, {
    a: 0.65
  }))), themedButtonPrimaryText, highlightTextColor.hex));
}
var selectedBackgroundRGBA = {
  light: paletteRgba.Neutral300A,
  dark: paletteRgba.DarkNeutral300A
};
function getSelectedStyles(_ref4) {
  var backgroundColor = _ref4.backgroundColor, colorMode = _ref4.colorMode;
  var foregroundColor = selectedBackgroundRGBA[colorMode];
  var blendedBackground = simpleAlphaComposite({
    background: backgroundColor,
    foreground: foregroundColor
  });
  return _defineProperty(_defineProperty({}, themedButtonSelectedText, getTextColor(blendedBackground).hex), themedButtonSelectedBorder, isLight(blendedBackground) ? palette.Neutral1100 : palette.DarkNeutral1100);
}

// node_modules/@atlaskit/navigation-system/dist/esm/ui/top-nav-items/themed/use-custom-theme.js
function useCustomTheme(theme) {
  var value = (0, import_react.useMemo)(
    function() {
      if (!(theme !== null && theme !== void 0 && theme.backgroundColor) || !(theme !== null && theme !== void 0 && theme.highlightColor)) {
        return {
          isEnabled: false
        };
      }
      var value2 = {
        backgroundColor: theme.backgroundColor,
        highlightColor: theme.highlightColor
      };
      var style = getCustomThemeStyles(value2);
      if (!style) {
        return {
          isEnabled: false
        };
      }
      return {
        isEnabled: true,
        style
      };
    },
    // Using individual properties as keys for improved memoization.
    // Now this effect will only run if the values change rather than
    // the reference to the object (which might be new on every call)
    [theme === null || theme === void 0 ? void 0 : theme.backgroundColor, theme === null || theme === void 0 ? void 0 : theme.highlightColor]
  );
  return value;
}

// node_modules/@atlaskit/navigation-system/dist/esm/ui/page-layout/top-nav/top-nav.js
var styles = {
  root: "_nd5l8cbt _zulpu2gc _18zrutpp _179rzgxb _1e0c11p5 _yv0e1mfv _4cvr1h6o _bfhkvuon _vchhusvi _4t3i1dgc _152t1nws _kqsw1if8 _1pbyegat _d6vu1bgi _1j8b18ax"
};
function TopNav(_ref) {
  var children = _ref.children, xcss = _ref.xcss, _ref$height = _ref.height, height = _ref$height === void 0 ? 48 : _ref$height, _ref$skipLinkLabel = _ref.skipLinkLabel, skipLinkLabel = _ref$skipLinkLabel === void 0 ? "Top Bar" : _ref$skipLinkLabel, testId = _ref.testId, providedId = _ref.id, UNSAFE_theme = _ref.UNSAFE_theme;
  var dangerouslyHoistSlotSizes = (0, import_react2.useContext)(DangerouslyHoistSlotSizes);
  var id = useLayoutId({
    providedId
  });
  useSkipLink(id, skipLinkLabel);
  var customTheme = useCustomTheme(UNSAFE_theme);
  return React.createElement(HasCustomThemeContext.Provider, {
    value: customTheme.isEnabled
  }, React.createElement(
    "header",
    {
      id,
      "data-layout-slot": true,
      className: ax([styles.root, xcss]),
      "data-testid": testId,
      style: customTheme.isEnabled ? customTheme.style : void 0
    },
    React.createElement(HoistCssVarToLocalGrid, {
      variableName: topNavMountedVar,
      value: height
    }),
    dangerouslyHoistSlotSizes && // ------ START UNSAFE STYLES ------
    // These styles are only needed for the UNSAFE legacy use case for Jira + Confluence.
    // When they aren't needed anymore we can delete them wholesale.
    React.createElement(DangerouslyHoistCssVarToDocumentRoot, {
      variableName: UNSAFE_topNavVar,
      value: height
    }),
    children
  ));
}

// node_modules/@atlaskit/navigation-system/dist/esm/ui/page-layout/top-nav/top-nav-start.js
init_runtime();
var import_react3 = __toESM(require_react());
init_esm();
import "/Users/movalle/Documents/GitHub/test-enhanced-app/node_modules/@atlaskit/navigation-system/dist/esm/ui/page-layout/top-nav/top-nav-start.compiled.css";
var styles2 = {
  root: "_zulp1b66 _yyhykb7n _4t3i1osq _4cvr1h6o _1e0c1txw _glte1ris _15ri1mjv _1gs5usvi"
};
function TopNavStart(_ref) {
  var children = _ref.children, testId = _ref.testId;
  var ref = (0, import_react3.useContext)(TopNavStartAttachRef);
  var elementRef = (0, import_react3.useRef)(null);
  (0, import_react3.useEffect)(function() {
    if (fg("platform_fix_component_state_update_for_suspense")) {
      ref(elementRef.current);
    }
  }, [elementRef, ref]);
  return import_react3.default.createElement("div", {
    ref: fg("platform_fix_component_state_update_for_suspense") ? elementRef : ref,
    "data-testid": testId,
    className: ax([styles2.root])
  }, children);
}

// node_modules/@atlaskit/navigation-system/dist/esm/ui/page-layout/top-nav/top-nav-middle.js
init_runtime();
var import_react4 = __toESM(require_react());
import "/Users/movalle/Documents/GitHub/test-enhanced-app/node_modules/@atlaskit/navigation-system/dist/esm/ui/page-layout/top-nav/top-nav-middle.compiled.css";
var styles3 = {
  root: "_zulpu2gc _yyhycs5v _1bsb1osq _4cvr1h6o _1e0c1txw _1bahh9n0 _181n11p5 _1j8b15b0 _lagd1bp4 _1t4c1ris _12e8h9n0"
};
function TopNavMiddle(_ref) {
  var children = _ref.children;
  return import_react4.default.createElement("div", {
    className: ax([styles3.root])
  }, children);
}

// node_modules/@atlaskit/navigation-system/dist/esm/ui/page-layout/top-nav/top-nav-end.js
init_extends();
init_slicedToArray();
init_runtime();
var import_react5 = __toESM(require_react());
import "/Users/movalle/Documents/GitHub/test-enhanced-app/node_modules/@atlaskit/navigation-system/dist/esm/ui/page-layout/top-nav/top-nav-end.compiled.css";
var import_show_more_horizontal = __toESM(require_show_more_horizontal());
var containerStyles = {
  root: "_yyhy11wp _1e0c1txw _1bahh9n0 _1ul9zwfg _1d2y1ris _glte1ris _15ri1mjv _1gs5usvi _ndwch9n0"
};
var listStyles = {
  root: "_zulp1b66 _4cvr1h6o _1e0c1txw",
  hideOnSmallViewport: "_1e0cglyw _181n1txw",
  popupContainer: "_1yt4u2gc"
};
function TopNavEnd(_ref) {
  var children = _ref.children, _ref$label = _ref.label, label = _ref$label === void 0 ? "Actions" : _ref$label, _ref$showMoreButtonLa = _ref.showMoreButtonLabel, showMoreButtonLabel = _ref$showMoreButtonLa === void 0 ? "Show more" : _ref$showMoreButtonLa;
  var _useState = (0, import_react5.useState)(false), _useState2 = _slicedToArray(_useState, 2), isOpen = _useState2[0], setIsOpen = _useState2[1];
  var _useState3 = (0, import_react5.useState)(false), _useState4 = _slicedToArray(_useState3, 2), isMobile = _useState4[0], setIsMobile = _useState4[1];
  var query = UNSAFE_useMediaQuery("below.sm", function onChange(event) {
    setIsMobile(event.matches);
    setIsOpen(false);
  });
  useLayoutEffect(function() {
    var _query$matches;
    setIsMobile((_query$matches = query === null || query === void 0 ? void 0 : query.matches) !== null && _query$matches !== void 0 ? _query$matches : false);
  }, [query]);
  return import_react5.default.createElement("nav", {
    "aria-label": label,
    className: ax([containerStyles.root])
  }, isMobile ? import_react5.default.createElement(esm_default, {
    isOpen,
    onClose: function onClose() {
      return setIsOpen(false);
    },
    placement: "bottom-start",
    shouldRenderToParent: true,
    content: function content() {
      return import_react5.default.createElement(HasCustomThemeContext.Provider, {
        value: false
      }, import_react5.default.createElement(List, {
        xcss: cx(listStyles.root, listStyles.popupContainer)
      }, children));
    },
    trigger: function trigger(triggerProps) {
      return import_react5.default.createElement(IconButton, _extends({}, triggerProps, {
        label: showMoreButtonLabel,
        isSelected: isOpen,
        onClick: function onClick() {
          return setIsOpen(!isOpen);
        },
        icon: import_show_more_horizontal.default,
        isTooltipDisabled: false
      }));
    }
  }) : import_react5.default.createElement(List, {
    xcss: cx(listStyles.root, listStyles.hideOnSmallViewport)
  }, children));
}

export {
  TopNav,
  TopNavStart,
  TopNavMiddle,
  TopNavEnd
};
//# sourceMappingURL=chunk-BJY5TNXA.js.map
