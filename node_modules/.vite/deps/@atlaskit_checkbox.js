import {
  svg_default
} from "./chunk-AF4SYBWW.js";
import {
  mergeRefs
} from "./chunk-HDYTRULV.js";
import {
  B200,
  B300,
  B400,
  B50,
  N10,
  N100,
  N20,
  N30,
  N70,
  N80,
  N900,
  R300,
  R500
} from "./chunk-CM4DOMEY.js";
import {
  usePlatformLeafEventHandler
} from "./chunk-ON37A5TK.js";
import {
  _extends,
  init_extends
} from "./chunk-TRLI7EVB.js";
import {
  ax,
  cssCustomPropertyValue,
  init_runtime
} from "./chunk-XC7QRLB3.js";
import "./chunk-RG5U4ZYV.js";
import {
  _objectWithoutProperties,
  _slicedToArray,
  fg,
  init_esm,
  init_objectWithoutProperties,
  init_slicedToArray
} from "./chunk-WFA677R7.js";
import {
  require_react
} from "./chunk-QJTFJ6OV.js";
import {
  __toESM
} from "./chunk-V4OQ3NZ2.js";

// node_modules/@atlaskit/checkbox/dist/esm/checkbox.js
init_extends();
init_slicedToArray();
init_objectWithoutProperties();
var React5 = __toESM(require_react());
init_runtime();
var import_react2 = __toESM(require_react());
import "/Users/movalle/Documents/GitHub/test-enhanced-app/node_modules/@atlaskit/checkbox/dist/esm/checkbox.compiled.css";

// node_modules/@atlaskit/checkbox/dist/esm/internal/checkbox-icon.js
var React = __toESM(require_react());
init_runtime();
var import_react = __toESM(require_react());
init_esm();
function getIcon(isIndeterminate, isChecked) {
  if (isIndeterminate) {
    if (fg("platform-visual-refresh-icons")) {
      return React.createElement("path", {
        fillRule: "evenodd",
        clipRule: "evenodd",
        d: "M7.75 12.75H16.25V11.25H7.75V12.75Z",
        fill: "inherit"
      });
    } else {
      return React.createElement("rect", {
        fill: "inherit",
        x: "8",
        y: "11",
        width: "8",
        height: "2",
        rx: "1"
      });
    }
  }
  if (isChecked) {
    if (fg("platform-visual-refresh-icons")) {
      return React.createElement("path", {
        fillRule: "evenodd",
        clipRule: "evenodd",
        d: "M16.3262 9.48011L15.1738 8.51984L10.75 13.8284L8.82616 11.5198L7.67383 12.4801L10.1738 15.4801C10.3163 15.6511 10.5274 15.75 10.75 15.75C10.9726 15.75 11.1837 15.6511 11.3262 15.4801L16.3262 9.48011Z",
        fill: "inherit"
      });
    } else {
      return React.createElement("path", {
        d: "M9.707 11.293a1 1 0 1 0-1.414 1.414l2 2a1 1 0 0 0 1.414 0l4-4a1 1 0 1 0-1.414-1.414L11 12.586l-1.293-1.293z",
        fill: "inherit"
      });
    }
  }
  return null;
}
var CheckboxIcon = (0, import_react.memo)(function(_ref) {
  var isIndeterminate = _ref.isIndeterminate, isChecked = _ref.isChecked;
  var icon = (0, import_react.useMemo)(function() {
    return getIcon(isIndeterminate, isChecked);
  }, [isIndeterminate, isChecked]);
  return React.createElement(svg_default, {
    label: "",
    primaryColor: "var(--checkbox-background-color)",
    secondaryColor: "var(--checkbox-tick-color)"
  }, React.createElement(
    "g",
    {
      fillRule: "evenodd"
    },
    // eslint-disable-next-line @atlaskit/platform/ensure-feature-flag-prefix
    fg("platform-visual-refresh-icons") ? React.createElement("rect", {
      fill: "currentColor",
      x: "5.5",
      y: "5.5",
      width: "13",
      height: "13",
      rx: "1.5"
    }) : React.createElement("rect", {
      fill: "currentColor",
      x: "6",
      y: "6",
      width: "12",
      height: "12",
      rx: "2"
    }),
    icon
  ));
});
var checkbox_icon_default = CheckboxIcon;

// node_modules/@atlaskit/checkbox/dist/esm/internal/label.js
var React2 = __toESM(require_react());
init_runtime();
import "/Users/movalle/Documents/GitHub/test-enhanced-app/node_modules/@atlaskit/checkbox/dist/esm/internal/label.compiled.css";
function Label(_ref) {
  var children = _ref.children, isDisabled = _ref.isDisabled, testId = _ref.testId, label = _ref.label, id = _ref.id, xcss = _ref.xcss;
  return React2.createElement("label", {
    className: ax(["_11c82smr _1e0c11p5 _1ejihkll _umai184x _syazovqm _80om73ad", label && "_zulp1te3 _yv0ey09t", isDisabled && "_syaz7wap _80om13gf", "_h5e31kd8 _1nzs1kc0 _1esz1j4g _yp0j1ehr _ay2w1ouc _d51u12ci _phftddza _1g1fe69j _l6wk1j4g _1dik1ehr _1sfg1380 _fpdj1ouc _1yjc3zdg _oaj1ddza _1j3h1380 _eawbxz7c _1rdaeh7q _18q0snw8 _13hr1j28", xcss]),
    "data-testid": testId,
    "data-disabled": isDisabled || void 0,
    id,
    style: {
      "--_5xk3r4": cssCustomPropertyValue("var(--ds-text, ".concat(N900, ")")),
      "--_1l71759": cssCustomPropertyValue("var(--ds-space-0, 0px)".concat(" ", "var(--ds-space-050, 4px)")),
      "--_1ynhf1h": cssCustomPropertyValue("var(--ds-text-disabled, ".concat(N80, ")")),
      "--_4mkb4g": cssCustomPropertyValue("var(--ds-background-input, ".concat(N10, ")")),
      "--_1cd0fcx": cssCustomPropertyValue("var(--ds-background-input-pressed, ".concat(B50, ")")),
      "--_1gcp7nr": cssCustomPropertyValue("var(--ds-background-selected-bold, ".concat(B400, ")")),
      "--_14y1fod": cssCustomPropertyValue("var(--ds-background-selected-bold-hovered, ".concat(B300, ")")),
      "--_r5pknd": cssCustomPropertyValue("var(--ds-background-disabled, ".concat(N20, ")")),
      "--_1z08gfx": cssCustomPropertyValue("var(--ds-background-input-hovered, ".concat(N30, ")")),
      "--_vnm8xo": cssCustomPropertyValue("var(--ds-border-input, ".concat(N100, ")")),
      "--_rczcge": cssCustomPropertyValue("var(--ds-border, ".concat(B50, ")")),
      "--_1i4xulb": cssCustomPropertyValue("var(--ds-border-danger, ".concat(R300, ")")),
      "--_xjqa3d": cssCustomPropertyValue("var(--ds-border-focused, ".concat(B200, ")")),
      "--_uq1ko9": cssCustomPropertyValue("var(--ds-icon-inverse, ".concat(B400, ")")),
      "--_jf353p": cssCustomPropertyValue("var(--ds-icon-inverse, ".concat(N10, ")")),
      "--_1xmcmw9": cssCustomPropertyValue("var(--ds-icon-disabled, ".concat(N70, ")"))
    }
  }, children);
}

// node_modules/@atlaskit/checkbox/dist/esm/internal/label-text.js
var React3 = __toESM(require_react());
init_runtime();
import "/Users/movalle/Documents/GitHub/test-enhanced-app/node_modules/@atlaskit/checkbox/dist/esm/internal/label-text.compiled.css";
function LabelText(_ref) {
  var children = _ref.children;
  return React3.createElement("span", {
    className: ax(["_nd5l11ig _1wpz1h6o"])
  }, children);
}

// node_modules/@atlaskit/checkbox/dist/esm/internal/required-indicator.js
var React4 = __toESM(require_react());
init_runtime();
import "/Users/movalle/Documents/GitHub/test-enhanced-app/node_modules/@atlaskit/checkbox/dist/esm/internal/required-indicator.compiled.css";
function RequiredIndicator() {
  return React4.createElement("span", {
    "aria-hidden": true,
    className: ax(["_syaz1ml5 _bozgv77o"]),
    style: {
      "--_1xw92dq": cssCustomPropertyValue("var(--ds-text-danger, ".concat(R500, ")"))
    }
  }, "*");
}

// node_modules/@atlaskit/checkbox/dist/esm/checkbox.js
var _excluded = ["isChecked", "isDisabled", "isInvalid", "defaultChecked", "isIndeterminate", "onChange", "analyticsContext", "label", "name", "value", "isRequired", "testId", "xcss", "className"];
var checkboxStyles = {
  root: "_19itglyw _nd5lfibj _12ji1r31 _1qu2glyw _12y31o36 _1bsb1osq _4t3i1osq _r06hglyw _6rthze3t _1pfhze3t _12l2ze3t _ahbqze3t _tzy4idpf _r050fibj _9bg71mn3 _19op11so _a30fhteq _1610e4h9 _13wo93zu _q5a61gyf _8gq114p8 _wje2mov0 _1fo21cni _eyedglyw _1ef7js4s _1h6rjs4s _smzgj3jf _1dk7j3jf _l71j1i6y _t34a1i6y _y32gkivo _1ah9199y _1frj180l _h78e1g3k _dwvb1ps2 _1bok170n _1mhr17cl _fx2i3rva _10oaq2ws _w12s155b _15y61vek _e6ww155b _sg1j1vek _rphw18jz _y9y9mz2b _141bmz2b _255gmz2b _jj67mz2b _swhgmz2b _axq81diq _1jiz1diq _s9051diq _1efy1diq _1oav1diq _10y313gf _1wt913gf _qq8613gf _1adw13gf _12sr13gf _16jiglyw _693jglyw _1niqglyw _cl9tglyw _1jbnglyw _j1ta1hou _18qu1ps2 _1g52170n _1log17cl _32hzmz2b _1vv91diq _yjhd1hou _w1cowc43 _jdqn1onz _4y4t1onz _lvfrwc43 _g68dwc43 _13dk1onz _w1el1onz _a9yw1onz _1l3g1onz _dcdpgir2 _wobcgir2 _rp9wgir2 _9ebfwc43 _e43iwc43 _1tkuwc43 _1lehwc43 _b9q3wc43 _tu2918qt _1uxv18qt _1ufw18qt _opo918qt _1e8318qt _1k3d18qt _25yv18qt _1igz18qt _c7cc18qt _1swg18qt"
};
var Checkbox = (0, import_react2.memo)((0, import_react2.forwardRef)(function Checkbox2(_ref, ref) {
  var isCheckedProp = _ref.isChecked, _ref$isDisabled = _ref.isDisabled, isDisabled = _ref$isDisabled === void 0 ? false : _ref$isDisabled, _ref$isInvalid = _ref.isInvalid, isInvalid = _ref$isInvalid === void 0 ? false : _ref$isInvalid, _ref$defaultChecked = _ref.defaultChecked, defaultChecked = _ref$defaultChecked === void 0 ? false : _ref$defaultChecked, _ref$isIndeterminate = _ref.isIndeterminate, isIndeterminate = _ref$isIndeterminate === void 0 ? false : _ref$isIndeterminate, onChangeProps = _ref.onChange, analyticsContext = _ref.analyticsContext, label = _ref.label, name = _ref.name, value = _ref.value, isRequired = _ref.isRequired, testId = _ref.testId, xcss = _ref.xcss, className = _ref.className, rest = _objectWithoutProperties(_ref, _excluded);
  var _useState = (0, import_react2.useState)(isCheckedProp !== void 0 ? isCheckedProp : defaultChecked), _useState2 = _slicedToArray(_useState, 2), isCheckedState = _useState2[0], setIsCheckedState = _useState2[1];
  var onChange = (0, import_react2.useCallback)(function(e, analyticsEvent) {
    setIsCheckedState(e.target.checked);
    if (onChangeProps) {
      onChangeProps(e, analyticsEvent);
    }
  }, [onChangeProps]);
  var onChangeAnalytics = usePlatformLeafEventHandler({
    fn: onChange,
    action: "changed",
    analyticsData: analyticsContext,
    componentName: "checkbox",
    packageName: "@atlaskit/checkbox",
    packageVersion: "17.1.8"
  });
  var internalRef = (0, import_react2.useRef)(null);
  var mergedRefs = mergeRefs([internalRef, ref]);
  var isChecked = isCheckedProp === void 0 ? isCheckedState : isCheckedProp;
  (0, import_react2.useEffect)(function() {
    if (internalRef.current) {
      internalRef.current.indeterminate = isIndeterminate;
    }
  }, [isIndeterminate]);
  return React5.createElement(Label, {
    isDisabled,
    label,
    id: rest.id ? "".concat(rest.id, "-label") : void 0,
    testId: testId && "".concat(testId, "--checkbox-label"),
    xcss
  }, React5.createElement("input", _extends({
    // It is necessary only for Safari. It allows to render focus styles.
    tabIndex: 0
  }, rest, {
    type: "checkbox",
    ref: mergedRefs,
    disabled: isDisabled,
    checked: isChecked,
    value,
    name,
    required: isRequired,
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-classname-prop
    className: ax([checkboxStyles.root, className]),
    onChange: onChangeAnalytics,
    "aria-invalid": isInvalid ? "true" : void 0,
    "data-testid": testId && "".concat(testId, "--hidden-checkbox"),
    "data-invalid": isInvalid ? "true" : void 0
  })), React5.createElement(checkbox_icon_default, {
    isIndeterminate,
    isChecked
  }), label && React5.createElement(LabelText, null, label, isRequired && React5.createElement(RequiredIndicator, null)));
}));
Checkbox.displayName = "Checkbox";
var checkbox_default = Checkbox;
export {
  checkbox_default as Checkbox,
  checkbox_default as default
};
//# sourceMappingURL=@atlaskit_checkbox.js.map
