import {
  inverseColorMap
} from "./chunk-PJFXQFKG.js";
import {
  useSurface
} from "./chunk-PUGER6BV.js";
import {
  ax,
  init_runtime
} from "./chunk-XC7QRLB3.js";
import {
  _slicedToArray,
  init_slicedToArray
} from "./chunk-WFA677R7.js";
import {
  require_react
} from "./chunk-QJTFJ6OV.js";
import {
  __toESM
} from "./chunk-V4OQ3NZ2.js";

// node_modules/@atlaskit/heading/dist/esm/heading.partial.js
init_slicedToArray();
var React2 = __toESM(require_react());
init_runtime();
var import_react2 = __toESM(require_react());
import "/Users/movalle/Documents/GitHub/test-enhanced-app/node_modules/@atlaskit/heading/dist/esm/heading.partial.compiled.css";

// node_modules/@atlaskit/heading/dist/esm/heading-context.js
var import_react = __toESM(require_react());
var HeadingLevelContext = (0, import_react.createContext)(0);
var useHeadingLevel = function useHeadingLevel2() {
  return (0, import_react.useContext)(HeadingLevelContext);
};
var useHeading = function useHeading2(fallback) {
  var hLevel = useHeadingLevel();
  return [hLevel, hLevel && (hLevel > 6 ? "div" : "h".concat(hLevel)) || fallback];
};
var HeadingLevelContextProvider = function HeadingLevelContextProvider2(_ref) {
  var children = _ref.children, value = _ref.value;
  var parentHeadingLevel = useHeadingLevel();
  var headingLevel = parentHeadingLevel + 1;
  return import_react.default.createElement(HeadingLevelContext.Provider, {
    value: value || headingLevel
  }, children);
};
var heading_context_default = HeadingLevelContextProvider;

// node_modules/@atlaskit/heading/dist/esm/heading.partial.js
var sizeTagMap = {
  xxlarge: "h1",
  xlarge: "h1",
  large: "h2",
  medium: "h3",
  small: "h4",
  xsmall: "h5",
  xxsmall: "h6"
};
var styles = {
  reset: "_1mouidpf _1dyz4jg8 _1p1dglyw"
};
var headingColorStylesMap = {
  "color.text": "_syaz1fxt",
  "color.text.inverse": "_syaz15cr",
  "color.text.warning.inverse": "_syazal3n"
};
var headingSizeStylesMap = {
  xxlarge: "_11c84xcc",
  xlarge: "_11c81c04",
  large: "_11c8nf1z",
  medium: "_11c8lodh",
  small: "_11c8nbxd",
  xsmall: "_11c8140y",
  xxsmall: "_11c81vhk"
};
var useColor = function useColor2(colorProp) {
  var surface = useSurface();
  if (colorProp) {
    return colorProp;
  }
  if (inverseColorMap.hasOwnProperty(surface)) {
    return inverseColorMap[surface];
  }
  return "color.text";
};
var Heading = (0, import_react2.forwardRef)(function(props, ref) {
  var children = props.children, size = props.size, id = props.id, testId = props.testId, as = props.as, colorProp = props.color;
  if (typeof process !== "undefined" && true && as && typeof as !== "string") {
    throw new Error("`as` prop should be a string.");
  }
  var _useHeading = useHeading(sizeTagMap[size]), _useHeading2 = _slicedToArray(_useHeading, 2), hLevel = _useHeading2[0], inferredElement = _useHeading2[1];
  var Component = as || inferredElement;
  var needsAriaRole = Component === "div" && hLevel;
  var color = useColor(colorProp);
  return React2.createElement(Component, {
    id,
    ref,
    "data-testid": testId,
    role: needsAriaRole ? "heading" : void 0,
    "aria-level": needsAriaRole ? hLevel : void 0,
    className: ax([styles.reset, size && headingSizeStylesMap[size], headingColorStylesMap[color]])
  }, children);
});
var heading_partial_default = Heading;

export {
  heading_context_default,
  heading_partial_default
};
//# sourceMappingURL=chunk-7XDZG4AG.js.map
