{
  "version": 3,
  "sources": ["../../@atlaskit/navigation-system/dist/esm/ui/page-layout/hoist-utils.js"],
  "sourcesContent": ["import React from 'react';\nimport { gridRootId } from './root';\n\n/**\n * This is not ideal and shouldn't be used by anything outside of `<Banner>` and `<TopNav>`.\n *\n * This makes the other page layout elements aware that the banner and top bar have been mounted, provides them\n * with their heights. This is needed to power the stick points of page layout elements like SideNav and Panel.\n *\n * We should clean this up once we have a better solution, such as moving the size props for banner and top bar into `Root`.\n */\nexport var HoistCssVarToLocalGrid = function HoistCssVarToLocalGrid(_ref) {\n  var variableName = _ref.variableName,\n    value = _ref.value;\n  return /*#__PURE__*/React.createElement(\"style\", null, \"#\".concat(gridRootId, \" { \").concat(variableName, \": \").concat(value, \"px }\"));\n};\nvar getCssStringValue = function getCssStringValue(value) {\n  return typeof value === 'number' ? \"\".concat(value, \"px\") : value;\n};\n\n/**\n * Hoists CSS variables to the document root. This is support the legacy edge case of monolith pages being injected as a\n * sibling to the page layout, as opposed to within the `Main` slot.\n */\nexport var DangerouslyHoistCssVarToDocumentRoot = function DangerouslyHoistCssVarToDocumentRoot(_ref2) {\n  var variableName = _ref2.variableName,\n    value = _ref2.value,\n    mediaQuery = _ref2.mediaQuery,\n    responsiveValue = _ref2.responsiveValue;\n  /**\n   * Note don't put multiple variables in multiple lines. eg\n   * <style>\n   *   {css1}\n   *   {css2}\n   * </style>\n   *\n   * React will insert an empty HTML comment in between the text in SSR.\n   * This is not a valid tag and will break the page.\n   * <style>foo<!-- -->bar</style>\n   */\n  var style = \":root { \".concat(variableName, \": \").concat(getCssStringValue(value), \" }\");\n  if (mediaQuery && responsiveValue) {\n    style += \" \".concat(mediaQuery, \" { :root { \").concat(variableName, \": \").concat(getCssStringValue(responsiveValue), \" } }\");\n  }\n  return (\n    /*#__PURE__*/\n    // Using a global style is required for SSR, as we can't use React hooks\n    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-global-styles\n    React.createElement(\"style\", null, style)\n  );\n};"],
  "mappings": ";;;;;;;;;;;AAAA,mBAAkB;AAWX,IAAI,yBAAyB,SAASA,wBAAuB,MAAM;AACxE,MAAI,eAAe,KAAK,cACtB,QAAQ,KAAK;AACf,SAAoB,aAAAC,QAAM,cAAc,SAAS,MAAM,IAAI,OAAO,YAAY,KAAK,EAAE,OAAO,cAAc,IAAI,EAAE,OAAO,OAAO,MAAM,CAAC;AACvI;AACA,IAAI,oBAAoB,SAASC,mBAAkB,OAAO;AACxD,SAAO,OAAO,UAAU,WAAW,GAAG,OAAO,OAAO,IAAI,IAAI;AAC9D;AAMO,IAAI,uCAAuC,SAASC,sCAAqC,OAAO;AACrG,MAAI,eAAe,MAAM,cACvB,QAAQ,MAAM,OACd,aAAa,MAAM,YACnB,kBAAkB,MAAM;AAY1B,MAAI,QAAQ,WAAW,OAAO,cAAc,IAAI,EAAE,OAAO,kBAAkB,KAAK,GAAG,IAAI;AACvF,MAAI,cAAc,iBAAiB;AACjC,aAAS,IAAI,OAAO,YAAY,aAAa,EAAE,OAAO,cAAc,IAAI,EAAE,OAAO,kBAAkB,eAAe,GAAG,MAAM;AAAA,EAC7H;AACA;AAAA;AAAA;AAAA,IAIE,aAAAF,QAAM,cAAc,SAAS,MAAM,KAAK;AAAA;AAE5C;",
  "names": ["HoistCssVarToLocalGrid", "React", "getCssStringValue", "DangerouslyHoistCssVarToDocumentRoot"]
}
