import {
  memoizeOne
} from "./chunk-6X5WLL3E.js";
import {
  Popper
} from "./chunk-PA42JLCQ.js";
import {
  UNSAFE_useMediaQuery
} from "./chunk-SKNBEIPO.js";
import {
  noop
} from "./chunk-LRKC55FU.js";
import {
  _extends,
  init_extends
} from "./chunk-TRLI7EVB.js";
import {
  ax,
  init_runtime
} from "./chunk-XC7QRLB3.js";
import {
  require_dist
} from "./chunk-4XFTJAYZ.js";
import {
  _toConsumableArray
} from "./chunk-RG5U4ZYV.js";
import {
  _classCallCheck,
  _createClass,
  _objectWithoutProperties,
  _slicedToArray,
  fg,
  init_classCallCheck,
  init_createClass,
  init_esm,
  init_objectWithoutProperties,
  init_slicedToArray
} from "./chunk-WFA677R7.js";
import {
  require_react
} from "./chunk-QJTFJ6OV.js";
import {
  __commonJS,
  __toESM
} from "./chunk-V4OQ3NZ2.js";

// node_modules/tabbable/index.js
var require_tabbable = __commonJS({
  "node_modules/tabbable/index.js"(exports, module) {
    module.exports = function(el, options) {
      options = options || {};
      var elementDocument = el.ownerDocument || el;
      var basicTabbables = [];
      var orderedTabbables = [];
      var isUnavailable = createIsUnavailable(elementDocument);
      var candidateSelectors = [
        "input",
        "select",
        "a[href]",
        "textarea",
        "button",
        "[tabindex]"
      ];
      var candidates = el.querySelectorAll(candidateSelectors.join(","));
      if (options.includeContainer) {
        var matches = Element.prototype.matches || Element.prototype.msMatchesSelector || Element.prototype.webkitMatchesSelector;
        if (candidateSelectors.some(function(candidateSelector) {
          return matches.call(el, candidateSelector);
        })) {
          candidates = Array.prototype.slice.apply(candidates);
          candidates.unshift(el);
        }
      }
      var candidate, candidateIndexAttr, candidateIndex;
      for (var i = 0, l = candidates.length; i < l; i++) {
        candidate = candidates[i];
        candidateIndexAttr = parseInt(candidate.getAttribute("tabindex"), 10);
        candidateIndex = isNaN(candidateIndexAttr) ? candidate.tabIndex : candidateIndexAttr;
        if (candidateIndex < 0 || candidate.tagName === "INPUT" && candidate.type === "hidden" || candidate.disabled || isUnavailable(candidate, elementDocument)) {
          continue;
        }
        if (candidateIndex === 0) {
          basicTabbables.push(candidate);
        } else {
          orderedTabbables.push({
            index: i,
            tabIndex: candidateIndex,
            node: candidate
          });
        }
      }
      var tabbableNodes = orderedTabbables.sort(function(a, b) {
        return a.tabIndex === b.tabIndex ? a.index - b.index : a.tabIndex - b.tabIndex;
      }).map(function(a) {
        return a.node;
      });
      Array.prototype.push.apply(tabbableNodes, basicTabbables);
      return tabbableNodes;
    };
    function createIsUnavailable(elementDocument) {
      var isOffCache = [];
      function isOff(node, nodeComputedStyle) {
        if (node === elementDocument.documentElement) return false;
        for (var i = 0, length = isOffCache.length; i < length; i++) {
          if (isOffCache[i][0] === node) return isOffCache[i][1];
        }
        nodeComputedStyle = nodeComputedStyle || elementDocument.defaultView.getComputedStyle(node);
        var result = false;
        if (nodeComputedStyle.display === "none") {
          result = true;
        } else if (node.parentNode) {
          result = isOff(node.parentNode);
        }
        isOffCache.push([node, result]);
        return result;
      }
      return function isUnavailable(node) {
        if (node === elementDocument.documentElement) return false;
        var computedStyle = elementDocument.defaultView.getComputedStyle(node);
        if (isOff(node, computedStyle)) return true;
        return computedStyle.visibility === "hidden";
      };
    }
  }
});

// node_modules/focus-trap/index.js
var require_focus_trap = __commonJS({
  "node_modules/focus-trap/index.js"(exports, module) {
    var tabbable = require_tabbable();
    var listeningFocusTrap = null;
    function focusTrap(element, userOptions) {
      var tabbableNodes = [];
      var firstTabbableNode = null;
      var lastTabbableNode = null;
      var nodeFocusedBeforeActivation = null;
      var active = false;
      var paused = false;
      var tabEvent = null;
      var container = typeof element === "string" ? document.querySelector(element) : element;
      var config = userOptions || {};
      config.returnFocusOnDeactivate = userOptions && userOptions.returnFocusOnDeactivate !== void 0 ? userOptions.returnFocusOnDeactivate : true;
      config.escapeDeactivates = userOptions && userOptions.escapeDeactivates !== void 0 ? userOptions.escapeDeactivates : true;
      var trap = {
        activate,
        deactivate,
        pause,
        unpause
      };
      return trap;
      function activate(activateOptions) {
        if (active) return;
        var defaultedActivateOptions = {
          onActivate: activateOptions && activateOptions.onActivate !== void 0 ? activateOptions.onActivate : config.onActivate
        };
        active = true;
        paused = false;
        nodeFocusedBeforeActivation = document.activeElement;
        if (defaultedActivateOptions.onActivate) {
          defaultedActivateOptions.onActivate();
        }
        addListeners();
        return trap;
      }
      function deactivate(deactivateOptions) {
        if (!active) return;
        var defaultedDeactivateOptions = {
          returnFocus: deactivateOptions && deactivateOptions.returnFocus !== void 0 ? deactivateOptions.returnFocus : config.returnFocusOnDeactivate,
          onDeactivate: deactivateOptions && deactivateOptions.onDeactivate !== void 0 ? deactivateOptions.onDeactivate : config.onDeactivate
        };
        removeListeners();
        if (defaultedDeactivateOptions.onDeactivate) {
          defaultedDeactivateOptions.onDeactivate();
        }
        if (defaultedDeactivateOptions.returnFocus) {
          setTimeout(function() {
            tryFocus(nodeFocusedBeforeActivation);
          }, 0);
        }
        active = false;
        paused = false;
        return this;
      }
      function pause() {
        if (paused || !active) return;
        paused = true;
        removeListeners();
      }
      function unpause() {
        if (!paused || !active) return;
        paused = false;
        addListeners();
      }
      function addListeners() {
        if (!active) return;
        if (listeningFocusTrap) {
          listeningFocusTrap.pause();
        }
        listeningFocusTrap = trap;
        updateTabbableNodes();
        setTimeout(function() {
          tryFocus(firstFocusNode());
        }, 0);
        document.addEventListener("focus", checkFocus, true);
        document.addEventListener("click", checkClick, true);
        document.addEventListener("mousedown", checkPointerDown, true);
        document.addEventListener("touchstart", checkPointerDown, true);
        document.addEventListener("keydown", checkKey, true);
        return trap;
      }
      function removeListeners() {
        if (!active || listeningFocusTrap !== trap) return;
        document.removeEventListener("focus", checkFocus, true);
        document.removeEventListener("click", checkClick, true);
        document.removeEventListener("mousedown", checkPointerDown, true);
        document.removeEventListener("touchstart", checkPointerDown, true);
        document.removeEventListener("keydown", checkKey, true);
        listeningFocusTrap = null;
        return trap;
      }
      function getNodeForOption(optionName) {
        var optionValue = config[optionName];
        var node = optionValue;
        if (!optionValue) {
          return null;
        }
        if (typeof optionValue === "string") {
          node = document.querySelector(optionValue);
          if (!node) {
            throw new Error("`" + optionName + "` refers to no known node");
          }
        }
        if (typeof optionValue === "function") {
          node = optionValue();
          if (!node) {
            throw new Error("`" + optionName + "` did not return a node");
          }
        }
        return node;
      }
      function firstFocusNode() {
        var node;
        if (getNodeForOption("initialFocus") !== null) {
          node = getNodeForOption("initialFocus");
        } else if (container.contains(document.activeElement)) {
          node = document.activeElement;
        } else {
          node = tabbableNodes[0] || getNodeForOption("fallbackFocus");
        }
        if (!node) {
          throw new Error("You can't have a focus-trap without at least one focusable element");
        }
        return node;
      }
      function checkPointerDown(e) {
        if (config.clickOutsideDeactivates && !container.contains(e.target)) {
          deactivate({ returnFocus: false });
        }
      }
      function checkClick(e) {
        if (config.clickOutsideDeactivates) return;
        if (container.contains(e.target)) return;
        e.preventDefault();
        e.stopImmediatePropagation();
      }
      function checkFocus(e) {
        if (container.contains(e.target)) return;
        e.preventDefault();
        e.stopImmediatePropagation();
        if (typeof e.target.blur === "function") e.target.blur();
        if (tabEvent) {
          readjustFocus(tabEvent);
        }
      }
      function checkKey(e) {
        if (e.key === "Tab" || e.keyCode === 9) {
          handleTab(e);
        }
        if (config.escapeDeactivates !== false && isEscapeEvent(e)) {
          deactivate();
        }
      }
      function handleTab(e) {
        updateTabbableNodes();
        if (e.target.hasAttribute("tabindex") && Number(e.target.getAttribute("tabindex")) < 0) {
          return tabEvent = e;
        }
        e.preventDefault();
        var currentFocusIndex = tabbableNodes.indexOf(e.target);
        if (e.shiftKey) {
          if (e.target === firstTabbableNode || tabbableNodes.indexOf(e.target) === -1) {
            return tryFocus(lastTabbableNode);
          }
          return tryFocus(tabbableNodes[currentFocusIndex - 1]);
        }
        if (e.target === lastTabbableNode) return tryFocus(firstTabbableNode);
        tryFocus(tabbableNodes[currentFocusIndex + 1]);
      }
      function updateTabbableNodes() {
        tabbableNodes = tabbable(container);
        firstTabbableNode = tabbableNodes[0];
        lastTabbableNode = tabbableNodes[tabbableNodes.length - 1];
      }
      function readjustFocus(e) {
        if (e.shiftKey) return tryFocus(lastTabbableNode);
        tryFocus(firstTabbableNode);
      }
    }
    function isEscapeEvent(e) {
      return e.key === "Escape" || e.key === "Esc" || e.keyCode === 27;
    }
    function tryFocus(node) {
      if (!node || !node.focus) return;
      if (node === document.activeElement) return;
      node.focus();
      if (node.tagName.toLowerCase() === "input") {
        node.select();
      }
    }
    module.exports = focusTrap;
  }
});

// node_modules/@atlaskit/layering/dist/esm/components/layering-context.js
var import_react2 = __toESM(require_react());

// node_modules/@atlaskit/platform-feature-flags-react/dist/esm/utils/component-with-condition/index.js
init_extends();
var import_react = __toESM(require_react());
function componentWithCondition(condition, ComponentTrue, ComponentFalse) {
  var ComponentWithCondition = (0, import_react.forwardRef)(function(props, ref) {
    return condition() ? import_react.default.createElement(ComponentTrue, _extends({}, props, {
      ref
    })) : import_react.default.createElement(ComponentFalse, _extends({}, props, {
      ref
    }));
  });
  if (ComponentTrue.name !== "") {
    ComponentWithCondition.displayName = "ComponentWithCondition[".concat(condition.name, "]");
  }
  return ComponentWithCondition;
}

// node_modules/@atlaskit/platform-feature-flags-react/dist/esm/utils/component-with-fg/index.js
init_esm();
var componentWithFG = function componentWithFG2(featureFlagName, ComponentTrue, ComponentFalse) {
  return componentWithCondition(function() {
    return fg(featureFlagName);
  }, ComponentTrue, ComponentFalse);
};

// node_modules/@atlaskit/platform-feature-flags-react/dist/esm/utils/function-with-fg/index.js
init_esm();

// node_modules/@atlaskit/layering/dist/esm/classes/layer-node.js
init_classCallCheck();
init_createClass();
var LayerNode = (function() {
  function LayerNode2(id, parent) {
    _classCallCheck(this, LayerNode2);
    this.id = id;
    this.childNodes = [];
    this.parent = parent;
  }
  return _createClass(LayerNode2, [{
    key: "addChild",
    value: function addChild(node) {
      this.childNodes.push(node);
    }
  }, {
    key: "removeChild",
    value: function removeChild(node) {
      this.childNodes = this.childNodes.filter(function(child) {
        return child.id !== node.id;
      });
    }
  }, {
    key: "getLevel",
    value: function getLevel() {
      if (!this.parent) {
        return 1;
      }
      return this.parent.getLevel() + 1;
    }
  }, {
    key: "getHeight",
    value: function getHeight() {
      if (this.childNodes.length === 0) {
        return 1;
      }
      return Math.max.apply(Math, _toConsumableArray(this.childNodes.map(function(child) {
        return child.getHeight();
      }))) + 1;
    }
  }]);
})();

// node_modules/@atlaskit/layering/dist/esm/components/layering-context.js
var LevelContext = (0, import_react2.createContext)(0);
var LevelNodeContext = (0, import_react2.createContext)({
  current: null
});
var RootNodeContext = (0, import_react2.createContext)({
  current: null
});
var TopLevelContext = (0, import_react2.createContext)({
  topLevelRef: {
    current: null
  },
  layerList: {
    current: null
  },
  setTopLevel: noop
});
var LevelProvider = function LevelProvider2(_ref) {
  var children = _ref.children, currentLevel = _ref.currentLevel, levelNode = _ref.node;
  (0, import_react2.useEffect)(function() {
    var levelNodeSafe = levelNode.current;
    var parentNode = levelNodeSafe.parent;
    parentNode === null || parentNode === void 0 || parentNode.addChild(levelNodeSafe);
    return function() {
      parentNode === null || parentNode === void 0 || parentNode.removeChild(levelNodeSafe);
    };
  }, [levelNode]);
  return import_react2.default.createElement(LevelContext.Provider, {
    value: currentLevel
  }, import_react2.default.createElement(LevelNodeContext.Provider, {
    value: levelNode
  }, children));
};
var LevelProviderOld = function LevelProviderOld2(_ref2) {
  var children = _ref2.children, currentLevel = _ref2.currentLevel;
  var _useContext = (0, import_react2.useContext)(TopLevelContext), layerList = _useContext.layerList;
  var id = (0, import_react2.useRef)(Math.random().toString(36));
  (0, import_react2.useEffect)(function() {
    var safeLayerList = layerList === null || layerList === void 0 ? void 0 : layerList.current;
    var safeId = id.current;
    if (!safeLayerList) {
      return;
    }
    safeLayerList.push(safeId);
    return function() {
      var index = safeLayerList.indexOf(safeId);
      if (index > -1) {
        safeLayerList.splice(index, 1);
      }
    };
  }, [layerList, id]);
  return import_react2.default.createElement(LevelContext.Provider, {
    value: currentLevel
  }, children);
};
var LayeringProvider = function LayeringProvider2(_ref3) {
  var children = _ref3.children;
  var topLevelRef = (0, import_react2.useRef)(0);
  var layerList = (0, import_react2.useRef)([]);
  var value = (0, import_react2.useMemo)(function() {
    return {
      topLevelRef,
      setTopLevel: function setTopLevel(level) {
        topLevelRef.current = level;
      },
      layerList
    };
  }, [topLevelRef, layerList]);
  return import_react2.default.createElement(TopLevelContext.Provider, {
    value
  }, children);
};
var LayeringOld = function LayeringOld2(_ref4) {
  var children = _ref4.children, _ref4$isDisabled = _ref4.isDisabled, isDisabled = _ref4$isDisabled === void 0 ? true : _ref4$isDisabled;
  var currentLevel = (0, import_react2.useContext)(LevelContext);
  if (isDisabled) {
    return import_react2.default.createElement(import_react2.default.Fragment, null, children);
  }
  var isNested = currentLevel > 0;
  var content = import_react2.default.createElement(LevelProviderOld, {
    currentLevel: currentLevel + 1
  }, children);
  return isNested ? content : import_react2.default.createElement(LayeringProvider, null, content);
};
var LayeringNew = function LayeringNew2(_ref5) {
  var children = _ref5.children, _ref5$isDisabled = _ref5.isDisabled, isDisabled = _ref5$isDisabled === void 0 ? true : _ref5$isDisabled;
  var currentLevel = (0, import_react2.useContext)(LevelContext);
  var parentNode = (0, import_react2.useContext)(LevelNodeContext);
  var newNode = (0, import_react2.useRef)(new LayerNode(Math.random().toString(36), parentNode.current));
  if (isDisabled) {
    return import_react2.default.createElement(import_react2.default.Fragment, null, children);
  }
  var isNested = currentLevel > 0;
  var content = import_react2.default.createElement(LevelProvider, {
    currentLevel: currentLevel + 1,
    node: newNode
  }, children);
  return isNested ? content : import_react2.default.createElement(RootNodeContext.Provider, {
    value: newNode
  }, content);
};
var Layering = componentWithFG("layering-tree-graph", LayeringNew, LayeringOld);

// node_modules/@atlaskit/layering/dist/esm/hooks/index.js
var import_react3 = __toESM(require_react());
var import_bind_event_listener = __toESM(require_dist());
init_esm();
function useLayering() {
  var currentLevel = (0, import_react3.useContext)(LevelContext);
  var _useContext = (0, import_react3.useContext)(TopLevelContext), topLevelRef = _useContext.topLevelRef, layerList = _useContext.layerList;
  var layerNode;
  var rootNode;
  if (fg("layering-tree-graph")) {
    layerNode = (0, import_react3.useContext)(LevelNodeContext);
    rootNode = (0, import_react3.useContext)(RootNodeContext);
  }
  var isLayerDisabled = (0, import_react3.useCallback)(function() {
    var _layerList$current$le, _layerList$current;
    if (fg("layering-tree-graph")) {
      var _layerNode, _rootNode;
      if (!((_layerNode = layerNode) !== null && _layerNode !== void 0 && _layerNode.current) || !((_rootNode = rootNode) !== null && _rootNode !== void 0 && _rootNode.current)) {
        return false;
      }
      return layerNode.current.getLevel() < rootNode.current.getHeight();
    }
    return ((_layerList$current$le = layerList === null || layerList === void 0 || (_layerList$current = layerList.current) === null || _layerList$current === void 0 ? void 0 : _layerList$current.length) !== null && _layerList$current$le !== void 0 ? _layerList$current$le : 0) !== currentLevel;
  }, [currentLevel, layerList, layerNode, rootNode]);
  var getTopLevel = (0, import_react3.useCallback)(function() {
    var _rootNode2;
    return (_rootNode2 = rootNode) !== null && _rootNode2 !== void 0 && _rootNode2.current ? rootNode.current.getHeight() : null;
  }, [rootNode]);
  return fg("layering-tree-graph") ? {
    currentLevel,
    isLayerDisabled,
    getTopLevel
  } : {
    currentLevel,
    topLevelRef,
    isLayerDisabled,
    layerList
  };
}

// node_modules/@atlaskit/popup/dist/esm/popper-wrapper.js
init_slicedToArray();
init_extends();
init_objectWithoutProperties();
var React4 = __toESM(require_react());
var import_react8 = __toESM(require_react());
init_runtime();
import "/Users/movalle/Documents/GitHub/test-enhanced-app/node_modules/@atlaskit/popup/dist/esm/popper-wrapper.compiled.css";
init_esm();

// node_modules/@atlaskit/popup/dist/esm/reposition-on-update.js
var import_react4 = __toESM(require_react());
var RepositionOnUpdate = function RepositionOnUpdate2(_ref) {
  var children = _ref.children, update = _ref.update;
  var isFirstRenderRef = (0, import_react4.useRef)(true);
  (0, import_react4.useLayoutEffect)(function() {
    if (isFirstRenderRef.current) {
      isFirstRenderRef.current = false;
      return;
    }
    update();
  }, [update]);
  return import_react4.default.createElement(import_react4.Fragment, null, children);
};

// node_modules/@atlaskit/popup/dist/esm/use-close-manager.js
var import_react6 = __toESM(require_react());
var import_bind_event_listener2 = __toESM(require_dist());
init_esm();

// node_modules/@atlaskit/popup/dist/esm/utils/is-element-interactive.js
var interactiveTags = ["button", "a", "input", "select", "textarea"];
var isInteractiveElement = function isInteractiveElement2(element) {
  if (interactiveTags.includes(element.tagName.toLowerCase())) {
    return true;
  }
  if (element.getAttribute("tabindex") !== null || element.hasAttribute("contenteditable")) {
    return true;
  }
  return false;
};

// node_modules/@atlaskit/popup/dist/esm/utils/use-animation-frame.js
var import_react5 = __toESM(require_react());
var useAnimationFrame = function useAnimationFrame2() {
  var animationsRef = (0, import_react5.useRef)([]);
  var requestFrame = (0, import_react5.useCallback)(function(callback) {
    var id = requestAnimationFrame(callback);
    animationsRef.current.push(id);
    return id;
  }, []);
  var cancelFrame = (0, import_react5.useCallback)(function(id) {
    cancelAnimationFrame(id);
    animationsRef.current = animationsRef.current.filter(function(frameId) {
      return frameId !== id;
    });
  }, []);
  var cancelAllFrames = (0, import_react5.useCallback)(function() {
    animationsRef.current.forEach(function(id) {
      return cancelAnimationFrame(id);
    });
    animationsRef.current = [];
  }, []);
  return {
    requestFrame,
    cancelFrame,
    cancelAllFrames
  };
};

// node_modules/@atlaskit/popup/dist/esm/use-close-manager.js
var useCloseManager = function useCloseManager2(_ref) {
  var isOpen = _ref.isOpen, onClose = _ref.onClose, popupRef = _ref.popupRef, triggerRef = _ref.triggerRef, autoFocus = _ref.autoFocus, shouldDisableFocusTrap = _ref.shouldDisableFocusTrap, capture = _ref.shouldUseCaptureOnOutsideClick, shouldCloseOnTab = _ref.shouldCloseOnTab, shouldRenderToParent = _ref.shouldRenderToParent;
  var _useLayering = useLayering(), isLayerDisabled = _useLayering.isLayerDisabled, currentLevel = _useLayering.currentLevel;
  var _useAnimationFrame = useAnimationFrame(), requestFrame = _useAnimationFrame.requestFrame, cancelAllFrames = _useAnimationFrame.cancelAllFrames;
  (0, import_react6.useEffect)(function() {
    if (!isOpen || !popupRef) {
      return noop;
    }
    var inIframe = window && window.self !== window.top && fg("fix-dropdown-close-outside-iframe");
    var closePopup = function closePopup2(event) {
      if (onClose) {
        var _currentLevel = null;
        if (event.target instanceof HTMLElement) {
          var _event$target$closest;
          _currentLevel = (_event$target$closest = event.target.closest("[data-ds--level]")) === null || _event$target$closest === void 0 ? void 0 : _event$target$closest.getAttribute("data-ds--level");
        }
        _currentLevel ? onClose(event, Number(_currentLevel)) : onClose(event);
      }
      if (shouldDisableFocusTrap && fg("platform_dst_popup-disable-focuslock")) {
        requestFrame(function() {
          triggerRef === null || triggerRef === void 0 || triggerRef.setAttribute("tabindex", "0");
          if (popupRef && autoFocus) {
            popupRef.setAttribute("tabindex", "0");
          }
        });
      }
    };
    var onClick = function onClick2(event) {
      var target = event.target;
      var doesDomNodeExist = document.body.contains(target);
      if (!doesDomNodeExist && !inIframe) {
        return;
      }
      if (isLayerDisabled()) {
        if (target instanceof HTMLElement) {
          var _target$closest;
          var layeredElement = (_target$closest = target.closest) === null || _target$closest === void 0 ? void 0 : _target$closest.call(target, "[data-ds--level]");
          if (layeredElement) {
            var closeType = layeredElement.getAttribute("[data-ds--close--type]");
            if (closeType === "single") {
              return;
            }
            var levelOfClickedLayer = layeredElement.getAttribute("data-ds--level");
            if (levelOfClickedLayer && Number(levelOfClickedLayer) > currentLevel) {
              return;
            }
          }
        }
      }
      var isClickOnPopup = popupRef && popupRef.contains(target);
      var isClickOnTrigger = triggerRef && triggerRef.contains(target);
      if (!isClickOnPopup && !isClickOnTrigger) {
        closePopup(event);
        if (document.activeElement && !isInteractiveElement(document.activeElement) && fg("platform_dst_popup-disable-focuslock")) {
          triggerRef === null || triggerRef === void 0 || triggerRef.focus();
        }
      }
    };
    var onKeyDown = function onKeyDown2(event) {
      if (fg("platform_dst_popup-disable-focuslock")) {
        var key = event.key, shiftKey = event.shiftKey;
        if (shiftKey && key === "Tab" && !shouldRenderToParent) {
          if (isLayerDisabled()) {
            return;
          }
          requestFrame(function() {
            var isPopupFocusOut = popupRef && !popupRef.contains(document.activeElement);
            if (isPopupFocusOut) {
              closePopup(event);
              if (currentLevel === 1) {
                triggerRef === null || triggerRef === void 0 || triggerRef.focus();
              }
            }
          });
          return;
        }
        if (key === "Tab") {
          var _document$activeEleme;
          if (shouldCloseOnTab) {
            if (isLayerDisabled()) {
              return;
            }
            closePopup(event);
            return;
          }
          if (isLayerDisabled() && (_document$activeEleme = document.activeElement) !== null && _document$activeEleme !== void 0 && _document$activeEleme.closest("[aria-modal]")) {
            return;
          }
          if (shouldDisableFocusTrap) {
            if (shouldRenderToParent) {
              requestFrame(function() {
                var isPopupFocusOut = popupRef && !popupRef.contains(document.activeElement);
                if (isPopupFocusOut) {
                  closePopup(event);
                }
              });
            } else {
              requestFrame(function() {
                if (!document.hasFocus()) {
                  closePopup(event);
                }
              });
            }
            return;
          }
        }
        if (isLayerDisabled()) {
          return;
        }
        if (key === "Escape" || key === "Esc") {
          if (triggerRef && autoFocus) {
            triggerRef.focus();
          }
          closePopup(event);
        }
      } else {
        if (isLayerDisabled()) {
          return;
        }
        var _key = event.key;
        if (_key === "Escape" || _key === "Esc" || shouldCloseOnTab && _key === "Tab") {
          closePopup(event);
        }
      }
    };
    var parentUnbind;
    if (inIframe && isOpen) {
      parentUnbind = (0, import_bind_event_listener2.bind)(window.parent.window, {
        type: "click",
        listener: onClick,
        options: {
          capture
        }
      });
    }
    var unbind = noop;
    if (fg("popup-onclose-fix")) {
      setTimeout(function() {
        unbind = (0, import_bind_event_listener2.bindAll)(window, [{
          type: "click",
          listener: onClick,
          options: {
            capture
          }
        }, {
          type: "keydown",
          listener: onKeyDown
        }]);
      }, 0);
    } else {
      unbind = (0, import_bind_event_listener2.bindAll)(window, [{
        type: "click",
        listener: onClick,
        options: {
          capture
        }
      }, {
        type: "keydown",
        listener: onKeyDown
      }]);
    }
    var unbindBlur = noop;
    unbindBlur = (0, import_bind_event_listener2.bind)(window, {
      type: "blur",
      listener: function onBlur(e) {
        if (isLayerDisabled() || !(document.activeElement instanceof HTMLIFrameElement)) {
          return;
        }
        closePopup(e);
      }
    });
    return function() {
      var _parentUnbind;
      if (fg("popup-onclose-fix")) {
        setTimeout(function() {
          unbind();
        }, 0);
      } else {
        unbind();
      }
      cancelAllFrames();
      (_parentUnbind = parentUnbind) === null || _parentUnbind === void 0 || _parentUnbind();
      unbindBlur();
    };
  }, [isOpen, onClose, popupRef, triggerRef, autoFocus, shouldDisableFocusTrap, capture, isLayerDisabled, shouldCloseOnTab, currentLevel, shouldRenderToParent, requestFrame, cancelAllFrames]);
};

// node_modules/@atlaskit/popup/dist/esm/use-focus-manager.js
var import_react7 = __toESM(require_react());
var import_focus_trap = __toESM(require_focus_trap());
init_esm();
var useFocusManager = function useFocusManager2(_ref) {
  var initialFocusRef = _ref.initialFocusRef, popupRef = _ref.popupRef, triggerRef = _ref.triggerRef, autoFocus = _ref.autoFocus, shouldCloseOnTab = _ref.shouldCloseOnTab, shouldDisableFocusTrap = _ref.shouldDisableFocusTrap, shouldReturnFocus = _ref.shouldReturnFocus, shouldRenderToParent = _ref.shouldRenderToParent;
  var _useAnimationFrame = useAnimationFrame(), requestFrame = _useAnimationFrame.requestFrame, cancelAllFrames = _useAnimationFrame.cancelAllFrames;
  var _useLayering = useLayering(), currentLevel = _useLayering.currentLevel;
  (0, import_react7.useEffect)(function() {
    if (!popupRef || shouldCloseOnTab) {
      return noop;
    }
    if (shouldDisableFocusTrap && fg("platform_dst_popup-disable-focuslock")) {
      var isDropdown = popupRef.matches("[id^=ds--dropdown--]");
      var popups = document.querySelectorAll('[data-ds--level="'.concat(currentLevel - 1, '"]'));
      if (!(popups[popups.length - 1] && !shouldRenderToParent && isDropdown)) {
        requestFrame(function() {
          triggerRef === null || triggerRef === void 0 || triggerRef.setAttribute("tabindex", "-1");
          if (popupRef && autoFocus) {
            popupRef.setAttribute("tabindex", "-1");
          }
          (initialFocusRef || popupRef).focus();
        });
        return noop;
      }
    }
    var trapConfig = {
      clickOutsideDeactivates: true,
      escapeDeactivates: true,
      initialFocus: initialFocusRef || popupRef,
      fallbackFocus: popupRef,
      returnFocusOnDeactivate: shouldReturnFocus
    };
    var focusTrap = (0, import_focus_trap.default)(popupRef, trapConfig);
    requestFrame(function() {
      focusTrap.activate();
    });
    return function() {
      cancelAllFrames();
      focusTrap.deactivate();
    };
  }, [popupRef, triggerRef, autoFocus, initialFocusRef, shouldCloseOnTab, shouldDisableFocusTrap, requestFrame, cancelAllFrames, shouldReturnFocus, shouldRenderToParent, currentLevel]);
};

// node_modules/@atlaskit/popup/dist/esm/popper-wrapper.js
var _excluded = ["shouldRenderToParent", "shouldFitContainer", "children", "appearance", "className", "isReferenceHidden"];
var wrapperStyles = {
  root: "_2rkoglpi _1e0c1ule _vchhusvi _1pby1nn1 _bfhk1bhr _16qs1cd0 _syaz1fxt _1q1l1bhr _nt751r31 _49pcglyw _1hvw1o36"
};
var focusRingStyles = {
  root: "_mizu194a _1ah31bk5 _ra3xnqa1 _128m1bk5 _1cvmnqa1 _4davt94y"
};
var DefaultPopupComponent = (0, import_react8.forwardRef)(function(props, ref) {
  var shouldRenderToParent = props.shouldRenderToParent, shouldFitContainer = props.shouldFitContainer, children = props.children, appearance = props.appearance, className = props.className, isReferenceHidden = props.isReferenceHidden, htmlAttributes = _objectWithoutProperties(props, _excluded);
  return React4.createElement("div", _extends({
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-classname-prop
    className: ax([wrapperStyles.root, appearance === "UNSAFE_modal-below-sm" && "_dk5d1b66 _c71ldtre _kqsw1n9t _152t1b66", !shouldRenderToParent && "_1reo1wug _18m91wug", shouldFitContainer && "_1bsb1osq", className])
  }, htmlAttributes, {
    ref
  }), children);
});
function PopperWrapper(_ref) {
  var xcss = _ref.xcss, isOpen = _ref.isOpen, id = _ref.id, offset = _ref.offset, testId = _ref.testId, content = _ref.content, fallbackPlacements = _ref.fallbackPlacements, onClose = _ref.onClose, boundary = _ref.boundary, rootBoundary = _ref.rootBoundary, shouldFlip = _ref.shouldFlip, _ref$placement = _ref.placement, placement = _ref$placement === void 0 ? "auto" : _ref$placement, _ref$popupComponent = _ref.popupComponent, PopupContainer = _ref$popupComponent === void 0 ? DefaultPopupComponent : _ref$popupComponent, _ref$autoFocus = _ref.autoFocus, autoFocus = _ref$autoFocus === void 0 ? true : _ref$autoFocus, triggerRef = _ref.triggerRef, shouldUseCaptureOnOutsideClick = _ref.shouldUseCaptureOnOutsideClick, shouldRenderToParent = _ref.shouldRenderToParent, shouldFitContainer = _ref.shouldFitContainer, shouldDisableFocusLock = _ref.shouldDisableFocusLock, _ref$shouldReturnFocu = _ref.shouldReturnFocus, shouldReturnFocus = _ref$shouldReturnFocu === void 0 ? true : _ref$shouldReturnFocu, strategy = _ref.strategy, role = _ref.role, label = _ref.label, titleId = _ref.titleId, modifiers = _ref.modifiers, shouldFitViewport = _ref.shouldFitViewport, _ref$appearance = _ref.appearance, appearance = _ref$appearance === void 0 ? "default" : _ref$appearance;
  var _useState = (0, import_react8.useState)(null), _useState2 = _slicedToArray(_useState, 2), popupRef = _useState2[0], setPopupRef = _useState2[1];
  var _useState3 = (0, import_react8.useState)(null), _useState4 = _slicedToArray(_useState3, 2), initialFocusRef = _useState4[0], setInitialFocusRef = _useState4[1];
  var shouldCloseOnTab = shouldRenderToParent && shouldDisableFocusLock;
  var shouldDisableFocusTrap = role !== "dialog";
  useFocusManager({
    initialFocusRef,
    popupRef,
    shouldCloseOnTab,
    triggerRef,
    autoFocus,
    shouldDisableFocusTrap,
    shouldReturnFocus
  });
  useCloseManager({
    isOpen,
    onClose,
    popupRef,
    triggerRef,
    shouldUseCaptureOnOutsideClick,
    shouldCloseOnTab,
    autoFocus,
    shouldDisableFocusTrap,
    shouldRenderToParent
  });
  var _useLayering = useLayering(), currentLevel = _useLayering.currentLevel;
  var mergedModifiers = (0, import_react8.useMemo)(function() {
    return [{
      name: "flip",
      enabled: shouldFlip,
      options: {
        rootBoundary,
        boundary,
        fallbackPlacements
      }
    }].concat(_toConsumableArray(modifiers || []));
  }, [shouldFlip, rootBoundary, boundary, fallbackPlacements, modifiers]);
  return React4.createElement(Popper, {
    placement,
    offset,
    modifiers: mergedModifiers,
    strategy,
    shouldFitViewport
  }, function(_ref2) {
    var _ref3 = _ref2.ref, style = _ref2.style, placement2 = _ref2.placement, update = _ref2.update, isReferenceHidden = _ref2.isReferenceHidden;
    var popupContainer = React4.createElement(
      PopupContainer,
      {
        className: ax([
          xcss,
          // @ts-expect-error: `ax` is not typed correctly
          !initialFocusRef && // eslint-disable-next-line @atlaskit/platform/ensure-feature-flag-prefix
          fg("platform-design-system-apply-popup-wrapper-focus") && focusRingStyles.root
        ]),
        appearance,
        id,
        "data-ds--level": currentLevel,
        "data-placement": placement2,
        "data-testid": testId,
        role,
        "aria-label": label,
        "aria-labelledby": titleId,
        ref: function ref(node) {
          if (node) {
            if (typeof _ref3 === "function") {
              _ref3(node);
            } else {
              _ref3.current = node;
            }
            setPopupRef(node);
          }
        },
        style: appearance === "UNSAFE_modal-below-sm" ? {} : style,
        tabIndex: autoFocus ? 0 : void 0,
        shouldRenderToParent,
        shouldFitContainer,
        isReferenceHidden
      },
      React4.createElement(RepositionOnUpdate, {
        update
      }, content({
        update,
        isOpen,
        onClose,
        setInitialFocusRef
      }))
    );
    return React4.createElement(import_react8.Fragment, null, popupContainer, appearance === "UNSAFE_modal-below-sm" && React4.createElement("div", {
      className: ax(["_1r04idpf _kqsw1n9t _bfhk10xm"])
    }));
  });
}
var popper_wrapper_default = PopperWrapper;

// node_modules/@atlaskit/popup/dist/esm/use-appearance.js
init_slicedToArray();
var import_react9 = __toESM(require_react());
function usePopupAppearance(_ref) {
  var _appearance = _ref.appearance, _shouldRenderToParent = _ref.shouldRenderToParent;
  var mq = UNSAFE_useMediaQuery("below.sm", function(e) {
    setIsSmallViewport(!!e.matches);
  });
  var _useState = (0, import_react9.useState)(!!(mq !== null && mq !== void 0 && mq.matches)), _useState2 = _slicedToArray(_useState, 2), isSmallViewport = _useState2[0], setIsSmallViewport = _useState2[1];
  var appearance = _appearance === "UNSAFE_modal-below-sm" && isSmallViewport ? "UNSAFE_modal-below-sm" : "default";
  var shouldRenderToParent = _shouldRenderToParent && appearance === "default";
  return {
    appearance,
    shouldRenderToParent
  };
}

// node_modules/@atlaskit/popup/dist/esm/use-get-memoized-merged-trigger-ref.js
init_slicedToArray();
var import_react10 = __toESM(require_react());
var useGetMemoizedMergedTriggerRef = function useGetMemoizedMergedTriggerRef2() {
  var _useState = (0, import_react10.useState)(function() {
    return memoizeOne(function(ref, setTriggerRef, isOpen) {
      return function(node) {
        if (node && isOpen) {
          if (typeof ref === "function") {
            ref(node);
          } else if (ref) {
            ref.current = node;
          }
          setTriggerRef(node);
        }
      };
    });
  }), _useState2 = _slicedToArray(_useState, 1), getMemoizedMergedTriggerRef = _useState2[0];
  return getMemoizedMergedTriggerRef;
};

export {
  Layering,
  useLayering,
  popper_wrapper_default,
  usePopupAppearance,
  useGetMemoizedMergedTriggerRef
};
//# sourceMappingURL=chunk-NIAVOAE6.js.map
