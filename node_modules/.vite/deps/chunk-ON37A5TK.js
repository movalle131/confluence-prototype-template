import {
  _toConsumableArray
} from "./chunk-RG5U4ZYV.js";
import {
  _classCallCheck,
  _createClass,
  _defineProperty,
  _get,
  _getPrototypeOf,
  _inherits,
  _possibleConstructorReturn,
  _typeof,
  init_classCallCheck,
  init_createClass,
  init_defineProperty,
  init_get,
  init_getPrototypeOf,
  init_inherits,
  init_possibleConstructorReturn,
  init_typeof
} from "./chunk-WFA677R7.js";
import {
  require_react
} from "./chunk-QJTFJ6OV.js";
import {
  __toESM
} from "./chunk-V4OQ3NZ2.js";

// node_modules/use-memo-one/dist/use-memo-one.esm.js
var import_react = __toESM(require_react());
function areInputsEqual(newInputs, lastInputs) {
  if (newInputs.length !== lastInputs.length) {
    return false;
  }
  for (var i = 0; i < newInputs.length; i++) {
    if (newInputs[i] !== lastInputs[i]) {
      return false;
    }
  }
  return true;
}
function useMemoOne(getResult, inputs) {
  var initial = (0, import_react.useState)(function() {
    return {
      inputs,
      result: getResult()
    };
  })[0];
  var isFirstRun = (0, import_react.useRef)(true);
  var committed = (0, import_react.useRef)(initial);
  var useCache = isFirstRun.current || Boolean(inputs && committed.current.inputs && areInputsEqual(inputs, committed.current.inputs));
  var cache = useCache ? committed.current : {
    inputs,
    result: getResult()
  };
  (0, import_react.useEffect)(function() {
    isFirstRun.current = false;
    committed.current = cache;
  }, [cache]);
  return cache.result;
}
function useCallbackOne(callback, inputs) {
  return useMemoOne(function() {
    return callback;
  }, inputs);
}

// node_modules/@atlaskit/analytics-next/dist/esm/events/UIAnalyticsEvent.js
init_classCallCheck();
init_createClass();
init_possibleConstructorReturn();
init_getPrototypeOf();
init_get();
init_inherits();
init_defineProperty();

// node_modules/@atlaskit/analytics-next/dist/esm/events/AnalyticsEvent.js
init_typeof();
init_classCallCheck();
init_createClass();
init_defineProperty();
function ownKeys(e, r) {
  var t = Object.keys(e);
  if (Object.getOwnPropertySymbols) {
    var o = Object.getOwnPropertySymbols(e);
    r && (o = o.filter(function(r2) {
      return Object.getOwnPropertyDescriptor(e, r2).enumerable;
    })), t.push.apply(t, o);
  }
  return t;
}
function _objectSpread(e) {
  for (var r = 1; r < arguments.length; r++) {
    var t = null != arguments[r] ? arguments[r] : {};
    r % 2 ? ownKeys(Object(t), true).forEach(function(r2) {
      _defineProperty(e, r2, t[r2]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function(r2) {
      Object.defineProperty(e, r2, Object.getOwnPropertyDescriptor(t, r2));
    });
  }
  return e;
}
var AnalyticsEvent = (function() {
  function AnalyticsEvent2(props) {
    var _this = this;
    _classCallCheck(this, AnalyticsEvent2);
    _defineProperty(this, "_isAnalyticsEvent", true);
    _defineProperty(this, "clone", function() {
      var payload = _objectSpread({}, _this.payload);
      return new AnalyticsEvent2({
        payload
      });
    });
    this.payload = props.payload;
  }
  return _createClass(AnalyticsEvent2, [{
    key: "update",
    value: function update(updater) {
      if (typeof updater === "function") {
        this.payload = updater(this.payload);
      }
      if (_typeof(updater) === "object") {
        this.payload = _objectSpread(_objectSpread({}, this.payload), updater);
      }
      return this;
    }
  }]);
})();

// node_modules/@atlaskit/analytics-next/dist/esm/events/UIAnalyticsEvent.js
function _callSuper(t, o, e) {
  return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e));
}
function _isNativeReflectConstruct() {
  try {
    var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
  } catch (t2) {
  }
  return (_isNativeReflectConstruct = function _isNativeReflectConstruct2() {
    return !!t;
  })();
}
function _superPropGet(t, o, e, r) {
  var p = _get(_getPrototypeOf(1 & r ? t.prototype : t), o, e);
  return 2 & r && "function" == typeof p ? function(t2) {
    return p.apply(e, t2);
  } : p;
}
var UIAnalyticsEvent = (function(_AnalyticsEvent) {
  function UIAnalyticsEvent2(props) {
    var _this;
    _classCallCheck(this, UIAnalyticsEvent2);
    _this = _callSuper(this, UIAnalyticsEvent2, [props]);
    _defineProperty(_this, "_isUIAnalyticsEvent", true);
    _defineProperty(_this, "clone", function() {
      if (_this.hasFired) {
        if (!process.env.CI) {
          console.warn("Cannot clone an event after it's been fired.");
        }
        return null;
      }
      var context = _toConsumableArray(_this.context);
      var handlers = _toConsumableArray(_this.handlers);
      var payload = JSON.parse(JSON.stringify(_this.payload));
      return new UIAnalyticsEvent2({
        context,
        handlers,
        payload
      });
    });
    _defineProperty(_this, "fire", function(channel) {
      if (_this.hasFired) {
        if (!process.env.CI) {
          console.warn("Cannot fire an event twice.");
        }
        return;
      }
      _this.handlers.forEach(function(handler) {
        return handler(_this, channel);
      });
      _this.hasFired = true;
    });
    _this.context = props.context || [];
    _this.handlers = props.handlers || [];
    _this.hasFired = false;
    return _this;
  }
  _inherits(UIAnalyticsEvent2, _AnalyticsEvent);
  return _createClass(UIAnalyticsEvent2, [{
    key: "update",
    value: function update(updater) {
      if (this.hasFired) {
        if (!process.env.CI) {
          console.warn("Cannot update an event after it's been fired.");
        }
        return this;
      }
      return _superPropGet(UIAnalyticsEvent2, "update", this, 3)([updater]);
    }
  }]);
})(AnalyticsEvent);

// node_modules/@atlaskit/analytics-next/dist/esm/hooks/useAnalyticsContext.js
var import_react3 = __toESM(require_react());

// node_modules/@atlaskit/analytics-next-stable-react-context/dist/esm/context.js
var import_react2 = __toESM(require_react());
var AnalyticsNextContext = (0, import_react2.createContext)({
  getAtlaskitAnalyticsContext: function() {
    return [];
  },
  getAtlaskitAnalyticsEventHandlers: function() {
    return [];
  }
});
var context_default = AnalyticsNextContext;

// node_modules/@atlaskit/analytics-next-stable-react-context/dist/esm/index.js
var esm_default = context_default;

// node_modules/@atlaskit/analytics-next/dist/esm/hooks/useAnalyticsContext.js
var useAnalyticsContext = function useAnalyticsContext2() {
  return (0, import_react3.useContext)(esm_default);
};

// node_modules/@atlaskit/analytics-next/dist/esm/hooks/useAnalyticsEvents.js
function useAnalyticsEvents() {
  var analyticsContext = useAnalyticsContext();
  var createAnalyticsEvent = useCallbackOne(function(payload) {
    return new UIAnalyticsEvent({
      context: analyticsContext.getAtlaskitAnalyticsContext(),
      handlers: analyticsContext.getAtlaskitAnalyticsEventHandlers(),
      payload
    });
  }, [analyticsContext]);
  return {
    createAnalyticsEvent
  };
}

// node_modules/@atlaskit/analytics-next/dist/esm/hooks/usePlatformLeafEventHandler.js
init_defineProperty();
var import_react5 = __toESM(require_react());

// node_modules/@atlaskit/analytics-next/dist/esm/hooks/useTrackedRef.js
var import_react4 = __toESM(require_react());
var useTrackedRef = function useTrackedRef2(value) {
  var ref = (0, import_react4.useRef)(value);
  ref.current = value;
  return ref;
};

// node_modules/@atlaskit/analytics-next/dist/esm/hooks/usePlatformLeafEventHandler.js
function ownKeys2(e, r) {
  var t = Object.keys(e);
  if (Object.getOwnPropertySymbols) {
    var o = Object.getOwnPropertySymbols(e);
    r && (o = o.filter(function(r2) {
      return Object.getOwnPropertyDescriptor(e, r2).enumerable;
    })), t.push.apply(t, o);
  }
  return t;
}
function _objectSpread2(e) {
  for (var r = 1; r < arguments.length; r++) {
    var t = null != arguments[r] ? arguments[r] : {};
    r % 2 ? ownKeys2(Object(t), true).forEach(function(r2) {
      _defineProperty(e, r2, t[r2]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys2(Object(t)).forEach(function(r2) {
      Object.defineProperty(e, r2, Object.getOwnPropertyDescriptor(t, r2));
    });
  }
  return e;
}
function usePlatformLeafEventHandler(_ref) {
  var fn = _ref.fn, action = _ref.action, componentName = _ref.componentName, actionSubject = _ref.actionSubject, packageName = _ref.packageName, packageVersion = _ref.packageVersion, analyticsData = _ref.analyticsData;
  var _useAnalyticsEvents = useAnalyticsEvents(), createAnalyticsEvent = _useAnalyticsEvents.createAnalyticsEvent;
  var dataRef = useTrackedRef(analyticsData);
  var fnRef = useTrackedRef(fn);
  var handler = (0, import_react5.useCallback)(function(value) {
    var analyticsEvent = createAnalyticsEvent({
      action,
      actionSubject: actionSubject || componentName,
      attributes: {
        componentName,
        packageName,
        packageVersion
      }
    });
    var context = _objectSpread2({
      componentName,
      packageName,
      packageVersion
    }, dataRef.current);
    analyticsEvent.context.push(context);
    var clone = analyticsEvent.clone();
    if (clone) {
      clone.fire("atlaskit");
    }
    fnRef.current(value, analyticsEvent);
  }, [
    // These are strings and won't change
    action,
    componentName,
    actionSubject,
    packageName,
    packageVersion,
    // This function is memoized in the context
    createAnalyticsEvent,
    // these are a stable ref because of the useTrackedRef hook
    dataRef,
    fnRef
  ]);
  return handler;
}

export {
  esm_default,
  useAnalyticsContext,
  useAnalyticsEvents,
  useTrackedRef,
  usePlatformLeafEventHandler
};
//# sourceMappingURL=chunk-ON37A5TK.js.map
